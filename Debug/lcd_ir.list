
lcd_ir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080041a8  080041a8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041a8  080041a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080041b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08004218  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08004218  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eb1  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011d7  00000000  00000000  00023f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00025118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00025770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e91  00000000  00000000  00025d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005461  00000000  00000000  00028ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004cb63  00000000  00000000  0002e002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007ab65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002258  00000000  00000000  0007abb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0007ce10  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0007ce34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f74 	.word	0x08003f74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003f74 	.word	0x08003f74

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4647      	mov	r7, r8
 800040e:	b580      	push	{r7, lr}
 8000410:	0007      	movs	r7, r0
 8000412:	4699      	mov	r9, r3
 8000414:	0c3b      	lsrs	r3, r7, #16
 8000416:	469c      	mov	ip, r3
 8000418:	0413      	lsls	r3, r2, #16
 800041a:	0c1b      	lsrs	r3, r3, #16
 800041c:	001d      	movs	r5, r3
 800041e:	000e      	movs	r6, r1
 8000420:	4661      	mov	r1, ip
 8000422:	0400      	lsls	r0, r0, #16
 8000424:	0c14      	lsrs	r4, r2, #16
 8000426:	0c00      	lsrs	r0, r0, #16
 8000428:	4345      	muls	r5, r0
 800042a:	434b      	muls	r3, r1
 800042c:	4360      	muls	r0, r4
 800042e:	4361      	muls	r1, r4
 8000430:	18c0      	adds	r0, r0, r3
 8000432:	0c2c      	lsrs	r4, r5, #16
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4372      	muls	r2, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	4463      	add	r3, ip
 800044e:	042d      	lsls	r5, r5, #16
 8000450:	0c2d      	lsrs	r5, r5, #16
 8000452:	18c9      	adds	r1, r1, r3
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	1889      	adds	r1, r1, r2
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_ddiv>:
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	4657      	mov	r7, sl
 8000468:	464e      	mov	r6, r9
 800046a:	4645      	mov	r5, r8
 800046c:	46de      	mov	lr, fp
 800046e:	b5e0      	push	{r5, r6, r7, lr}
 8000470:	4681      	mov	r9, r0
 8000472:	0005      	movs	r5, r0
 8000474:	030c      	lsls	r4, r1, #12
 8000476:	0048      	lsls	r0, r1, #1
 8000478:	4692      	mov	sl, r2
 800047a:	001f      	movs	r7, r3
 800047c:	b085      	sub	sp, #20
 800047e:	0b24      	lsrs	r4, r4, #12
 8000480:	0d40      	lsrs	r0, r0, #21
 8000482:	0fce      	lsrs	r6, r1, #31
 8000484:	2800      	cmp	r0, #0
 8000486:	d100      	bne.n	800048a <__aeabi_ddiv+0x26>
 8000488:	e156      	b.n	8000738 <__aeabi_ddiv+0x2d4>
 800048a:	4bd4      	ldr	r3, [pc, #848]	; (80007dc <__aeabi_ddiv+0x378>)
 800048c:	4298      	cmp	r0, r3
 800048e:	d100      	bne.n	8000492 <__aeabi_ddiv+0x2e>
 8000490:	e172      	b.n	8000778 <__aeabi_ddiv+0x314>
 8000492:	0f6b      	lsrs	r3, r5, #29
 8000494:	00e4      	lsls	r4, r4, #3
 8000496:	431c      	orrs	r4, r3
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	4323      	orrs	r3, r4
 800049e:	4698      	mov	r8, r3
 80004a0:	4bcf      	ldr	r3, [pc, #828]	; (80007e0 <__aeabi_ddiv+0x37c>)
 80004a2:	00ed      	lsls	r5, r5, #3
 80004a4:	469b      	mov	fp, r3
 80004a6:	2300      	movs	r3, #0
 80004a8:	4699      	mov	r9, r3
 80004aa:	4483      	add	fp, r0
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	033c      	lsls	r4, r7, #12
 80004b0:	007b      	lsls	r3, r7, #1
 80004b2:	4650      	mov	r0, sl
 80004b4:	0b24      	lsrs	r4, r4, #12
 80004b6:	0d5b      	lsrs	r3, r3, #21
 80004b8:	0fff      	lsrs	r7, r7, #31
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d100      	bne.n	80004c0 <__aeabi_ddiv+0x5c>
 80004be:	e11f      	b.n	8000700 <__aeabi_ddiv+0x29c>
 80004c0:	4ac6      	ldr	r2, [pc, #792]	; (80007dc <__aeabi_ddiv+0x378>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d100      	bne.n	80004c8 <__aeabi_ddiv+0x64>
 80004c6:	e162      	b.n	800078e <__aeabi_ddiv+0x32a>
 80004c8:	49c5      	ldr	r1, [pc, #788]	; (80007e0 <__aeabi_ddiv+0x37c>)
 80004ca:	0f42      	lsrs	r2, r0, #29
 80004cc:	468c      	mov	ip, r1
 80004ce:	00e4      	lsls	r4, r4, #3
 80004d0:	4659      	mov	r1, fp
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	4463      	add	r3, ip
 80004d8:	0412      	lsls	r2, r2, #16
 80004da:	1acb      	subs	r3, r1, r3
 80004dc:	4314      	orrs	r4, r2
 80004de:	469b      	mov	fp, r3
 80004e0:	00c2      	lsls	r2, r0, #3
 80004e2:	2000      	movs	r0, #0
 80004e4:	0033      	movs	r3, r6
 80004e6:	407b      	eors	r3, r7
 80004e8:	469a      	mov	sl, r3
 80004ea:	464b      	mov	r3, r9
 80004ec:	2b0f      	cmp	r3, #15
 80004ee:	d827      	bhi.n	8000540 <__aeabi_ddiv+0xdc>
 80004f0:	49bc      	ldr	r1, [pc, #752]	; (80007e4 <__aeabi_ddiv+0x380>)
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	58cb      	ldr	r3, [r1, r3]
 80004f6:	469f      	mov	pc, r3
 80004f8:	46b2      	mov	sl, r6
 80004fa:	9b00      	ldr	r3, [sp, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d016      	beq.n	800052e <__aeabi_ddiv+0xca>
 8000500:	2b03      	cmp	r3, #3
 8000502:	d100      	bne.n	8000506 <__aeabi_ddiv+0xa2>
 8000504:	e28e      	b.n	8000a24 <__aeabi_ddiv+0x5c0>
 8000506:	2b01      	cmp	r3, #1
 8000508:	d000      	beq.n	800050c <__aeabi_ddiv+0xa8>
 800050a:	e0d9      	b.n	80006c0 <__aeabi_ddiv+0x25c>
 800050c:	2300      	movs	r3, #0
 800050e:	2400      	movs	r4, #0
 8000510:	2500      	movs	r5, #0
 8000512:	4652      	mov	r2, sl
 8000514:	051b      	lsls	r3, r3, #20
 8000516:	4323      	orrs	r3, r4
 8000518:	07d2      	lsls	r2, r2, #31
 800051a:	4313      	orrs	r3, r2
 800051c:	0028      	movs	r0, r5
 800051e:	0019      	movs	r1, r3
 8000520:	b005      	add	sp, #20
 8000522:	bcf0      	pop	{r4, r5, r6, r7}
 8000524:	46bb      	mov	fp, r7
 8000526:	46b2      	mov	sl, r6
 8000528:	46a9      	mov	r9, r5
 800052a:	46a0      	mov	r8, r4
 800052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052e:	2400      	movs	r4, #0
 8000530:	2500      	movs	r5, #0
 8000532:	4baa      	ldr	r3, [pc, #680]	; (80007dc <__aeabi_ddiv+0x378>)
 8000534:	e7ed      	b.n	8000512 <__aeabi_ddiv+0xae>
 8000536:	46ba      	mov	sl, r7
 8000538:	46a0      	mov	r8, r4
 800053a:	0015      	movs	r5, r2
 800053c:	9000      	str	r0, [sp, #0]
 800053e:	e7dc      	b.n	80004fa <__aeabi_ddiv+0x96>
 8000540:	4544      	cmp	r4, r8
 8000542:	d200      	bcs.n	8000546 <__aeabi_ddiv+0xe2>
 8000544:	e1c7      	b.n	80008d6 <__aeabi_ddiv+0x472>
 8000546:	d100      	bne.n	800054a <__aeabi_ddiv+0xe6>
 8000548:	e1c2      	b.n	80008d0 <__aeabi_ddiv+0x46c>
 800054a:	2301      	movs	r3, #1
 800054c:	425b      	negs	r3, r3
 800054e:	469c      	mov	ip, r3
 8000550:	002e      	movs	r6, r5
 8000552:	4640      	mov	r0, r8
 8000554:	2500      	movs	r5, #0
 8000556:	44e3      	add	fp, ip
 8000558:	0223      	lsls	r3, r4, #8
 800055a:	0e14      	lsrs	r4, r2, #24
 800055c:	431c      	orrs	r4, r3
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	4699      	mov	r9, r3
 8000562:	0423      	lsls	r3, r4, #16
 8000564:	0c1f      	lsrs	r7, r3, #16
 8000566:	0212      	lsls	r2, r2, #8
 8000568:	4649      	mov	r1, r9
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9701      	str	r7, [sp, #4]
 800056e:	f7ff fe5b 	bl	8000228 <__aeabi_uidivmod>
 8000572:	0002      	movs	r2, r0
 8000574:	437a      	muls	r2, r7
 8000576:	040b      	lsls	r3, r1, #16
 8000578:	0c31      	lsrs	r1, r6, #16
 800057a:	4680      	mov	r8, r0
 800057c:	4319      	orrs	r1, r3
 800057e:	428a      	cmp	r2, r1
 8000580:	d907      	bls.n	8000592 <__aeabi_ddiv+0x12e>
 8000582:	2301      	movs	r3, #1
 8000584:	425b      	negs	r3, r3
 8000586:	469c      	mov	ip, r3
 8000588:	1909      	adds	r1, r1, r4
 800058a:	44e0      	add	r8, ip
 800058c:	428c      	cmp	r4, r1
 800058e:	d800      	bhi.n	8000592 <__aeabi_ddiv+0x12e>
 8000590:	e207      	b.n	80009a2 <__aeabi_ddiv+0x53e>
 8000592:	1a88      	subs	r0, r1, r2
 8000594:	4649      	mov	r1, r9
 8000596:	f7ff fe47 	bl	8000228 <__aeabi_uidivmod>
 800059a:	0409      	lsls	r1, r1, #16
 800059c:	468c      	mov	ip, r1
 800059e:	0431      	lsls	r1, r6, #16
 80005a0:	4666      	mov	r6, ip
 80005a2:	9a01      	ldr	r2, [sp, #4]
 80005a4:	0c09      	lsrs	r1, r1, #16
 80005a6:	4342      	muls	r2, r0
 80005a8:	0003      	movs	r3, r0
 80005aa:	4331      	orrs	r1, r6
 80005ac:	428a      	cmp	r2, r1
 80005ae:	d904      	bls.n	80005ba <__aeabi_ddiv+0x156>
 80005b0:	1909      	adds	r1, r1, r4
 80005b2:	3b01      	subs	r3, #1
 80005b4:	428c      	cmp	r4, r1
 80005b6:	d800      	bhi.n	80005ba <__aeabi_ddiv+0x156>
 80005b8:	e1ed      	b.n	8000996 <__aeabi_ddiv+0x532>
 80005ba:	1a88      	subs	r0, r1, r2
 80005bc:	4642      	mov	r2, r8
 80005be:	0412      	lsls	r2, r2, #16
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4690      	mov	r8, r2
 80005c4:	4641      	mov	r1, r8
 80005c6:	9b00      	ldr	r3, [sp, #0]
 80005c8:	040e      	lsls	r6, r1, #16
 80005ca:	0c1b      	lsrs	r3, r3, #16
 80005cc:	001f      	movs	r7, r3
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	0c36      	lsrs	r6, r6, #16
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	0c19      	lsrs	r1, r3, #16
 80005d8:	000b      	movs	r3, r1
 80005da:	4373      	muls	r3, r6
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	437e      	muls	r6, r7
 80005e0:	9103      	str	r1, [sp, #12]
 80005e2:	4351      	muls	r1, r2
 80005e4:	437a      	muls	r2, r7
 80005e6:	0c1f      	lsrs	r7, r3, #16
 80005e8:	46bc      	mov	ip, r7
 80005ea:	1876      	adds	r6, r6, r1
 80005ec:	4466      	add	r6, ip
 80005ee:	42b1      	cmp	r1, r6
 80005f0:	d903      	bls.n	80005fa <__aeabi_ddiv+0x196>
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0249      	lsls	r1, r1, #9
 80005f6:	468c      	mov	ip, r1
 80005f8:	4462      	add	r2, ip
 80005fa:	0c31      	lsrs	r1, r6, #16
 80005fc:	188a      	adds	r2, r1, r2
 80005fe:	0431      	lsls	r1, r6, #16
 8000600:	041e      	lsls	r6, r3, #16
 8000602:	0c36      	lsrs	r6, r6, #16
 8000604:	198e      	adds	r6, r1, r6
 8000606:	4290      	cmp	r0, r2
 8000608:	d302      	bcc.n	8000610 <__aeabi_ddiv+0x1ac>
 800060a:	d112      	bne.n	8000632 <__aeabi_ddiv+0x1ce>
 800060c:	42b5      	cmp	r5, r6
 800060e:	d210      	bcs.n	8000632 <__aeabi_ddiv+0x1ce>
 8000610:	4643      	mov	r3, r8
 8000612:	1e59      	subs	r1, r3, #1
 8000614:	9b00      	ldr	r3, [sp, #0]
 8000616:	469c      	mov	ip, r3
 8000618:	4465      	add	r5, ip
 800061a:	001f      	movs	r7, r3
 800061c:	429d      	cmp	r5, r3
 800061e:	419b      	sbcs	r3, r3
 8000620:	425b      	negs	r3, r3
 8000622:	191b      	adds	r3, r3, r4
 8000624:	18c0      	adds	r0, r0, r3
 8000626:	4284      	cmp	r4, r0
 8000628:	d200      	bcs.n	800062c <__aeabi_ddiv+0x1c8>
 800062a:	e1a0      	b.n	800096e <__aeabi_ddiv+0x50a>
 800062c:	d100      	bne.n	8000630 <__aeabi_ddiv+0x1cc>
 800062e:	e19b      	b.n	8000968 <__aeabi_ddiv+0x504>
 8000630:	4688      	mov	r8, r1
 8000632:	1bae      	subs	r6, r5, r6
 8000634:	42b5      	cmp	r5, r6
 8000636:	41ad      	sbcs	r5, r5
 8000638:	1a80      	subs	r0, r0, r2
 800063a:	426d      	negs	r5, r5
 800063c:	1b40      	subs	r0, r0, r5
 800063e:	4284      	cmp	r4, r0
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x1e0>
 8000642:	e1d5      	b.n	80009f0 <__aeabi_ddiv+0x58c>
 8000644:	4649      	mov	r1, r9
 8000646:	f7ff fdef 	bl	8000228 <__aeabi_uidivmod>
 800064a:	9a01      	ldr	r2, [sp, #4]
 800064c:	040b      	lsls	r3, r1, #16
 800064e:	4342      	muls	r2, r0
 8000650:	0c31      	lsrs	r1, r6, #16
 8000652:	0005      	movs	r5, r0
 8000654:	4319      	orrs	r1, r3
 8000656:	428a      	cmp	r2, r1
 8000658:	d900      	bls.n	800065c <__aeabi_ddiv+0x1f8>
 800065a:	e16c      	b.n	8000936 <__aeabi_ddiv+0x4d2>
 800065c:	1a88      	subs	r0, r1, r2
 800065e:	4649      	mov	r1, r9
 8000660:	f7ff fde2 	bl	8000228 <__aeabi_uidivmod>
 8000664:	9a01      	ldr	r2, [sp, #4]
 8000666:	0436      	lsls	r6, r6, #16
 8000668:	4342      	muls	r2, r0
 800066a:	0409      	lsls	r1, r1, #16
 800066c:	0c36      	lsrs	r6, r6, #16
 800066e:	0003      	movs	r3, r0
 8000670:	430e      	orrs	r6, r1
 8000672:	42b2      	cmp	r2, r6
 8000674:	d900      	bls.n	8000678 <__aeabi_ddiv+0x214>
 8000676:	e153      	b.n	8000920 <__aeabi_ddiv+0x4bc>
 8000678:	9803      	ldr	r0, [sp, #12]
 800067a:	1ab6      	subs	r6, r6, r2
 800067c:	0002      	movs	r2, r0
 800067e:	042d      	lsls	r5, r5, #16
 8000680:	431d      	orrs	r5, r3
 8000682:	9f02      	ldr	r7, [sp, #8]
 8000684:	042b      	lsls	r3, r5, #16
 8000686:	0c1b      	lsrs	r3, r3, #16
 8000688:	435a      	muls	r2, r3
 800068a:	437b      	muls	r3, r7
 800068c:	469c      	mov	ip, r3
 800068e:	0c29      	lsrs	r1, r5, #16
 8000690:	4348      	muls	r0, r1
 8000692:	0c13      	lsrs	r3, r2, #16
 8000694:	4484      	add	ip, r0
 8000696:	4463      	add	r3, ip
 8000698:	4379      	muls	r1, r7
 800069a:	4298      	cmp	r0, r3
 800069c:	d903      	bls.n	80006a6 <__aeabi_ddiv+0x242>
 800069e:	2080      	movs	r0, #128	; 0x80
 80006a0:	0240      	lsls	r0, r0, #9
 80006a2:	4684      	mov	ip, r0
 80006a4:	4461      	add	r1, ip
 80006a6:	0c18      	lsrs	r0, r3, #16
 80006a8:	0412      	lsls	r2, r2, #16
 80006aa:	041b      	lsls	r3, r3, #16
 80006ac:	0c12      	lsrs	r2, r2, #16
 80006ae:	1841      	adds	r1, r0, r1
 80006b0:	189b      	adds	r3, r3, r2
 80006b2:	428e      	cmp	r6, r1
 80006b4:	d200      	bcs.n	80006b8 <__aeabi_ddiv+0x254>
 80006b6:	e0ff      	b.n	80008b8 <__aeabi_ddiv+0x454>
 80006b8:	d100      	bne.n	80006bc <__aeabi_ddiv+0x258>
 80006ba:	e0fa      	b.n	80008b2 <__aeabi_ddiv+0x44e>
 80006bc:	2301      	movs	r3, #1
 80006be:	431d      	orrs	r5, r3
 80006c0:	4a49      	ldr	r2, [pc, #292]	; (80007e8 <__aeabi_ddiv+0x384>)
 80006c2:	445a      	add	r2, fp
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_ddiv+0x266>
 80006c8:	e0aa      	b.n	8000820 <__aeabi_ddiv+0x3bc>
 80006ca:	076b      	lsls	r3, r5, #29
 80006cc:	d000      	beq.n	80006d0 <__aeabi_ddiv+0x26c>
 80006ce:	e13d      	b.n	800094c <__aeabi_ddiv+0x4e8>
 80006d0:	08ed      	lsrs	r5, r5, #3
 80006d2:	4643      	mov	r3, r8
 80006d4:	01db      	lsls	r3, r3, #7
 80006d6:	d506      	bpl.n	80006e6 <__aeabi_ddiv+0x282>
 80006d8:	4642      	mov	r2, r8
 80006da:	4b44      	ldr	r3, [pc, #272]	; (80007ec <__aeabi_ddiv+0x388>)
 80006dc:	401a      	ands	r2, r3
 80006de:	4690      	mov	r8, r2
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	00d2      	lsls	r2, r2, #3
 80006e4:	445a      	add	r2, fp
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <__aeabi_ddiv+0x38c>)
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dd00      	ble.n	80006ee <__aeabi_ddiv+0x28a>
 80006ec:	e71f      	b.n	800052e <__aeabi_ddiv+0xca>
 80006ee:	4643      	mov	r3, r8
 80006f0:	075b      	lsls	r3, r3, #29
 80006f2:	431d      	orrs	r5, r3
 80006f4:	4643      	mov	r3, r8
 80006f6:	0552      	lsls	r2, r2, #21
 80006f8:	025c      	lsls	r4, r3, #9
 80006fa:	0b24      	lsrs	r4, r4, #12
 80006fc:	0d53      	lsrs	r3, r2, #21
 80006fe:	e708      	b.n	8000512 <__aeabi_ddiv+0xae>
 8000700:	4652      	mov	r2, sl
 8000702:	4322      	orrs	r2, r4
 8000704:	d100      	bne.n	8000708 <__aeabi_ddiv+0x2a4>
 8000706:	e07b      	b.n	8000800 <__aeabi_ddiv+0x39c>
 8000708:	2c00      	cmp	r4, #0
 800070a:	d100      	bne.n	800070e <__aeabi_ddiv+0x2aa>
 800070c:	e0fa      	b.n	8000904 <__aeabi_ddiv+0x4a0>
 800070e:	0020      	movs	r0, r4
 8000710:	f000 fcc2 	bl	8001098 <__clzsi2>
 8000714:	0002      	movs	r2, r0
 8000716:	3a0b      	subs	r2, #11
 8000718:	231d      	movs	r3, #29
 800071a:	0001      	movs	r1, r0
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	4652      	mov	r2, sl
 8000720:	3908      	subs	r1, #8
 8000722:	40da      	lsrs	r2, r3
 8000724:	408c      	lsls	r4, r1
 8000726:	4314      	orrs	r4, r2
 8000728:	4652      	mov	r2, sl
 800072a:	408a      	lsls	r2, r1
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <__aeabi_ddiv+0x390>)
 800072e:	4458      	add	r0, fp
 8000730:	469b      	mov	fp, r3
 8000732:	4483      	add	fp, r0
 8000734:	2000      	movs	r0, #0
 8000736:	e6d5      	b.n	80004e4 <__aeabi_ddiv+0x80>
 8000738:	464b      	mov	r3, r9
 800073a:	4323      	orrs	r3, r4
 800073c:	4698      	mov	r8, r3
 800073e:	d044      	beq.n	80007ca <__aeabi_ddiv+0x366>
 8000740:	2c00      	cmp	r4, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x2e2>
 8000744:	e0ce      	b.n	80008e4 <__aeabi_ddiv+0x480>
 8000746:	0020      	movs	r0, r4
 8000748:	f000 fca6 	bl	8001098 <__clzsi2>
 800074c:	0001      	movs	r1, r0
 800074e:	0002      	movs	r2, r0
 8000750:	390b      	subs	r1, #11
 8000752:	231d      	movs	r3, #29
 8000754:	1a5b      	subs	r3, r3, r1
 8000756:	4649      	mov	r1, r9
 8000758:	0010      	movs	r0, r2
 800075a:	40d9      	lsrs	r1, r3
 800075c:	3808      	subs	r0, #8
 800075e:	4084      	lsls	r4, r0
 8000760:	000b      	movs	r3, r1
 8000762:	464d      	mov	r5, r9
 8000764:	4323      	orrs	r3, r4
 8000766:	4698      	mov	r8, r3
 8000768:	4085      	lsls	r5, r0
 800076a:	4823      	ldr	r0, [pc, #140]	; (80007f8 <__aeabi_ddiv+0x394>)
 800076c:	1a83      	subs	r3, r0, r2
 800076e:	469b      	mov	fp, r3
 8000770:	2300      	movs	r3, #0
 8000772:	4699      	mov	r9, r3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	e69a      	b.n	80004ae <__aeabi_ddiv+0x4a>
 8000778:	464b      	mov	r3, r9
 800077a:	4323      	orrs	r3, r4
 800077c:	4698      	mov	r8, r3
 800077e:	d11d      	bne.n	80007bc <__aeabi_ddiv+0x358>
 8000780:	2308      	movs	r3, #8
 8000782:	4699      	mov	r9, r3
 8000784:	3b06      	subs	r3, #6
 8000786:	2500      	movs	r5, #0
 8000788:	4683      	mov	fp, r0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e68f      	b.n	80004ae <__aeabi_ddiv+0x4a>
 800078e:	4652      	mov	r2, sl
 8000790:	4322      	orrs	r2, r4
 8000792:	d109      	bne.n	80007a8 <__aeabi_ddiv+0x344>
 8000794:	2302      	movs	r3, #2
 8000796:	4649      	mov	r1, r9
 8000798:	4319      	orrs	r1, r3
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <__aeabi_ddiv+0x398>)
 800079c:	4689      	mov	r9, r1
 800079e:	469c      	mov	ip, r3
 80007a0:	2400      	movs	r4, #0
 80007a2:	2002      	movs	r0, #2
 80007a4:	44e3      	add	fp, ip
 80007a6:	e69d      	b.n	80004e4 <__aeabi_ddiv+0x80>
 80007a8:	2303      	movs	r3, #3
 80007aa:	464a      	mov	r2, r9
 80007ac:	431a      	orrs	r2, r3
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <__aeabi_ddiv+0x398>)
 80007b0:	4691      	mov	r9, r2
 80007b2:	469c      	mov	ip, r3
 80007b4:	4652      	mov	r2, sl
 80007b6:	2003      	movs	r0, #3
 80007b8:	44e3      	add	fp, ip
 80007ba:	e693      	b.n	80004e4 <__aeabi_ddiv+0x80>
 80007bc:	230c      	movs	r3, #12
 80007be:	4699      	mov	r9, r3
 80007c0:	3b09      	subs	r3, #9
 80007c2:	46a0      	mov	r8, r4
 80007c4:	4683      	mov	fp, r0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	e671      	b.n	80004ae <__aeabi_ddiv+0x4a>
 80007ca:	2304      	movs	r3, #4
 80007cc:	4699      	mov	r9, r3
 80007ce:	2300      	movs	r3, #0
 80007d0:	469b      	mov	fp, r3
 80007d2:	3301      	adds	r3, #1
 80007d4:	2500      	movs	r5, #0
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	e669      	b.n	80004ae <__aeabi_ddiv+0x4a>
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	000007ff 	.word	0x000007ff
 80007e0:	fffffc01 	.word	0xfffffc01
 80007e4:	08003fbc 	.word	0x08003fbc
 80007e8:	000003ff 	.word	0x000003ff
 80007ec:	feffffff 	.word	0xfeffffff
 80007f0:	000007fe 	.word	0x000007fe
 80007f4:	000003f3 	.word	0x000003f3
 80007f8:	fffffc0d 	.word	0xfffffc0d
 80007fc:	fffff801 	.word	0xfffff801
 8000800:	4649      	mov	r1, r9
 8000802:	2301      	movs	r3, #1
 8000804:	4319      	orrs	r1, r3
 8000806:	4689      	mov	r9, r1
 8000808:	2400      	movs	r4, #0
 800080a:	2001      	movs	r0, #1
 800080c:	e66a      	b.n	80004e4 <__aeabi_ddiv+0x80>
 800080e:	2300      	movs	r3, #0
 8000810:	2480      	movs	r4, #128	; 0x80
 8000812:	469a      	mov	sl, r3
 8000814:	2500      	movs	r5, #0
 8000816:	4b8a      	ldr	r3, [pc, #552]	; (8000a40 <__aeabi_ddiv+0x5dc>)
 8000818:	0324      	lsls	r4, r4, #12
 800081a:	e67a      	b.n	8000512 <__aeabi_ddiv+0xae>
 800081c:	2501      	movs	r5, #1
 800081e:	426d      	negs	r5, r5
 8000820:	2301      	movs	r3, #1
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	2b38      	cmp	r3, #56	; 0x38
 8000826:	dd00      	ble.n	800082a <__aeabi_ddiv+0x3c6>
 8000828:	e670      	b.n	800050c <__aeabi_ddiv+0xa8>
 800082a:	2b1f      	cmp	r3, #31
 800082c:	dc00      	bgt.n	8000830 <__aeabi_ddiv+0x3cc>
 800082e:	e0bf      	b.n	80009b0 <__aeabi_ddiv+0x54c>
 8000830:	211f      	movs	r1, #31
 8000832:	4249      	negs	r1, r1
 8000834:	1a8a      	subs	r2, r1, r2
 8000836:	4641      	mov	r1, r8
 8000838:	40d1      	lsrs	r1, r2
 800083a:	000a      	movs	r2, r1
 800083c:	2b20      	cmp	r3, #32
 800083e:	d004      	beq.n	800084a <__aeabi_ddiv+0x3e6>
 8000840:	4641      	mov	r1, r8
 8000842:	4b80      	ldr	r3, [pc, #512]	; (8000a44 <__aeabi_ddiv+0x5e0>)
 8000844:	445b      	add	r3, fp
 8000846:	4099      	lsls	r1, r3
 8000848:	430d      	orrs	r5, r1
 800084a:	1e6b      	subs	r3, r5, #1
 800084c:	419d      	sbcs	r5, r3
 800084e:	2307      	movs	r3, #7
 8000850:	432a      	orrs	r2, r5
 8000852:	001d      	movs	r5, r3
 8000854:	2400      	movs	r4, #0
 8000856:	4015      	ands	r5, r2
 8000858:	4213      	tst	r3, r2
 800085a:	d100      	bne.n	800085e <__aeabi_ddiv+0x3fa>
 800085c:	e0d4      	b.n	8000a08 <__aeabi_ddiv+0x5a4>
 800085e:	210f      	movs	r1, #15
 8000860:	2300      	movs	r3, #0
 8000862:	4011      	ands	r1, r2
 8000864:	2904      	cmp	r1, #4
 8000866:	d100      	bne.n	800086a <__aeabi_ddiv+0x406>
 8000868:	e0cb      	b.n	8000a02 <__aeabi_ddiv+0x59e>
 800086a:	1d11      	adds	r1, r2, #4
 800086c:	4291      	cmp	r1, r2
 800086e:	4192      	sbcs	r2, r2
 8000870:	4252      	negs	r2, r2
 8000872:	189b      	adds	r3, r3, r2
 8000874:	000a      	movs	r2, r1
 8000876:	0219      	lsls	r1, r3, #8
 8000878:	d400      	bmi.n	800087c <__aeabi_ddiv+0x418>
 800087a:	e0c2      	b.n	8000a02 <__aeabi_ddiv+0x59e>
 800087c:	2301      	movs	r3, #1
 800087e:	2400      	movs	r4, #0
 8000880:	2500      	movs	r5, #0
 8000882:	e646      	b.n	8000512 <__aeabi_ddiv+0xae>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	4641      	mov	r1, r8
 8000888:	031b      	lsls	r3, r3, #12
 800088a:	4219      	tst	r1, r3
 800088c:	d008      	beq.n	80008a0 <__aeabi_ddiv+0x43c>
 800088e:	421c      	tst	r4, r3
 8000890:	d106      	bne.n	80008a0 <__aeabi_ddiv+0x43c>
 8000892:	431c      	orrs	r4, r3
 8000894:	0324      	lsls	r4, r4, #12
 8000896:	46ba      	mov	sl, r7
 8000898:	0015      	movs	r5, r2
 800089a:	4b69      	ldr	r3, [pc, #420]	; (8000a40 <__aeabi_ddiv+0x5dc>)
 800089c:	0b24      	lsrs	r4, r4, #12
 800089e:	e638      	b.n	8000512 <__aeabi_ddiv+0xae>
 80008a0:	2480      	movs	r4, #128	; 0x80
 80008a2:	4643      	mov	r3, r8
 80008a4:	0324      	lsls	r4, r4, #12
 80008a6:	431c      	orrs	r4, r3
 80008a8:	0324      	lsls	r4, r4, #12
 80008aa:	46b2      	mov	sl, r6
 80008ac:	4b64      	ldr	r3, [pc, #400]	; (8000a40 <__aeabi_ddiv+0x5dc>)
 80008ae:	0b24      	lsrs	r4, r4, #12
 80008b0:	e62f      	b.n	8000512 <__aeabi_ddiv+0xae>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_ddiv+0x454>
 80008b6:	e703      	b.n	80006c0 <__aeabi_ddiv+0x25c>
 80008b8:	19a6      	adds	r6, r4, r6
 80008ba:	1e68      	subs	r0, r5, #1
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d200      	bcs.n	80008c2 <__aeabi_ddiv+0x45e>
 80008c0:	e08d      	b.n	80009de <__aeabi_ddiv+0x57a>
 80008c2:	428e      	cmp	r6, r1
 80008c4:	d200      	bcs.n	80008c8 <__aeabi_ddiv+0x464>
 80008c6:	e0a3      	b.n	8000a10 <__aeabi_ddiv+0x5ac>
 80008c8:	d100      	bne.n	80008cc <__aeabi_ddiv+0x468>
 80008ca:	e0b3      	b.n	8000a34 <__aeabi_ddiv+0x5d0>
 80008cc:	0005      	movs	r5, r0
 80008ce:	e6f5      	b.n	80006bc <__aeabi_ddiv+0x258>
 80008d0:	42aa      	cmp	r2, r5
 80008d2:	d900      	bls.n	80008d6 <__aeabi_ddiv+0x472>
 80008d4:	e639      	b.n	800054a <__aeabi_ddiv+0xe6>
 80008d6:	4643      	mov	r3, r8
 80008d8:	07de      	lsls	r6, r3, #31
 80008da:	0858      	lsrs	r0, r3, #1
 80008dc:	086b      	lsrs	r3, r5, #1
 80008de:	431e      	orrs	r6, r3
 80008e0:	07ed      	lsls	r5, r5, #31
 80008e2:	e639      	b.n	8000558 <__aeabi_ddiv+0xf4>
 80008e4:	4648      	mov	r0, r9
 80008e6:	f000 fbd7 	bl	8001098 <__clzsi2>
 80008ea:	0001      	movs	r1, r0
 80008ec:	0002      	movs	r2, r0
 80008ee:	3115      	adds	r1, #21
 80008f0:	3220      	adds	r2, #32
 80008f2:	291c      	cmp	r1, #28
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_ddiv+0x494>
 80008f6:	e72c      	b.n	8000752 <__aeabi_ddiv+0x2ee>
 80008f8:	464b      	mov	r3, r9
 80008fa:	3808      	subs	r0, #8
 80008fc:	4083      	lsls	r3, r0
 80008fe:	2500      	movs	r5, #0
 8000900:	4698      	mov	r8, r3
 8000902:	e732      	b.n	800076a <__aeabi_ddiv+0x306>
 8000904:	f000 fbc8 	bl	8001098 <__clzsi2>
 8000908:	0003      	movs	r3, r0
 800090a:	001a      	movs	r2, r3
 800090c:	3215      	adds	r2, #21
 800090e:	3020      	adds	r0, #32
 8000910:	2a1c      	cmp	r2, #28
 8000912:	dc00      	bgt.n	8000916 <__aeabi_ddiv+0x4b2>
 8000914:	e700      	b.n	8000718 <__aeabi_ddiv+0x2b4>
 8000916:	4654      	mov	r4, sl
 8000918:	3b08      	subs	r3, #8
 800091a:	2200      	movs	r2, #0
 800091c:	409c      	lsls	r4, r3
 800091e:	e705      	b.n	800072c <__aeabi_ddiv+0x2c8>
 8000920:	1936      	adds	r6, r6, r4
 8000922:	3b01      	subs	r3, #1
 8000924:	42b4      	cmp	r4, r6
 8000926:	d900      	bls.n	800092a <__aeabi_ddiv+0x4c6>
 8000928:	e6a6      	b.n	8000678 <__aeabi_ddiv+0x214>
 800092a:	42b2      	cmp	r2, r6
 800092c:	d800      	bhi.n	8000930 <__aeabi_ddiv+0x4cc>
 800092e:	e6a3      	b.n	8000678 <__aeabi_ddiv+0x214>
 8000930:	1e83      	subs	r3, r0, #2
 8000932:	1936      	adds	r6, r6, r4
 8000934:	e6a0      	b.n	8000678 <__aeabi_ddiv+0x214>
 8000936:	1909      	adds	r1, r1, r4
 8000938:	3d01      	subs	r5, #1
 800093a:	428c      	cmp	r4, r1
 800093c:	d900      	bls.n	8000940 <__aeabi_ddiv+0x4dc>
 800093e:	e68d      	b.n	800065c <__aeabi_ddiv+0x1f8>
 8000940:	428a      	cmp	r2, r1
 8000942:	d800      	bhi.n	8000946 <__aeabi_ddiv+0x4e2>
 8000944:	e68a      	b.n	800065c <__aeabi_ddiv+0x1f8>
 8000946:	1e85      	subs	r5, r0, #2
 8000948:	1909      	adds	r1, r1, r4
 800094a:	e687      	b.n	800065c <__aeabi_ddiv+0x1f8>
 800094c:	230f      	movs	r3, #15
 800094e:	402b      	ands	r3, r5
 8000950:	2b04      	cmp	r3, #4
 8000952:	d100      	bne.n	8000956 <__aeabi_ddiv+0x4f2>
 8000954:	e6bc      	b.n	80006d0 <__aeabi_ddiv+0x26c>
 8000956:	2305      	movs	r3, #5
 8000958:	425b      	negs	r3, r3
 800095a:	42ab      	cmp	r3, r5
 800095c:	419b      	sbcs	r3, r3
 800095e:	3504      	adds	r5, #4
 8000960:	425b      	negs	r3, r3
 8000962:	08ed      	lsrs	r5, r5, #3
 8000964:	4498      	add	r8, r3
 8000966:	e6b4      	b.n	80006d2 <__aeabi_ddiv+0x26e>
 8000968:	42af      	cmp	r7, r5
 800096a:	d900      	bls.n	800096e <__aeabi_ddiv+0x50a>
 800096c:	e660      	b.n	8000630 <__aeabi_ddiv+0x1cc>
 800096e:	4282      	cmp	r2, r0
 8000970:	d804      	bhi.n	800097c <__aeabi_ddiv+0x518>
 8000972:	d000      	beq.n	8000976 <__aeabi_ddiv+0x512>
 8000974:	e65c      	b.n	8000630 <__aeabi_ddiv+0x1cc>
 8000976:	42ae      	cmp	r6, r5
 8000978:	d800      	bhi.n	800097c <__aeabi_ddiv+0x518>
 800097a:	e659      	b.n	8000630 <__aeabi_ddiv+0x1cc>
 800097c:	2302      	movs	r3, #2
 800097e:	425b      	negs	r3, r3
 8000980:	469c      	mov	ip, r3
 8000982:	9b00      	ldr	r3, [sp, #0]
 8000984:	44e0      	add	r8, ip
 8000986:	469c      	mov	ip, r3
 8000988:	4465      	add	r5, ip
 800098a:	429d      	cmp	r5, r3
 800098c:	419b      	sbcs	r3, r3
 800098e:	425b      	negs	r3, r3
 8000990:	191b      	adds	r3, r3, r4
 8000992:	18c0      	adds	r0, r0, r3
 8000994:	e64d      	b.n	8000632 <__aeabi_ddiv+0x1ce>
 8000996:	428a      	cmp	r2, r1
 8000998:	d800      	bhi.n	800099c <__aeabi_ddiv+0x538>
 800099a:	e60e      	b.n	80005ba <__aeabi_ddiv+0x156>
 800099c:	1e83      	subs	r3, r0, #2
 800099e:	1909      	adds	r1, r1, r4
 80009a0:	e60b      	b.n	80005ba <__aeabi_ddiv+0x156>
 80009a2:	428a      	cmp	r2, r1
 80009a4:	d800      	bhi.n	80009a8 <__aeabi_ddiv+0x544>
 80009a6:	e5f4      	b.n	8000592 <__aeabi_ddiv+0x12e>
 80009a8:	1e83      	subs	r3, r0, #2
 80009aa:	4698      	mov	r8, r3
 80009ac:	1909      	adds	r1, r1, r4
 80009ae:	e5f0      	b.n	8000592 <__aeabi_ddiv+0x12e>
 80009b0:	4925      	ldr	r1, [pc, #148]	; (8000a48 <__aeabi_ddiv+0x5e4>)
 80009b2:	0028      	movs	r0, r5
 80009b4:	4459      	add	r1, fp
 80009b6:	408d      	lsls	r5, r1
 80009b8:	4642      	mov	r2, r8
 80009ba:	408a      	lsls	r2, r1
 80009bc:	1e69      	subs	r1, r5, #1
 80009be:	418d      	sbcs	r5, r1
 80009c0:	4641      	mov	r1, r8
 80009c2:	40d8      	lsrs	r0, r3
 80009c4:	40d9      	lsrs	r1, r3
 80009c6:	4302      	orrs	r2, r0
 80009c8:	432a      	orrs	r2, r5
 80009ca:	000b      	movs	r3, r1
 80009cc:	0751      	lsls	r1, r2, #29
 80009ce:	d100      	bne.n	80009d2 <__aeabi_ddiv+0x56e>
 80009d0:	e751      	b.n	8000876 <__aeabi_ddiv+0x412>
 80009d2:	210f      	movs	r1, #15
 80009d4:	4011      	ands	r1, r2
 80009d6:	2904      	cmp	r1, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_ddiv+0x578>
 80009da:	e746      	b.n	800086a <__aeabi_ddiv+0x406>
 80009dc:	e74b      	b.n	8000876 <__aeabi_ddiv+0x412>
 80009de:	0005      	movs	r5, r0
 80009e0:	428e      	cmp	r6, r1
 80009e2:	d000      	beq.n	80009e6 <__aeabi_ddiv+0x582>
 80009e4:	e66a      	b.n	80006bc <__aeabi_ddiv+0x258>
 80009e6:	9a00      	ldr	r2, [sp, #0]
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d000      	beq.n	80009ee <__aeabi_ddiv+0x58a>
 80009ec:	e666      	b.n	80006bc <__aeabi_ddiv+0x258>
 80009ee:	e667      	b.n	80006c0 <__aeabi_ddiv+0x25c>
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <__aeabi_ddiv+0x5e8>)
 80009f2:	445a      	add	r2, fp
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_ddiv+0x596>
 80009f8:	e710      	b.n	800081c <__aeabi_ddiv+0x3b8>
 80009fa:	2301      	movs	r3, #1
 80009fc:	2500      	movs	r5, #0
 80009fe:	4498      	add	r8, r3
 8000a00:	e667      	b.n	80006d2 <__aeabi_ddiv+0x26e>
 8000a02:	075d      	lsls	r5, r3, #29
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	0b1c      	lsrs	r4, r3, #12
 8000a08:	08d2      	lsrs	r2, r2, #3
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	4315      	orrs	r5, r2
 8000a0e:	e580      	b.n	8000512 <__aeabi_ddiv+0xae>
 8000a10:	9800      	ldr	r0, [sp, #0]
 8000a12:	3d02      	subs	r5, #2
 8000a14:	0042      	lsls	r2, r0, #1
 8000a16:	4282      	cmp	r2, r0
 8000a18:	41bf      	sbcs	r7, r7
 8000a1a:	427f      	negs	r7, r7
 8000a1c:	193c      	adds	r4, r7, r4
 8000a1e:	1936      	adds	r6, r6, r4
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	e7dd      	b.n	80009e0 <__aeabi_ddiv+0x57c>
 8000a24:	2480      	movs	r4, #128	; 0x80
 8000a26:	4643      	mov	r3, r8
 8000a28:	0324      	lsls	r4, r4, #12
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	0324      	lsls	r4, r4, #12
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__aeabi_ddiv+0x5dc>)
 8000a30:	0b24      	lsrs	r4, r4, #12
 8000a32:	e56e      	b.n	8000512 <__aeabi_ddiv+0xae>
 8000a34:	9a00      	ldr	r2, [sp, #0]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d3ea      	bcc.n	8000a10 <__aeabi_ddiv+0x5ac>
 8000a3a:	0005      	movs	r5, r0
 8000a3c:	e7d3      	b.n	80009e6 <__aeabi_ddiv+0x582>
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	000007ff 	.word	0x000007ff
 8000a44:	0000043e 	.word	0x0000043e
 8000a48:	0000041e 	.word	0x0000041e
 8000a4c:	000003ff 	.word	0x000003ff

08000a50 <__aeabi_dmul>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	4657      	mov	r7, sl
 8000a54:	464e      	mov	r6, r9
 8000a56:	4645      	mov	r5, r8
 8000a58:	46de      	mov	lr, fp
 8000a5a:	b5e0      	push	{r5, r6, r7, lr}
 8000a5c:	4698      	mov	r8, r3
 8000a5e:	030c      	lsls	r4, r1, #12
 8000a60:	004b      	lsls	r3, r1, #1
 8000a62:	0006      	movs	r6, r0
 8000a64:	4692      	mov	sl, r2
 8000a66:	b087      	sub	sp, #28
 8000a68:	0b24      	lsrs	r4, r4, #12
 8000a6a:	0d5b      	lsrs	r3, r3, #21
 8000a6c:	0fcf      	lsrs	r7, r1, #31
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dmul+0x24>
 8000a72:	e15c      	b.n	8000d2e <__aeabi_dmul+0x2de>
 8000a74:	4ad9      	ldr	r2, [pc, #868]	; (8000ddc <__aeabi_dmul+0x38c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dmul+0x2c>
 8000a7a:	e175      	b.n	8000d68 <__aeabi_dmul+0x318>
 8000a7c:	0f42      	lsrs	r2, r0, #29
 8000a7e:	00e4      	lsls	r4, r4, #3
 8000a80:	4314      	orrs	r4, r2
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	0412      	lsls	r2, r2, #16
 8000a86:	4314      	orrs	r4, r2
 8000a88:	4ad5      	ldr	r2, [pc, #852]	; (8000de0 <__aeabi_dmul+0x390>)
 8000a8a:	00c5      	lsls	r5, r0, #3
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	4463      	add	r3, ip
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2300      	movs	r3, #0
 8000a94:	4699      	mov	r9, r3
 8000a96:	469b      	mov	fp, r3
 8000a98:	4643      	mov	r3, r8
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	031e      	lsls	r6, r3, #12
 8000a9e:	0fd2      	lsrs	r2, r2, #31
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4650      	mov	r0, sl
 8000aa4:	4690      	mov	r8, r2
 8000aa6:	0b36      	lsrs	r6, r6, #12
 8000aa8:	0d5b      	lsrs	r3, r3, #21
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dmul+0x5e>
 8000aac:	e120      	b.n	8000cf0 <__aeabi_dmul+0x2a0>
 8000aae:	4acb      	ldr	r2, [pc, #812]	; (8000ddc <__aeabi_dmul+0x38c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dmul+0x66>
 8000ab4:	e162      	b.n	8000d7c <__aeabi_dmul+0x32c>
 8000ab6:	49ca      	ldr	r1, [pc, #808]	; (8000de0 <__aeabi_dmul+0x390>)
 8000ab8:	0f42      	lsrs	r2, r0, #29
 8000aba:	468c      	mov	ip, r1
 8000abc:	9900      	ldr	r1, [sp, #0]
 8000abe:	4463      	add	r3, ip
 8000ac0:	00f6      	lsls	r6, r6, #3
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4316      	orrs	r6, r2
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	449c      	add	ip, r3
 8000aca:	0412      	lsls	r2, r2, #16
 8000acc:	4663      	mov	r3, ip
 8000ace:	4316      	orrs	r6, r2
 8000ad0:	00c2      	lsls	r2, r0, #3
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	9900      	ldr	r1, [sp, #0]
 8000ad8:	4643      	mov	r3, r8
 8000ada:	3101      	adds	r1, #1
 8000adc:	468c      	mov	ip, r1
 8000ade:	4649      	mov	r1, r9
 8000ae0:	407b      	eors	r3, r7
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	290f      	cmp	r1, #15
 8000ae6:	d826      	bhi.n	8000b36 <__aeabi_dmul+0xe6>
 8000ae8:	4bbe      	ldr	r3, [pc, #760]	; (8000de4 <__aeabi_dmul+0x394>)
 8000aea:	0089      	lsls	r1, r1, #2
 8000aec:	5859      	ldr	r1, [r3, r1]
 8000aee:	468f      	mov	pc, r1
 8000af0:	4643      	mov	r3, r8
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	0034      	movs	r4, r6
 8000af6:	0015      	movs	r5, r2
 8000af8:	4683      	mov	fp, r0
 8000afa:	465b      	mov	r3, fp
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d016      	beq.n	8000b2e <__aeabi_dmul+0xde>
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dmul+0xb6>
 8000b04:	e203      	b.n	8000f0e <__aeabi_dmul+0x4be>
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d000      	beq.n	8000b0c <__aeabi_dmul+0xbc>
 8000b0a:	e0cd      	b.n	8000ca8 <__aeabi_dmul+0x258>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2400      	movs	r4, #0
 8000b10:	2500      	movs	r5, #0
 8000b12:	9b01      	ldr	r3, [sp, #4]
 8000b14:	0512      	lsls	r2, r2, #20
 8000b16:	4322      	orrs	r2, r4
 8000b18:	07db      	lsls	r3, r3, #31
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	0011      	movs	r1, r2
 8000b20:	b007      	add	sp, #28
 8000b22:	bcf0      	pop	{r4, r5, r6, r7}
 8000b24:	46bb      	mov	fp, r7
 8000b26:	46b2      	mov	sl, r6
 8000b28:	46a9      	mov	r9, r5
 8000b2a:	46a0      	mov	r8, r4
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	2400      	movs	r4, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	4aaa      	ldr	r2, [pc, #680]	; (8000ddc <__aeabi_dmul+0x38c>)
 8000b34:	e7ed      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000b36:	0c28      	lsrs	r0, r5, #16
 8000b38:	042d      	lsls	r5, r5, #16
 8000b3a:	0c2d      	lsrs	r5, r5, #16
 8000b3c:	002b      	movs	r3, r5
 8000b3e:	0c11      	lsrs	r1, r2, #16
 8000b40:	0412      	lsls	r2, r2, #16
 8000b42:	0c12      	lsrs	r2, r2, #16
 8000b44:	4353      	muls	r3, r2
 8000b46:	4698      	mov	r8, r3
 8000b48:	0013      	movs	r3, r2
 8000b4a:	002f      	movs	r7, r5
 8000b4c:	4343      	muls	r3, r0
 8000b4e:	4699      	mov	r9, r3
 8000b50:	434f      	muls	r7, r1
 8000b52:	444f      	add	r7, r9
 8000b54:	46bb      	mov	fp, r7
 8000b56:	4647      	mov	r7, r8
 8000b58:	000b      	movs	r3, r1
 8000b5a:	0c3f      	lsrs	r7, r7, #16
 8000b5c:	46ba      	mov	sl, r7
 8000b5e:	4343      	muls	r3, r0
 8000b60:	44da      	add	sl, fp
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	45d1      	cmp	r9, sl
 8000b66:	d904      	bls.n	8000b72 <__aeabi_dmul+0x122>
 8000b68:	2780      	movs	r7, #128	; 0x80
 8000b6a:	027f      	lsls	r7, r7, #9
 8000b6c:	46b9      	mov	r9, r7
 8000b6e:	444b      	add	r3, r9
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	4653      	mov	r3, sl
 8000b74:	0c1b      	lsrs	r3, r3, #16
 8000b76:	469b      	mov	fp, r3
 8000b78:	4653      	mov	r3, sl
 8000b7a:	041f      	lsls	r7, r3, #16
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	0c1b      	lsrs	r3, r3, #16
 8000b82:	4698      	mov	r8, r3
 8000b84:	003b      	movs	r3, r7
 8000b86:	4443      	add	r3, r8
 8000b88:	9304      	str	r3, [sp, #16]
 8000b8a:	0c33      	lsrs	r3, r6, #16
 8000b8c:	0436      	lsls	r6, r6, #16
 8000b8e:	0c36      	lsrs	r6, r6, #16
 8000b90:	4698      	mov	r8, r3
 8000b92:	0033      	movs	r3, r6
 8000b94:	4343      	muls	r3, r0
 8000b96:	4699      	mov	r9, r3
 8000b98:	4643      	mov	r3, r8
 8000b9a:	4343      	muls	r3, r0
 8000b9c:	002f      	movs	r7, r5
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	4643      	mov	r3, r8
 8000ba2:	4377      	muls	r7, r6
 8000ba4:	435d      	muls	r5, r3
 8000ba6:	0c38      	lsrs	r0, r7, #16
 8000ba8:	444d      	add	r5, r9
 8000baa:	1945      	adds	r5, r0, r5
 8000bac:	45a9      	cmp	r9, r5
 8000bae:	d903      	bls.n	8000bb8 <__aeabi_dmul+0x168>
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	025b      	lsls	r3, r3, #9
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	44ca      	add	sl, r9
 8000bb8:	043f      	lsls	r7, r7, #16
 8000bba:	0c28      	lsrs	r0, r5, #16
 8000bbc:	0c3f      	lsrs	r7, r7, #16
 8000bbe:	042d      	lsls	r5, r5, #16
 8000bc0:	19ed      	adds	r5, r5, r7
 8000bc2:	0c27      	lsrs	r7, r4, #16
 8000bc4:	0424      	lsls	r4, r4, #16
 8000bc6:	0c24      	lsrs	r4, r4, #16
 8000bc8:	0003      	movs	r3, r0
 8000bca:	0020      	movs	r0, r4
 8000bcc:	4350      	muls	r0, r2
 8000bce:	437a      	muls	r2, r7
 8000bd0:	4691      	mov	r9, r2
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	4453      	add	r3, sl
 8000bd6:	9305      	str	r3, [sp, #20]
 8000bd8:	0c03      	lsrs	r3, r0, #16
 8000bda:	469a      	mov	sl, r3
 8000bdc:	434a      	muls	r2, r1
 8000bde:	4361      	muls	r1, r4
 8000be0:	4449      	add	r1, r9
 8000be2:	4451      	add	r1, sl
 8000be4:	44ab      	add	fp, r5
 8000be6:	4589      	cmp	r9, r1
 8000be8:	d903      	bls.n	8000bf2 <__aeabi_dmul+0x1a2>
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	025b      	lsls	r3, r3, #9
 8000bee:	4699      	mov	r9, r3
 8000bf0:	444a      	add	r2, r9
 8000bf2:	0400      	lsls	r0, r0, #16
 8000bf4:	0c0b      	lsrs	r3, r1, #16
 8000bf6:	0c00      	lsrs	r0, r0, #16
 8000bf8:	0409      	lsls	r1, r1, #16
 8000bfa:	1809      	adds	r1, r1, r0
 8000bfc:	0020      	movs	r0, r4
 8000bfe:	4699      	mov	r9, r3
 8000c00:	4643      	mov	r3, r8
 8000c02:	4370      	muls	r0, r6
 8000c04:	435c      	muls	r4, r3
 8000c06:	437e      	muls	r6, r7
 8000c08:	435f      	muls	r7, r3
 8000c0a:	0c03      	lsrs	r3, r0, #16
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	19a4      	adds	r4, r4, r6
 8000c10:	4444      	add	r4, r8
 8000c12:	444a      	add	r2, r9
 8000c14:	9703      	str	r7, [sp, #12]
 8000c16:	42a6      	cmp	r6, r4
 8000c18:	d904      	bls.n	8000c24 <__aeabi_dmul+0x1d4>
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	025b      	lsls	r3, r3, #9
 8000c1e:	4698      	mov	r8, r3
 8000c20:	4447      	add	r7, r8
 8000c22:	9703      	str	r7, [sp, #12]
 8000c24:	0423      	lsls	r3, r4, #16
 8000c26:	9e02      	ldr	r6, [sp, #8]
 8000c28:	469a      	mov	sl, r3
 8000c2a:	9b05      	ldr	r3, [sp, #20]
 8000c2c:	445e      	add	r6, fp
 8000c2e:	4698      	mov	r8, r3
 8000c30:	42ae      	cmp	r6, r5
 8000c32:	41ad      	sbcs	r5, r5
 8000c34:	1876      	adds	r6, r6, r1
 8000c36:	428e      	cmp	r6, r1
 8000c38:	4189      	sbcs	r1, r1
 8000c3a:	0400      	lsls	r0, r0, #16
 8000c3c:	0c00      	lsrs	r0, r0, #16
 8000c3e:	4450      	add	r0, sl
 8000c40:	4440      	add	r0, r8
 8000c42:	426d      	negs	r5, r5
 8000c44:	1947      	adds	r7, r0, r5
 8000c46:	46b8      	mov	r8, r7
 8000c48:	4693      	mov	fp, r2
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	4689      	mov	r9, r1
 8000c4e:	44c3      	add	fp, r8
 8000c50:	44d9      	add	r9, fp
 8000c52:	4298      	cmp	r0, r3
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	45a8      	cmp	r8, r5
 8000c58:	41ad      	sbcs	r5, r5
 8000c5a:	4593      	cmp	fp, r2
 8000c5c:	4192      	sbcs	r2, r2
 8000c5e:	4589      	cmp	r9, r1
 8000c60:	4189      	sbcs	r1, r1
 8000c62:	426d      	negs	r5, r5
 8000c64:	4240      	negs	r0, r0
 8000c66:	4328      	orrs	r0, r5
 8000c68:	0c24      	lsrs	r4, r4, #16
 8000c6a:	4252      	negs	r2, r2
 8000c6c:	4249      	negs	r1, r1
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	9b03      	ldr	r3, [sp, #12]
 8000c72:	1900      	adds	r0, r0, r4
 8000c74:	1880      	adds	r0, r0, r2
 8000c76:	18c7      	adds	r7, r0, r3
 8000c78:	464b      	mov	r3, r9
 8000c7a:	0ddc      	lsrs	r4, r3, #23
 8000c7c:	9b04      	ldr	r3, [sp, #16]
 8000c7e:	0275      	lsls	r5, r6, #9
 8000c80:	431d      	orrs	r5, r3
 8000c82:	1e6a      	subs	r2, r5, #1
 8000c84:	4195      	sbcs	r5, r2
 8000c86:	464b      	mov	r3, r9
 8000c88:	0df6      	lsrs	r6, r6, #23
 8000c8a:	027f      	lsls	r7, r7, #9
 8000c8c:	4335      	orrs	r5, r6
 8000c8e:	025a      	lsls	r2, r3, #9
 8000c90:	433c      	orrs	r4, r7
 8000c92:	4315      	orrs	r5, r2
 8000c94:	01fb      	lsls	r3, r7, #7
 8000c96:	d400      	bmi.n	8000c9a <__aeabi_dmul+0x24a>
 8000c98:	e11c      	b.n	8000ed4 <__aeabi_dmul+0x484>
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	086a      	lsrs	r2, r5, #1
 8000c9e:	400d      	ands	r5, r1
 8000ca0:	4315      	orrs	r5, r2
 8000ca2:	07e2      	lsls	r2, r4, #31
 8000ca4:	4315      	orrs	r5, r2
 8000ca6:	0864      	lsrs	r4, r4, #1
 8000ca8:	494f      	ldr	r1, [pc, #316]	; (8000de8 <__aeabi_dmul+0x398>)
 8000caa:	4461      	add	r1, ip
 8000cac:	2900      	cmp	r1, #0
 8000cae:	dc00      	bgt.n	8000cb2 <__aeabi_dmul+0x262>
 8000cb0:	e0b0      	b.n	8000e14 <__aeabi_dmul+0x3c4>
 8000cb2:	076b      	lsls	r3, r5, #29
 8000cb4:	d009      	beq.n	8000cca <__aeabi_dmul+0x27a>
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	402a      	ands	r2, r5
 8000cba:	2a04      	cmp	r2, #4
 8000cbc:	d005      	beq.n	8000cca <__aeabi_dmul+0x27a>
 8000cbe:	1d2a      	adds	r2, r5, #4
 8000cc0:	42aa      	cmp	r2, r5
 8000cc2:	41ad      	sbcs	r5, r5
 8000cc4:	426d      	negs	r5, r5
 8000cc6:	1964      	adds	r4, r4, r5
 8000cc8:	0015      	movs	r5, r2
 8000cca:	01e3      	lsls	r3, r4, #7
 8000ccc:	d504      	bpl.n	8000cd8 <__aeabi_dmul+0x288>
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4a46      	ldr	r2, [pc, #280]	; (8000dec <__aeabi_dmul+0x39c>)
 8000cd2:	00c9      	lsls	r1, r1, #3
 8000cd4:	4014      	ands	r4, r2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	4a45      	ldr	r2, [pc, #276]	; (8000df0 <__aeabi_dmul+0x3a0>)
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	dd00      	ble.n	8000ce0 <__aeabi_dmul+0x290>
 8000cde:	e726      	b.n	8000b2e <__aeabi_dmul+0xde>
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	08ed      	lsrs	r5, r5, #3
 8000ce4:	0264      	lsls	r4, r4, #9
 8000ce6:	0549      	lsls	r1, r1, #21
 8000ce8:	4315      	orrs	r5, r2
 8000cea:	0b24      	lsrs	r4, r4, #12
 8000cec:	0d4a      	lsrs	r2, r1, #21
 8000cee:	e710      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000cf0:	4652      	mov	r2, sl
 8000cf2:	4332      	orrs	r2, r6
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dmul+0x2a8>
 8000cf6:	e07f      	b.n	8000df8 <__aeabi_dmul+0x3a8>
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dmul+0x2ae>
 8000cfc:	e0dc      	b.n	8000eb8 <__aeabi_dmul+0x468>
 8000cfe:	0030      	movs	r0, r6
 8000d00:	f000 f9ca 	bl	8001098 <__clzsi2>
 8000d04:	0002      	movs	r2, r0
 8000d06:	3a0b      	subs	r2, #11
 8000d08:	231d      	movs	r3, #29
 8000d0a:	0001      	movs	r1, r0
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	4652      	mov	r2, sl
 8000d10:	3908      	subs	r1, #8
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	408e      	lsls	r6, r1
 8000d16:	4316      	orrs	r6, r2
 8000d18:	4652      	mov	r2, sl
 8000d1a:	408a      	lsls	r2, r1
 8000d1c:	9b00      	ldr	r3, [sp, #0]
 8000d1e:	4935      	ldr	r1, [pc, #212]	; (8000df4 <__aeabi_dmul+0x3a4>)
 8000d20:	1a18      	subs	r0, r3, r0
 8000d22:	0003      	movs	r3, r0
 8000d24:	468c      	mov	ip, r1
 8000d26:	4463      	add	r3, ip
 8000d28:	2000      	movs	r0, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	e6d3      	b.n	8000ad6 <__aeabi_dmul+0x86>
 8000d2e:	0025      	movs	r5, r4
 8000d30:	4305      	orrs	r5, r0
 8000d32:	d04a      	beq.n	8000dca <__aeabi_dmul+0x37a>
 8000d34:	2c00      	cmp	r4, #0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dmul+0x2ea>
 8000d38:	e0b0      	b.n	8000e9c <__aeabi_dmul+0x44c>
 8000d3a:	0020      	movs	r0, r4
 8000d3c:	f000 f9ac 	bl	8001098 <__clzsi2>
 8000d40:	0001      	movs	r1, r0
 8000d42:	0002      	movs	r2, r0
 8000d44:	390b      	subs	r1, #11
 8000d46:	231d      	movs	r3, #29
 8000d48:	0010      	movs	r0, r2
 8000d4a:	1a5b      	subs	r3, r3, r1
 8000d4c:	0031      	movs	r1, r6
 8000d4e:	0035      	movs	r5, r6
 8000d50:	3808      	subs	r0, #8
 8000d52:	4084      	lsls	r4, r0
 8000d54:	40d9      	lsrs	r1, r3
 8000d56:	4085      	lsls	r5, r0
 8000d58:	430c      	orrs	r4, r1
 8000d5a:	4826      	ldr	r0, [pc, #152]	; (8000df4 <__aeabi_dmul+0x3a4>)
 8000d5c:	1a83      	subs	r3, r0, r2
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2300      	movs	r3, #0
 8000d62:	4699      	mov	r9, r3
 8000d64:	469b      	mov	fp, r3
 8000d66:	e697      	b.n	8000a98 <__aeabi_dmul+0x48>
 8000d68:	0005      	movs	r5, r0
 8000d6a:	4325      	orrs	r5, r4
 8000d6c:	d126      	bne.n	8000dbc <__aeabi_dmul+0x36c>
 8000d6e:	2208      	movs	r2, #8
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	2400      	movs	r4, #0
 8000d76:	4691      	mov	r9, r2
 8000d78:	469b      	mov	fp, r3
 8000d7a:	e68d      	b.n	8000a98 <__aeabi_dmul+0x48>
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	9b00      	ldr	r3, [sp, #0]
 8000d80:	4332      	orrs	r2, r6
 8000d82:	d110      	bne.n	8000da6 <__aeabi_dmul+0x356>
 8000d84:	4915      	ldr	r1, [pc, #84]	; (8000ddc <__aeabi_dmul+0x38c>)
 8000d86:	2600      	movs	r6, #0
 8000d88:	468c      	mov	ip, r1
 8000d8a:	4463      	add	r3, ip
 8000d8c:	4649      	mov	r1, r9
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2302      	movs	r3, #2
 8000d92:	4319      	orrs	r1, r3
 8000d94:	4689      	mov	r9, r1
 8000d96:	2002      	movs	r0, #2
 8000d98:	e69d      	b.n	8000ad6 <__aeabi_dmul+0x86>
 8000d9a:	465b      	mov	r3, fp
 8000d9c:	9701      	str	r7, [sp, #4]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d000      	beq.n	8000da4 <__aeabi_dmul+0x354>
 8000da2:	e6ad      	b.n	8000b00 <__aeabi_dmul+0xb0>
 8000da4:	e6c3      	b.n	8000b2e <__aeabi_dmul+0xde>
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <__aeabi_dmul+0x38c>)
 8000da8:	2003      	movs	r0, #3
 8000daa:	4694      	mov	ip, r2
 8000dac:	4463      	add	r3, ip
 8000dae:	464a      	mov	r2, r9
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2303      	movs	r3, #3
 8000db4:	431a      	orrs	r2, r3
 8000db6:	4691      	mov	r9, r2
 8000db8:	4652      	mov	r2, sl
 8000dba:	e68c      	b.n	8000ad6 <__aeabi_dmul+0x86>
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	0005      	movs	r5, r0
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	469b      	mov	fp, r3
 8000dc8:	e666      	b.n	8000a98 <__aeabi_dmul+0x48>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	4699      	mov	r9, r3
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	2400      	movs	r4, #0
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	e65e      	b.n	8000a98 <__aeabi_dmul+0x48>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	000007ff 	.word	0x000007ff
 8000de0:	fffffc01 	.word	0xfffffc01
 8000de4:	08003ffc 	.word	0x08003ffc
 8000de8:	000003ff 	.word	0x000003ff
 8000dec:	feffffff 	.word	0xfeffffff
 8000df0:	000007fe 	.word	0x000007fe
 8000df4:	fffffc0d 	.word	0xfffffc0d
 8000df8:	4649      	mov	r1, r9
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	4689      	mov	r9, r1
 8000e00:	2600      	movs	r6, #0
 8000e02:	2001      	movs	r0, #1
 8000e04:	e667      	b.n	8000ad6 <__aeabi_dmul+0x86>
 8000e06:	2300      	movs	r3, #0
 8000e08:	2480      	movs	r4, #128	; 0x80
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4a43      	ldr	r2, [pc, #268]	; (8000f1c <__aeabi_dmul+0x4cc>)
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	e67e      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000e14:	2001      	movs	r0, #1
 8000e16:	1a40      	subs	r0, r0, r1
 8000e18:	2838      	cmp	r0, #56	; 0x38
 8000e1a:	dd00      	ble.n	8000e1e <__aeabi_dmul+0x3ce>
 8000e1c:	e676      	b.n	8000b0c <__aeabi_dmul+0xbc>
 8000e1e:	281f      	cmp	r0, #31
 8000e20:	dd5b      	ble.n	8000eda <__aeabi_dmul+0x48a>
 8000e22:	221f      	movs	r2, #31
 8000e24:	0023      	movs	r3, r4
 8000e26:	4252      	negs	r2, r2
 8000e28:	1a51      	subs	r1, r2, r1
 8000e2a:	40cb      	lsrs	r3, r1
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	2820      	cmp	r0, #32
 8000e30:	d003      	beq.n	8000e3a <__aeabi_dmul+0x3ea>
 8000e32:	4a3b      	ldr	r2, [pc, #236]	; (8000f20 <__aeabi_dmul+0x4d0>)
 8000e34:	4462      	add	r2, ip
 8000e36:	4094      	lsls	r4, r2
 8000e38:	4325      	orrs	r5, r4
 8000e3a:	1e6a      	subs	r2, r5, #1
 8000e3c:	4195      	sbcs	r5, r2
 8000e3e:	002a      	movs	r2, r5
 8000e40:	430a      	orrs	r2, r1
 8000e42:	2107      	movs	r1, #7
 8000e44:	000d      	movs	r5, r1
 8000e46:	2400      	movs	r4, #0
 8000e48:	4015      	ands	r5, r2
 8000e4a:	4211      	tst	r1, r2
 8000e4c:	d05b      	beq.n	8000f06 <__aeabi_dmul+0x4b6>
 8000e4e:	210f      	movs	r1, #15
 8000e50:	2400      	movs	r4, #0
 8000e52:	4011      	ands	r1, r2
 8000e54:	2904      	cmp	r1, #4
 8000e56:	d053      	beq.n	8000f00 <__aeabi_dmul+0x4b0>
 8000e58:	1d11      	adds	r1, r2, #4
 8000e5a:	4291      	cmp	r1, r2
 8000e5c:	4192      	sbcs	r2, r2
 8000e5e:	4252      	negs	r2, r2
 8000e60:	18a4      	adds	r4, r4, r2
 8000e62:	000a      	movs	r2, r1
 8000e64:	0223      	lsls	r3, r4, #8
 8000e66:	d54b      	bpl.n	8000f00 <__aeabi_dmul+0x4b0>
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2400      	movs	r4, #0
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	e650      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	031b      	lsls	r3, r3, #12
 8000e74:	421c      	tst	r4, r3
 8000e76:	d009      	beq.n	8000e8c <__aeabi_dmul+0x43c>
 8000e78:	421e      	tst	r6, r3
 8000e7a:	d107      	bne.n	8000e8c <__aeabi_dmul+0x43c>
 8000e7c:	4333      	orrs	r3, r6
 8000e7e:	031c      	lsls	r4, r3, #12
 8000e80:	4643      	mov	r3, r8
 8000e82:	0015      	movs	r5, r2
 8000e84:	0b24      	lsrs	r4, r4, #12
 8000e86:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <__aeabi_dmul+0x4cc>)
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	e642      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0312      	lsls	r2, r2, #12
 8000e90:	4314      	orrs	r4, r2
 8000e92:	0324      	lsls	r4, r4, #12
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <__aeabi_dmul+0x4cc>)
 8000e96:	0b24      	lsrs	r4, r4, #12
 8000e98:	9701      	str	r7, [sp, #4]
 8000e9a:	e63a      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000e9c:	f000 f8fc 	bl	8001098 <__clzsi2>
 8000ea0:	0001      	movs	r1, r0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	3115      	adds	r1, #21
 8000ea6:	3220      	adds	r2, #32
 8000ea8:	291c      	cmp	r1, #28
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_dmul+0x45e>
 8000eac:	e74b      	b.n	8000d46 <__aeabi_dmul+0x2f6>
 8000eae:	0034      	movs	r4, r6
 8000eb0:	3808      	subs	r0, #8
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4084      	lsls	r4, r0
 8000eb6:	e750      	b.n	8000d5a <__aeabi_dmul+0x30a>
 8000eb8:	f000 f8ee 	bl	8001098 <__clzsi2>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	3215      	adds	r2, #21
 8000ec2:	3020      	adds	r0, #32
 8000ec4:	2a1c      	cmp	r2, #28
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_dmul+0x47a>
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_dmul+0x2b8>
 8000eca:	4656      	mov	r6, sl
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	409e      	lsls	r6, r3
 8000ed2:	e723      	b.n	8000d1c <__aeabi_dmul+0x2cc>
 8000ed4:	9b00      	ldr	r3, [sp, #0]
 8000ed6:	469c      	mov	ip, r3
 8000ed8:	e6e6      	b.n	8000ca8 <__aeabi_dmul+0x258>
 8000eda:	4912      	ldr	r1, [pc, #72]	; (8000f24 <__aeabi_dmul+0x4d4>)
 8000edc:	0022      	movs	r2, r4
 8000ede:	4461      	add	r1, ip
 8000ee0:	002e      	movs	r6, r5
 8000ee2:	408d      	lsls	r5, r1
 8000ee4:	408a      	lsls	r2, r1
 8000ee6:	40c6      	lsrs	r6, r0
 8000ee8:	1e69      	subs	r1, r5, #1
 8000eea:	418d      	sbcs	r5, r1
 8000eec:	4332      	orrs	r2, r6
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	40c4      	lsrs	r4, r0
 8000ef2:	0753      	lsls	r3, r2, #29
 8000ef4:	d0b6      	beq.n	8000e64 <__aeabi_dmul+0x414>
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	4011      	ands	r1, r2
 8000efa:	2904      	cmp	r1, #4
 8000efc:	d1ac      	bne.n	8000e58 <__aeabi_dmul+0x408>
 8000efe:	e7b1      	b.n	8000e64 <__aeabi_dmul+0x414>
 8000f00:	0765      	lsls	r5, r4, #29
 8000f02:	0264      	lsls	r4, r4, #9
 8000f04:	0b24      	lsrs	r4, r4, #12
 8000f06:	08d2      	lsrs	r2, r2, #3
 8000f08:	4315      	orrs	r5, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	e601      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	0312      	lsls	r2, r2, #12
 8000f12:	4314      	orrs	r4, r2
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	4a01      	ldr	r2, [pc, #4]	; (8000f1c <__aeabi_dmul+0x4cc>)
 8000f18:	0b24      	lsrs	r4, r4, #12
 8000f1a:	e5fa      	b.n	8000b12 <__aeabi_dmul+0xc2>
 8000f1c:	000007ff 	.word	0x000007ff
 8000f20:	0000043e 	.word	0x0000043e
 8000f24:	0000041e 	.word	0x0000041e

08000f28 <__aeabi_i2d>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d016      	beq.n	8000f5c <__aeabi_i2d+0x34>
 8000f2e:	17c3      	asrs	r3, r0, #31
 8000f30:	18c5      	adds	r5, r0, r3
 8000f32:	405d      	eors	r5, r3
 8000f34:	0fc4      	lsrs	r4, r0, #31
 8000f36:	0028      	movs	r0, r5
 8000f38:	f000 f8ae 	bl	8001098 <__clzsi2>
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <__aeabi_i2d+0x5c>)
 8000f3e:	1a12      	subs	r2, r2, r0
 8000f40:	280a      	cmp	r0, #10
 8000f42:	dc16      	bgt.n	8000f72 <__aeabi_i2d+0x4a>
 8000f44:	0003      	movs	r3, r0
 8000f46:	002e      	movs	r6, r5
 8000f48:	3315      	adds	r3, #21
 8000f4a:	409e      	lsls	r6, r3
 8000f4c:	230b      	movs	r3, #11
 8000f4e:	1a18      	subs	r0, r3, r0
 8000f50:	40c5      	lsrs	r5, r0
 8000f52:	0552      	lsls	r2, r2, #21
 8000f54:	032d      	lsls	r5, r5, #12
 8000f56:	0b2d      	lsrs	r5, r5, #12
 8000f58:	0d53      	lsrs	r3, r2, #21
 8000f5a:	e003      	b.n	8000f64 <__aeabi_i2d+0x3c>
 8000f5c:	2400      	movs	r4, #0
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2500      	movs	r5, #0
 8000f62:	2600      	movs	r6, #0
 8000f64:	051b      	lsls	r3, r3, #20
 8000f66:	432b      	orrs	r3, r5
 8000f68:	07e4      	lsls	r4, r4, #31
 8000f6a:	4323      	orrs	r3, r4
 8000f6c:	0030      	movs	r0, r6
 8000f6e:	0019      	movs	r1, r3
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	380b      	subs	r0, #11
 8000f74:	4085      	lsls	r5, r0
 8000f76:	0552      	lsls	r2, r2, #21
 8000f78:	032d      	lsls	r5, r5, #12
 8000f7a:	2600      	movs	r6, #0
 8000f7c:	0b2d      	lsrs	r5, r5, #12
 8000f7e:	0d53      	lsrs	r3, r2, #21
 8000f80:	e7f0      	b.n	8000f64 <__aeabi_i2d+0x3c>
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	0000041e 	.word	0x0000041e

08000f88 <__aeabi_d2f>:
 8000f88:	0002      	movs	r2, r0
 8000f8a:	004b      	lsls	r3, r1, #1
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	0d5b      	lsrs	r3, r3, #21
 8000f90:	030c      	lsls	r4, r1, #12
 8000f92:	4e3d      	ldr	r6, [pc, #244]	; (8001088 <__aeabi_d2f+0x100>)
 8000f94:	0a64      	lsrs	r4, r4, #9
 8000f96:	0f40      	lsrs	r0, r0, #29
 8000f98:	1c5f      	adds	r7, r3, #1
 8000f9a:	0fc9      	lsrs	r1, r1, #31
 8000f9c:	4304      	orrs	r4, r0
 8000f9e:	00d5      	lsls	r5, r2, #3
 8000fa0:	4237      	tst	r7, r6
 8000fa2:	d00a      	beq.n	8000fba <__aeabi_d2f+0x32>
 8000fa4:	4839      	ldr	r0, [pc, #228]	; (800108c <__aeabi_d2f+0x104>)
 8000fa6:	181e      	adds	r6, r3, r0
 8000fa8:	2efe      	cmp	r6, #254	; 0xfe
 8000faa:	dd16      	ble.n	8000fda <__aeabi_d2f+0x52>
 8000fac:	20ff      	movs	r0, #255	; 0xff
 8000fae:	2400      	movs	r4, #0
 8000fb0:	05c0      	lsls	r0, r0, #23
 8000fb2:	4320      	orrs	r0, r4
 8000fb4:	07c9      	lsls	r1, r1, #31
 8000fb6:	4308      	orrs	r0, r1
 8000fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d106      	bne.n	8000fcc <__aeabi_d2f+0x44>
 8000fbe:	432c      	orrs	r4, r5
 8000fc0:	d026      	beq.n	8001010 <__aeabi_d2f+0x88>
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	0192      	lsls	r2, r2, #6
 8000fc6:	0a54      	lsrs	r4, r2, #9
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	e7f1      	b.n	8000fb0 <__aeabi_d2f+0x28>
 8000fcc:	4325      	orrs	r5, r4
 8000fce:	d0ed      	beq.n	8000fac <__aeabi_d2f+0x24>
 8000fd0:	2080      	movs	r0, #128	; 0x80
 8000fd2:	03c0      	lsls	r0, r0, #15
 8000fd4:	4304      	orrs	r4, r0
 8000fd6:	20ff      	movs	r0, #255	; 0xff
 8000fd8:	e7ea      	b.n	8000fb0 <__aeabi_d2f+0x28>
 8000fda:	2e00      	cmp	r6, #0
 8000fdc:	dd1b      	ble.n	8001016 <__aeabi_d2f+0x8e>
 8000fde:	0192      	lsls	r2, r2, #6
 8000fe0:	1e53      	subs	r3, r2, #1
 8000fe2:	419a      	sbcs	r2, r3
 8000fe4:	00e4      	lsls	r4, r4, #3
 8000fe6:	0f6d      	lsrs	r5, r5, #29
 8000fe8:	4322      	orrs	r2, r4
 8000fea:	432a      	orrs	r2, r5
 8000fec:	0753      	lsls	r3, r2, #29
 8000fee:	d048      	beq.n	8001082 <__aeabi_d2f+0xfa>
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_d2f+0x72>
 8000ff8:	3204      	adds	r2, #4
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	04db      	lsls	r3, r3, #19
 8000ffe:	4013      	ands	r3, r2
 8001000:	d03f      	beq.n	8001082 <__aeabi_d2f+0xfa>
 8001002:	1c70      	adds	r0, r6, #1
 8001004:	2efe      	cmp	r6, #254	; 0xfe
 8001006:	d0d1      	beq.n	8000fac <__aeabi_d2f+0x24>
 8001008:	0192      	lsls	r2, r2, #6
 800100a:	0a54      	lsrs	r4, r2, #9
 800100c:	b2c0      	uxtb	r0, r0
 800100e:	e7cf      	b.n	8000fb0 <__aeabi_d2f+0x28>
 8001010:	2000      	movs	r0, #0
 8001012:	2400      	movs	r4, #0
 8001014:	e7cc      	b.n	8000fb0 <__aeabi_d2f+0x28>
 8001016:	0032      	movs	r2, r6
 8001018:	3217      	adds	r2, #23
 800101a:	db22      	blt.n	8001062 <__aeabi_d2f+0xda>
 800101c:	2080      	movs	r0, #128	; 0x80
 800101e:	0400      	lsls	r0, r0, #16
 8001020:	4320      	orrs	r0, r4
 8001022:	241e      	movs	r4, #30
 8001024:	1ba4      	subs	r4, r4, r6
 8001026:	2c1f      	cmp	r4, #31
 8001028:	dd1d      	ble.n	8001066 <__aeabi_d2f+0xde>
 800102a:	2202      	movs	r2, #2
 800102c:	4252      	negs	r2, r2
 800102e:	1b96      	subs	r6, r2, r6
 8001030:	0002      	movs	r2, r0
 8001032:	40f2      	lsrs	r2, r6
 8001034:	0016      	movs	r6, r2
 8001036:	2c20      	cmp	r4, #32
 8001038:	d004      	beq.n	8001044 <__aeabi_d2f+0xbc>
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <__aeabi_d2f+0x108>)
 800103c:	4694      	mov	ip, r2
 800103e:	4463      	add	r3, ip
 8001040:	4098      	lsls	r0, r3
 8001042:	4305      	orrs	r5, r0
 8001044:	002a      	movs	r2, r5
 8001046:	1e53      	subs	r3, r2, #1
 8001048:	419a      	sbcs	r2, r3
 800104a:	4332      	orrs	r2, r6
 800104c:	2600      	movs	r6, #0
 800104e:	0753      	lsls	r3, r2, #29
 8001050:	d1ce      	bne.n	8000ff0 <__aeabi_d2f+0x68>
 8001052:	2480      	movs	r4, #128	; 0x80
 8001054:	0013      	movs	r3, r2
 8001056:	04e4      	lsls	r4, r4, #19
 8001058:	2001      	movs	r0, #1
 800105a:	4023      	ands	r3, r4
 800105c:	4222      	tst	r2, r4
 800105e:	d1d3      	bne.n	8001008 <__aeabi_d2f+0x80>
 8001060:	e7b0      	b.n	8000fc4 <__aeabi_d2f+0x3c>
 8001062:	2300      	movs	r3, #0
 8001064:	e7ad      	b.n	8000fc2 <__aeabi_d2f+0x3a>
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <__aeabi_d2f+0x10c>)
 8001068:	4694      	mov	ip, r2
 800106a:	002a      	movs	r2, r5
 800106c:	40e2      	lsrs	r2, r4
 800106e:	0014      	movs	r4, r2
 8001070:	002a      	movs	r2, r5
 8001072:	4463      	add	r3, ip
 8001074:	409a      	lsls	r2, r3
 8001076:	4098      	lsls	r0, r3
 8001078:	1e55      	subs	r5, r2, #1
 800107a:	41aa      	sbcs	r2, r5
 800107c:	4302      	orrs	r2, r0
 800107e:	4322      	orrs	r2, r4
 8001080:	e7e4      	b.n	800104c <__aeabi_d2f+0xc4>
 8001082:	0033      	movs	r3, r6
 8001084:	e79e      	b.n	8000fc4 <__aeabi_d2f+0x3c>
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	000007fe 	.word	0x000007fe
 800108c:	fffffc80 	.word	0xfffffc80
 8001090:	fffffca2 	.word	0xfffffca2
 8001094:	fffffc82 	.word	0xfffffc82

08001098 <__clzsi2>:
 8001098:	211c      	movs	r1, #28
 800109a:	2301      	movs	r3, #1
 800109c:	041b      	lsls	r3, r3, #16
 800109e:	4298      	cmp	r0, r3
 80010a0:	d301      	bcc.n	80010a6 <__clzsi2+0xe>
 80010a2:	0c00      	lsrs	r0, r0, #16
 80010a4:	3910      	subs	r1, #16
 80010a6:	0a1b      	lsrs	r3, r3, #8
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d301      	bcc.n	80010b0 <__clzsi2+0x18>
 80010ac:	0a00      	lsrs	r0, r0, #8
 80010ae:	3908      	subs	r1, #8
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d301      	bcc.n	80010ba <__clzsi2+0x22>
 80010b6:	0900      	lsrs	r0, r0, #4
 80010b8:	3904      	subs	r1, #4
 80010ba:	a202      	add	r2, pc, #8	; (adr r2, 80010c4 <__clzsi2+0x2c>)
 80010bc:	5c10      	ldrb	r0, [r2, r0]
 80010be:	1840      	adds	r0, r0, r1
 80010c0:	4770      	bx	lr
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	02020304 	.word	0x02020304
 80010c8:	01010101 	.word	0x01010101
	...

080010d4 <Ecrire>:
#include "lcd.h"

void Ecrire(char f){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	0002      	movs	r2, r0
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	701a      	strb	r2, [r3, #0]

//mettre les sorties � 0
PORT_CHAR->ODR&=~(1<<DB4);
 80010e0:	23a0      	movs	r3, #160	; 0xa0
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	438a      	bics	r2, r1
 80010ee:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB5);
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	438a      	bics	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB6);
 8001100:	23a0      	movs	r3, #160	; 0xa0
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	23a0      	movs	r3, #160	; 0xa0
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	4922      	ldr	r1, [pc, #136]	; (8001194 <Ecrire+0xc0>)
 800110c:	400a      	ands	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
PORT_CHAR->ODR&=~(1<<DB7);
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	491f      	ldr	r1, [pc, #124]	; (8001198 <Ecrire+0xc4>)
 800111c:	400a      	ands	r2, r1
 800111e:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB7 � 1
if((f & 0b10000000)!=0) PORT_CHAR->ODR|=(1<<DB7);
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	da08      	bge.n	800113c <Ecrire+0x68>
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0089      	lsls	r1, r1, #2
 8001138:	430a      	orrs	r2, r1
 800113a:	615a      	str	r2, [r3, #20]

//si le bit 6 de f est � 1 mettre le bit DB6 � 1
if((f & 0b01000000)!=0) PORT_CHAR->ODR|=(1<<DB6);
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	4013      	ands	r3, r2
 8001144:	d008      	beq.n	8001158 <Ecrire+0x84>
 8001146:	23a0      	movs	r3, #160	; 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	23a0      	movs	r3, #160	; 0xa0
 800114e:	05db      	lsls	r3, r3, #23
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0049      	lsls	r1, r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	615a      	str	r2, [r3, #20]

//si le bit 5 de f est � 1 mettre le bit DB5 � 1
if((f & 0b00100000)!=0) PORT_CHAR->ODR|=(1<<DB5);
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2220      	movs	r2, #32
 800115e:	4013      	ands	r3, r2
 8001160:	d007      	beq.n	8001172 <Ecrire+0x9e>
 8001162:	23a0      	movs	r3, #160	; 0xa0
 8001164:	05db      	lsls	r3, r3, #23
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	23a0      	movs	r3, #160	; 0xa0
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	430a      	orrs	r2, r1
 8001170:	615a      	str	r2, [r3, #20]

//si le bit 7 de f est � 1 mettre le bit DB4 � 1
if((f & 0b00010000)!=0) PORT_CHAR->ODR|=(1<<DB4);
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2210      	movs	r2, #16
 8001178:	4013      	ands	r3, r2
 800117a:	d007      	beq.n	800118c <Ecrire+0xb8>
 800117c:	23a0      	movs	r3, #160	; 0xa0
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	695a      	ldr	r2, [r3, #20]
 8001182:	23a0      	movs	r3, #160	; 0xa0
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2140      	movs	r1, #64	; 0x40
 8001188:	430a      	orrs	r2, r1
 800118a:	615a      	str	r2, [r3, #20]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}
 8001194:	fffffeff 	.word	0xfffffeff
 8001198:	fffffdff 	.word	0xfffffdff

0800119c <toggle_e>:


void toggle_e(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	//mettre la pin E du LCD � 1
	Port_E->ODR|=(1<<E);
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <toggle_e+0x28>)
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <toggle_e+0x28>)
 80011a6:	2120      	movs	r1, #32
 80011a8:	430a      	orrs	r2, r1
 80011aa:	615a      	str	r2, [r3, #20]


	//attendre un peu
	  LL_mDelay(50);//delay=50us
 80011ac:	2032      	movs	r0, #50	; 0x32
 80011ae:	f001 fba5 	bl	80028fc <LL_mDelay>

	//mettre la pin E du LCD � 0
	Port_E->ODR&=~(1<<E);	//mettre E � 0
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <toggle_e+0x28>)
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <toggle_e+0x28>)
 80011b8:	2120      	movs	r1, #32
 80011ba:	438a      	bics	r2, r1
 80011bc:	615a      	str	r2, [r3, #20]

}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	50000400 	.word	0x50000400

080011c8 <D_set_E_Toggle>:
void D_set_E_Toggle (char f){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]


Ecrire(f);
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff7b 	bl	80010d4 <Ecrire>

toggle_e();
 80011de:	f7ff ffdd 	bl	800119c <toggle_e>

}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <EcrireFonction>:


void EcrireFonction(char f){
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	701a      	strb	r2, [r3, #0]
	char nibble_pfort;
	char nibble_pfaible;
	//mettre la pin RS du LCD � 0
	Port_RS->ODR&=~(1<<rs);
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <EcrireFonction+0x64>)
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <EcrireFonction+0x64>)
 80011fe:	2110      	movs	r1, #16
 8001200:	438a      	bics	r2, r1
 8001202:	615a      	str	r2, [r3, #20]

	//�crire le nibble de poids fort de f
	D_set_E_Toggle(f);
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ffdd 	bl	80011c8 <D_set_E_Toggle>

	//inverser le nibble de poids fort et le nibble de poids faible de f
	nibble_pfort=(f&0b11110000)>>4;
 800120e:	200f      	movs	r0, #15
 8001210:	183b      	adds	r3, r7, r0
 8001212:	1dfa      	adds	r2, r7, #7
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	0912      	lsrs	r2, r2, #4
 8001218:	701a      	strb	r2, [r3, #0]
	nibble_pfaible=f&0b00001111;
 800121a:	240e      	movs	r4, #14
 800121c:	193b      	adds	r3, r7, r4
 800121e:	1dfa      	adds	r2, r7, #7
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	210f      	movs	r1, #15
 8001224:	400a      	ands	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
	int swap=nibble_pfort|(nibble_pfaible<<4);
 8001228:	183b      	adds	r3, r7, r0
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	193b      	adds	r3, r7, r4
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4313      	orrs	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]

	//�crire le nibble
	D_set_E_Toggle(swap);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff ffc4 	bl	80011c8 <D_set_E_Toggle>

	//attendre un peu
	LL_mDelay(50);//delay=50us
 8001240:	2032      	movs	r0, #50	; 0x32
 8001242:	f001 fb5b 	bl	80028fc <LL_mDelay>

}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b005      	add	sp, #20
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	50000400 	.word	0x50000400

08001254 <EcrireCaractere>:


void EcrireCaractere(char c){
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	701a      	strb	r2, [r3, #0]
	//mettre la pin RS du LCD � 1
	 Port_RS->ODR|=(1<<rs);
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <EcrireCaractere+0x64>)
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <EcrireCaractere+0x64>)
 8001266:	2110      	movs	r1, #16
 8001268:	430a      	orrs	r2, r1
 800126a:	615a      	str	r2, [r3, #20]

    //�crire le nibble de poids fort de c
	 D_set_E_Toggle(c); //call D_set_E_Toggle
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff ffa9 	bl	80011c8 <D_set_E_Toggle>

    //inverser le nibble de poids fort et le nibble de poids faible de c
	char nibble_pfort=(c&0b11110000)>>4;
 8001276:	200f      	movs	r0, #15
 8001278:	183b      	adds	r3, r7, r0
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0912      	lsrs	r2, r2, #4
 8001280:	701a      	strb	r2, [r3, #0]
	char nibble_pfaible=c&0b00001111;
 8001282:	240e      	movs	r4, #14
 8001284:	193b      	adds	r3, r7, r4
 8001286:	1dfa      	adds	r2, r7, #7
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	210f      	movs	r1, #15
 800128c:	400a      	ands	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
	int swap=nibble_pfort|(nibble_pfaible<<4);
 8001290:	183b      	adds	r3, r7, r0
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	193b      	adds	r3, r7, r4
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4313      	orrs	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]

	//�crire le nibble
	 D_set_E_Toggle(swap);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff90 	bl	80011c8 <D_set_E_Toggle>

	 //attendre un peu
	  LL_mDelay(50); //delay=50us
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f001 fb27 	bl	80028fc <LL_mDelay>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b005      	add	sp, #20
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	50000400 	.word	0x50000400

080012bc <EcrireChaine>:

void EcrireChaine(char ch[]){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
int  i=0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
while(ch[i]!='\0') {EcrireCaractere (ch[i]); i++;}
 80012c8:	e009      	b.n	80012de <EcrireChaine+0x22>
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ffbe 	bl	8001254 <EcrireCaractere>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	18d3      	adds	r3, r2, r3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ef      	bne.n	80012ca <EcrireChaine+0xe>

}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <lcdinit4>:

void lcdinit4(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

	  LL_mDelay(1000000);//delay=1000ms
 80012f8:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <lcdinit4+0x140>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fafe 	bl	80028fc <LL_mDelay>

	//Activer les sorties du microcontr�leur
	PORT_CHAR->MODER&=~(0b11<<(2*DB4));
 8001300:	23a0      	movs	r3, #160	; 0xa0
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	494b      	ldr	r1, [pc, #300]	; (8001438 <lcdinit4+0x144>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB4));
 8001310:	23a0      	movs	r3, #160	; 0xa0
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	23a0      	movs	r3, #160	; 0xa0
 8001318:	05db      	lsls	r3, r3, #23
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	0149      	lsls	r1, r1, #5
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB5));
 8001322:	23a0      	movs	r3, #160	; 0xa0
 8001324:	05db      	lsls	r3, r3, #23
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	23a0      	movs	r3, #160	; 0xa0
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	4943      	ldr	r1, [pc, #268]	; (800143c <lcdinit4+0x148>)
 800132e:	400a      	ands	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB5));
 8001332:	23a0      	movs	r3, #160	; 0xa0
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	2180      	movs	r1, #128	; 0x80
 800133e:	01c9      	lsls	r1, r1, #7
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB6));
 8001344:	23a0      	movs	r3, #160	; 0xa0
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	493c      	ldr	r1, [pc, #240]	; (8001440 <lcdinit4+0x14c>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB6));
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	23a0      	movs	r3, #160	; 0xa0
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0249      	lsls	r1, r1, #9
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER&=~(0b11<<(2*DB7));
 8001366:	23a0      	movs	r3, #160	; 0xa0
 8001368:	05db      	lsls	r3, r3, #23
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	23a0      	movs	r3, #160	; 0xa0
 800136e:	05db      	lsls	r3, r3, #23
 8001370:	4934      	ldr	r1, [pc, #208]	; (8001444 <lcdinit4+0x150>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
	PORT_CHAR->MODER|=(0b01<<(2*DB7));
 8001376:	23a0      	movs	r3, #160	; 0xa0
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	23a0      	movs	r3, #160	; 0xa0
 800137e:	05db      	lsls	r3, r3, #23
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	02c9      	lsls	r1, r1, #11
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]


	Port_E->MODER&=~(0b11<<(2*E));
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <lcdinit4+0x154>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <lcdinit4+0x154>)
 800138e:	492f      	ldr	r1, [pc, #188]	; (800144c <lcdinit4+0x158>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
	Port_E->MODER|=(0b01<<(2*E));
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <lcdinit4+0x154>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <lcdinit4+0x154>)
 800139a:	2180      	movs	r1, #128	; 0x80
 800139c:	00c9      	lsls	r1, r1, #3
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

	Port_RS->MODER&=~(0b11<<(2*rs));
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <lcdinit4+0x154>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <lcdinit4+0x154>)
 80013a8:	4929      	ldr	r1, [pc, #164]	; (8001450 <lcdinit4+0x15c>)
 80013aa:	400a      	ands	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
	Port_RS->MODER|=(0b01<<(2*rs));
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <lcdinit4+0x154>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b25      	ldr	r3, [pc, #148]	; (8001448 <lcdinit4+0x154>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0049      	lsls	r1, r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

	  LL_mDelay(20000);//delay=20ms
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <lcdinit4+0x160>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f001 fa9c 	bl	80028fc <LL_mDelay>

     Ecrire(0x30);
 80013c4:	2030      	movs	r0, #48	; 0x30
 80013c6:	f7ff fe85 	bl	80010d4 <Ecrire>
     toggle_e();
 80013ca:	f7ff fee7 	bl	800119c <toggle_e>
     LL_mDelay(5000);//delay=5ms
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <lcdinit4+0x164>)
 80013d0:	0018      	movs	r0, r3
 80013d2:	f001 fa93 	bl	80028fc <LL_mDelay>

	Ecrire(0x30);
 80013d6:	2030      	movs	r0, #48	; 0x30
 80013d8:	f7ff fe7c 	bl	80010d4 <Ecrire>
     toggle_e();
 80013dc:	f7ff fede 	bl	800119c <toggle_e>
     LL_mDelay(200);//delay=200us
 80013e0:	20c8      	movs	r0, #200	; 0xc8
 80013e2:	f001 fa8b 	bl	80028fc <LL_mDelay>

     Ecrire(0x30);
 80013e6:	2030      	movs	r0, #48	; 0x30
 80013e8:	f7ff fe74 	bl	80010d4 <Ecrire>
     toggle_e();
 80013ec:	f7ff fed6 	bl	800119c <toggle_e>
     LL_mDelay(200);//delay=200us
 80013f0:	20c8      	movs	r0, #200	; 0xc8
 80013f2:	f001 fa83 	bl	80028fc <LL_mDelay>

	Ecrire(0x20);
 80013f6:	2020      	movs	r0, #32
 80013f8:	f7ff fe6c 	bl	80010d4 <Ecrire>
     toggle_e();
 80013fc:	f7ff fece 	bl	800119c <toggle_e>
     LL_mDelay(200);//delay=200us
 8001400:	20c8      	movs	r0, #200	; 0xc8
 8001402:	f001 fa7b 	bl	80028fc <LL_mDelay>



//SET FUNCTION: choix du mode de fonctionnement
EcrireFonction(0x28);
 8001406:	2028      	movs	r0, #40	; 0x28
 8001408:	f7ff fef0 	bl	80011ec <EcrireFonction>

//DISPLAY OFF
EcrireFonction(0x8);
 800140c:	2008      	movs	r0, #8
 800140e:	f7ff feed 	bl	80011ec <EcrireFonction>

//DISPLAY CLEAR
EcrireFonction(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff feea 	bl	80011ec <EcrireFonction>
LL_mDelay(1600);//delay=1.6ms
 8001418:	23c8      	movs	r3, #200	; 0xc8
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	0018      	movs	r0, r3
 800141e:	f001 fa6d 	bl	80028fc <LL_mDelay>


//ENTRY MODE SET
EcrireFonction(0x6);
 8001422:	2006      	movs	r0, #6
 8001424:	f7ff fee2 	bl	80011ec <EcrireFonction>

//DISPLAY ON

EcrireFonction(0xC);
 8001428:	200c      	movs	r0, #12
 800142a:	f7ff fedf 	bl	80011ec <EcrireFonction>


}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	000f4240 	.word	0x000f4240
 8001438:	ffffcfff 	.word	0xffffcfff
 800143c:	ffff3fff 	.word	0xffff3fff
 8001440:	fffcffff 	.word	0xfffcffff
 8001444:	fff3ffff 	.word	0xfff3ffff
 8001448:	50000400 	.word	0x50000400
 800144c:	fffff3ff 	.word	0xfffff3ff
 8001450:	fffffcff 	.word	0xfffffcff
 8001454:	00004e20 	.word	0x00004e20
 8001458:	00001388 	.word	0x00001388

0800145c <Affichage_LCD>:

void Affichage_LCD(char * ligne1, char *ligne2){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]

	/* effacer l'affichage */
	// LCD <- 01, display clear
	EcrireFonction(0x80);
 8001466:	2080      	movs	r0, #128	; 0x80
 8001468:	f7ff fec0 	bl	80011ec <EcrireFonction>
	EcrireFonction(1);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff febd 	bl	80011ec <EcrireFonction>
	LL_mDelay(1600);//delay=1.6ms
 8001472:	23c8      	movs	r3, #200	; 0xc8
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	0018      	movs	r0, r3
 8001478:	f001 fa40 	bl	80028fc <LL_mDelay>

	/**ecriture sur la premiere ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS */
	EcrireFonction(0x80);
 800147c:	2080      	movs	r0, #128	; 0x80
 800147e:	f7ff feb5 	bl	80011ec <EcrireFonction>
	EcrireChaine(ligne1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff19 	bl	80012bc <EcrireChaine>

	/**ecriture sur la deuxieme ligne**/
	/*positionner le curseur avec la fonction SET DD RAM ADDRESS*/
    EcrireFonction(0xC0);
 800148a:	20c0      	movs	r0, #192	; 0xc0
 800148c:	f7ff feae 	bl	80011ec <EcrireFonction>
	EcrireChaine(ligne2);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff ff12 	bl	80012bc <EcrireChaine>
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <LL_RCC_MSI_Enable+0x18>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <LL_RCC_MSI_Enable+0x18>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	0049      	lsls	r1, r1, #1
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000

080014bc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <LL_RCC_MSI_IsReady+0x24>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	401a      	ands	r2, r3
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d101      	bne.n	80014d6 <LL_RCC_MSI_IsReady+0x1a>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_RCC_MSI_IsReady+0x1c>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40021000 	.word	0x40021000

080014e4 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <LL_RCC_MSI_SetRange+0x24>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <LL_RCC_MSI_SetRange+0x28>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <LL_RCC_MSI_SetRange+0x24>)
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	ffff1fff 	.word	0xffff1fff

08001510 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	0a19      	lsrs	r1, r3, #8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	061a      	lsls	r2, r3, #24
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <LL_RCC_MSI_SetCalibTrimming+0x24>)
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <LL_RCC_SetSysClkSource+0x24>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2203      	movs	r2, #3
 8001546:	4393      	bics	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <LL_RCC_SetSysClkSource+0x24>)
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	430a      	orrs	r2, r1
 8001550:	60da      	str	r2, [r3, #12]
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40021000 	.word	0x40021000

08001560 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <LL_RCC_GetSysClkSource+0x14>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	220c      	movs	r2, #12
 800156a:	4013      	ands	r3, r2
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40021000 	.word	0x40021000

08001578 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <LL_RCC_SetAHBPrescaler+0x24>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	22f0      	movs	r2, #240	; 0xf0
 8001586:	4393      	bics	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <LL_RCC_SetAHBPrescaler+0x24>)
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	430a      	orrs	r2, r1
 8001590:	60da      	str	r2, [r3, #12]
}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40021000 	.word	0x40021000

080015a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40021000 	.word	0x40021000
 80015c8:	fffff8ff 	.word	0xfffff8ff

080015cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <LL_RCC_SetAPB2Prescaler+0x28>)
 80015da:	4013      	ands	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	60da      	str	r2, [r3, #12]
}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b002      	add	sp, #8
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	40021000 	.word	0x40021000
 80015f4:	ffffc7ff 	.word	0xffffc7ff

080015f8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	0c12      	lsrs	r2, r2, #16
 8001608:	43d2      	mvns	r2, r2
 800160a:	401a      	ands	r2, r3
 800160c:	0011      	movs	r1, r2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c1a      	lsrs	r2, r3, #16
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001616:	430a      	orrs	r2, r1
 8001618:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40021000 	.word	0x40021000

08001628 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <LL_APB1_GRP1_EnableClock+0x28>)
 8001632:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <LL_APB1_GRP1_EnableClock+0x28>)
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	430a      	orrs	r2, r1
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <LL_APB1_GRP1_EnableClock+0x28>)
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4013      	ands	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	b004      	add	sp, #16
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <LL_APB2_GRP1_EnableClock+0x28>)
 800165e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <LL_APB2_GRP1_EnableClock+0x28>)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	430a      	orrs	r2, r1
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <LL_APB2_GRP1_EnableClock+0x28>)
 800166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000

08001680 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <LL_IOP_GRP1_EnableClock+0x28>)
 800168a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <LL_IOP_GRP1_EnableClock+0x28>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	430a      	orrs	r2, r1
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <LL_IOP_GRP1_EnableClock+0x28>)
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4013      	ands	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <LL_SYSCFG_SetEXTISource+0x48>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	21ff      	movs	r1, #255	; 0xff
 80016bc:	400b      	ands	r3, r1
 80016be:	3302      	adds	r3, #2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	589b      	ldr	r3, [r3, r2]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	0c12      	lsrs	r2, r2, #16
 80016c8:	210f      	movs	r1, #15
 80016ca:	4091      	lsls	r1, r2
 80016cc:	000a      	movs	r2, r1
 80016ce:	43d2      	mvns	r2, r2
 80016d0:	401a      	ands	r2, r3
 80016d2:	0011      	movs	r1, r2
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	409a      	lsls	r2, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <LL_SYSCFG_SetEXTISource+0x48>)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	24ff      	movs	r4, #255	; 0xff
 80016e2:	4023      	ands	r3, r4
 80016e4:	430a      	orrs	r2, r1
 80016e6:	3302      	adds	r3, #2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	501a      	str	r2, [r3, r0]
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b003      	add	sp, #12
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	40010000 	.word	0x40010000

080016f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <LL_FLASH_SetLatency+0x24>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4393      	bics	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <LL_FLASH_SetLatency+0x24>)
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40022000 	.word	0x40022000

08001720 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <LL_FLASH_GetLatency+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40022000 	.word	0x40022000

08001738 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40007000 	.word	0x40007000
 8001760:	ffffe7ff 	.word	0xffffe7ff

08001764 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <LL_USART_ConfigAsyncMode+0x2c>)
 800178e:	401a      	ands	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	222a      	movs	r2, #42	; 0x2a
 800179a:	4393      	bics	r3, r2
 800179c:	001a      	movs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	ffffb7ff 	.word	0xffffb7ff

080017b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	435b      	muls	r3, r3
 80017c4:	001a      	movs	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	189b      	adds	r3, r3, r2
 80017cc:	43db      	mvns	r3, r3
 80017ce:	400b      	ands	r3, r1
 80017d0:	001a      	movs	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	435b      	muls	r3, r3
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	434b      	muls	r3, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b004      	add	sp, #16
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	435b      	muls	r3, r3
 80017fc:	001a      	movs	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	189b      	adds	r3, r3, r2
 8001804:	43db      	mvns	r3, r3
 8001806:	400b      	ands	r3, r1
 8001808:	001a      	movs	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	435b      	muls	r3, r3
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	434b      	muls	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	60da      	str	r2, [r3, #12]
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b004      	add	sp, #16
 800181e:	bd80      	pop	{r7, pc}

08001820 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}

08001838 <ADC_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_init(ADC_TypeDef* adc, uint8_t resolution, uint8_t channel)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	0008      	movs	r0, r1
 8001842:	0011      	movs	r1, r2
 8001844:	1cfb      	adds	r3, r7, #3
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	1cbb      	adds	r3, r7, #2
 800184c:	1c0a      	adds	r2, r1, #0
 800184e:	701a      	strb	r2, [r3, #0]
	//Slide 24
	RCC->APB2ENR |= (1<<9);
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <ADC_init+0xb4>)
 8001852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <ADC_init+0xb4>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0089      	lsls	r1, r1, #2
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
	//Slide 26
	adc->CFGR2 |= (0b11<<ADC_CFGR2_CKMODE_Pos);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	22c0      	movs	r2, #192	; 0xc0
 8001864:	0612      	lsls	r2, r2, #24
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
	//Slide 27
	if((adc->CR & ADC_CR_ADEN) != 0)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	d006      	beq.n	8001884 <ADC_init+0x4c>
	{
		adc->CR &= ~(uint32_t)ADC_CR_ADEN;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2201      	movs	r2, #1
 800187c:	4393      	bics	r3, r2
 800187e:	001a      	movs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
	}
	adc->CR |= ADC_CR_ADCAL;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0612      	lsls	r2, r2, #24
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
	while ((adc->CR & ADC_CR_ADCAL) != 0);
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	dbfb      	blt.n	8001894 <ADC_init+0x5c>
	//Slide 28
	adc->CFGR1 |= (1<<13);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	0192      	lsls	r2, r2, #6
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60da      	str	r2, [r3, #12]
	//Slide 29
	adc->CFGR1 |= (0b10<<3);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2210      	movs	r2, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60da      	str	r2, [r3, #12]
	//Slide 30
	adc->CHSELR |= (1<<channel);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	1cba      	adds	r2, r7, #2
 80018bc:	7812      	ldrb	r2, [r2, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
	//Slide 31
    adc->CR |= (1<<0);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2201      	movs	r2, #1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]
	//Slide 32
	adc->CR |= (1<<2);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2204      	movs	r2, #4
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	609a      	str	r2, [r3, #8]
}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b002      	add	sp, #8
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	40021000 	.word	0x40021000

080018f0 <randomDistance>:
/* USER CODE END 0 */
float convertToCentimeters(float voltage) {
    return 27.86 / voltage - 0.42;
}

int randomDistance(const int upper, const int lower) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	srand(time(NULL));
 80018fa:	2000      	movs	r0, #0
 80018fc:	f001 f908 	bl	8002b10 <time>
 8001900:	0002      	movs	r2, r0
 8001902:	000b      	movs	r3, r1
 8001904:	0013      	movs	r3, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f001 f874 	bl	80029f4 <srand>
	return (rand() % (upper - lower + 1)) + lower;
 800190c:	f001 f8a2 	bl	8002a54 <rand>
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	3301      	adds	r3, #1
 8001918:	0019      	movs	r1, r3
 800191a:	f7fe fd6f 	bl	80003fc <__aeabi_idivmod>
 800191e:	000b      	movs	r3, r1
 8001920:	001a      	movs	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	18d3      	adds	r3, r2, r3
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001936:	2001      	movs	r0, #1
 8001938:	f7ff fe8c 	bl	8001654 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff fe71 	bl	8001628 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN Init */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001946:	2001      	movs	r0, #1
 8001948:	f7ff fe84 	bl	8001654 <LL_APB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	055b      	lsls	r3, r3, #21
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fe69 	bl	8001628 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001956:	f000 f885 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195a:	f000 f93d 	bl	8001bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800195e:	f000 f8c3 	bl	8001ae8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC_init(ADC1, 8, 0);
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <main+0x108>)
 8001964:	2200      	movs	r2, #0
 8001966:	2108      	movs	r1, #8
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ff65 	bl	8001838 <ADC_init>
  /* USER CODE END 2 */

  RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN;
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <main+0x10c>)
 8001970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <main+0x10c>)
 8001974:	2103      	movs	r1, #3
 8001976:	430a      	orrs	r2, r1
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
  LL_Init1msTick(16000);
 800197a:	23fa      	movs	r3, #250	; 0xfa
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	0018      	movs	r0, r3
 8001980:	f000 ffac 	bl	80028dc <LL_Init1msTick>
  lcdinit4();
 8001984:	f7ff fcb6 	bl	80012f4 <lcdinit4>
  char Text_LCD1[20] ="111";
 8001988:	2314      	movs	r3, #20
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <main+0x110>)
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	2210      	movs	r2, #16
 8001994:	2100      	movs	r1, #0
 8001996:	0018      	movs	r0, r3
 8001998:	f001 f80a 	bl	80029b0 <memset>
  char Text_LCD2[20] = "Hello World!!";
 800199c:	0039      	movs	r1, r7
 800199e:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <main+0x114>)
 80019a0:	000b      	movs	r3, r1
 80019a2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80019a4:	c331      	stmia	r3!, {r0, r4, r5}
 80019a6:	8812      	ldrh	r2, [r2, #0]
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	230e      	movs	r3, #14
 80019ac:	18cb      	adds	r3, r1, r3
 80019ae:	2206      	movs	r2, #6
 80019b0:	2100      	movs	r1, #0
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 fffc 	bl	80029b0 <memset>

  while (1)
  {
    /* USER CODE END WHILE */

		while((ADC1->ISR& ADC_ISR_EOC)==0);
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <main+0x108>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0fa      	beq.n	80019ba <main+0x8a>
		val = randomDistance(60, 10);
 80019c4:	210a      	movs	r1, #10
 80019c6:	203c      	movs	r0, #60	; 0x3c
 80019c8:	f7ff ff92 	bl	80018f0 <randomDistance>
 80019cc:	0002      	movs	r2, r0
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <main+0x118>)
 80019d0:	601a      	str	r2, [r3, #0]
		printf("\rValeur numerique=%d\n", val);
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <main+0x118>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <main+0x11c>)
 80019d8:	0011      	movs	r1, r2
 80019da:	0018      	movs	r0, r3
 80019dc:	f000 fff0 	bl	80029c0 <iprintf>
		sprintf(Text_LCD1, "%d", val);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <main+0x118>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	491a      	ldr	r1, [pc, #104]	; (8001a50 <main+0x120>)
 80019e6:	2414      	movs	r4, #20
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	0018      	movs	r0, r3
 80019ec:	f001 f870 	bl	8002ad0 <siprintf>
		Affichage_LCD(Text_LCD1, Text_LCD2);
 80019f0:	003a      	movs	r2, r7
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff fd30 	bl	800145c <Affichage_LCD>
		val_volt = (val*3.3)/255;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <main+0x118>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fa91 	bl	8000f28 <__aeabi_i2d>
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <main+0x124>)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <main+0x128>)
 8001a0a:	f7ff f821 	bl	8000a50 <__aeabi_dmul>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	0010      	movs	r0, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	2200      	movs	r2, #0
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <main+0x12c>)
 8001a1a:	f7fe fd23 	bl	8000464 <__aeabi_ddiv>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	000b      	movs	r3, r1
 8001a22:	0010      	movs	r0, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	f7ff faaf 	bl	8000f88 <__aeabi_d2f>
 8001a2a:	1c02      	adds	r2, r0, #0
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <main+0x130>)
 8001a2e:	601a      	str	r2, [r3, #0]
	  	LL_mDelay(200);
 8001a30:	20c8      	movs	r0, #200	; 0xc8
 8001a32:	f000 ff63 	bl	80028fc <LL_mDelay>
  {
 8001a36:	e7bf      	b.n	80019b8 <main+0x88>
 8001a38:	40012400 	.word	0x40012400
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00313131 	.word	0x00313131
 8001a44:	08003fa8 	.word	0x08003fa8
 8001a48:	20000084 	.word	0x20000084
 8001a4c:	08003f8c 	.word	0x08003f8c
 8001a50:	08003fa4 	.word	0x08003fa4
 8001a54:	66666666 	.word	0x66666666
 8001a58:	400a6666 	.word	0x400a6666
 8001a5c:	406fe000 	.word	0x406fe000
 8001a60:	20000088 	.word	0x20000088

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fe45 	bl	80016f8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	f7ff fe56 	bl	8001720 <LL_FLASH_GetLatency>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d1fb      	bne.n	8001a70 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fe5b 	bl	8001738 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8001a82:	f7ff fd0d 	bl	80014a0 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	f7ff fd18 	bl	80014bc <LL_RCC_MSI_IsReady>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d1fa      	bne.n	8001a88 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_5);
 8001a92:	23a0      	movs	r3, #160	; 0xa0
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff fd24 	bl	80014e4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fd37 	bl	8001510 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fd68 	bl	8001578 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fd79 	bl	80015a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fd8c 	bl	80015cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fd3f 	bl	8001538 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	f7ff fd50 	bl	8001560 <LL_RCC_GetSysClkSource>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d1fb      	bne.n	8001abc <SystemClock_Config+0x58>
  {

  }

  LL_Init1msTick(2097000);
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <SystemClock_Config+0x80>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 ff08 	bl	80028dc <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SystemClock_Config+0x80>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 ff36 	bl	8002940 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001ad4:	23c0      	movs	r3, #192	; 0xc0
 8001ad6:	031b      	lsls	r3, r3, #12
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff fd8d 	bl	80015f8 <LL_RCC_SetUSARTClockSource>
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	001fff68 	.word	0x001fff68

08001ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08f      	sub	sp, #60	; 0x3c
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001aee:	241c      	movs	r4, #28
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	0018      	movs	r0, r3
 8001af4:	231c      	movs	r3, #28
 8001af6:	001a      	movs	r2, r3
 8001af8:	2100      	movs	r1, #0
 8001afa:	f000 ff59 	bl	80029b0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	0018      	movs	r0, r3
 8001b02:	2318      	movs	r3, #24
 8001b04:	001a      	movs	r2, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	f000 ff52 	bl	80029b0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fd89 	bl	8001628 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff fdb2 	bl	8001680 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2204      	movs	r2, #4
 8001b20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2202      	movs	r2, #2
 8001b26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001b40:	1d3a      	adds	r2, r7, #4
 8001b42:	23a0      	movs	r3, #160	; 0xa0
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	0011      	movs	r1, r2
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fb75 	bl	8002238 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2208      	movs	r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2202      	movs	r2, #2
 8001b58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2204      	movs	r2, #4
 8001b70:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001b72:	1d3a      	adds	r2, r7, #4
 8001b74:	23a0      	movs	r3, #160	; 0xa0
 8001b76:	05db      	lsls	r3, r3, #23
 8001b78:	0011      	movs	r1, r2
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fb5c 	bl	8002238 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b80:	193b      	adds	r3, r7, r4
 8001b82:	22e1      	movs	r2, #225	; 0xe1
 8001b84:	0252      	lsls	r2, r2, #9
 8001b86:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b88:	0021      	movs	r1, r4
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <MX_USART2_UART_Init+0xec>)
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	f000 fe13 	bl	80027e0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART2_UART_Init+0xec>)
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fddf 	bl	8001780 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <MX_USART2_UART_Init+0xec>)
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff fdcd 	bl	8001764 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b00f      	add	sp, #60	; 0x3c
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001bde:	2418      	movs	r4, #24
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	0018      	movs	r0, r3
 8001be4:	2308      	movs	r3, #8
 8001be6:	001a      	movs	r2, r3
 8001be8:	2100      	movs	r1, #0
 8001bea:	f000 fee1 	bl	80029b0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	003b      	movs	r3, r7
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	2318      	movs	r3, #24
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f000 feda 	bl	80029b0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001bfc:	2004      	movs	r0, #4
 8001bfe:	f7ff fd3f 	bl	8001680 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 8001c02:	2080      	movs	r0, #128	; 0x80
 8001c04:	f7ff fd3c 	bl	8001680 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fd39 	bl	8001680 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001c0e:	23a0      	movs	r3, #160	; 0xa0
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	2120      	movs	r1, #32
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fe03 	bl	8001820 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_GPIO_Init+0xc0>)
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f7ff fd44 	bl	80016ac <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	481c      	ldr	r0, [pc, #112]	; (8001c9c <MX_GPIO_Init+0xc4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	f7ff fddb 	bl	80017e8 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	4819      	ldr	r0, [pc, #100]	; (8001c9c <MX_GPIO_Init+0xc4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	f7ff fdb8 	bl	80017b0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001c40:	0021      	movs	r1, r4
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	0192      	lsls	r2, r2, #6
 8001c48:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2200      	movs	r2, #0
 8001c54:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2202      	movs	r2, #2
 8001c5a:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f9a8 	bl	8001fb4 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c64:	003b      	movs	r3, r7
 8001c66:	2220      	movs	r2, #32
 8001c68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c6a:	003b      	movs	r3, r7
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c70:	003b      	movs	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c76:	003b      	movs	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c7c:	003b      	movs	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c82:	003a      	movs	r2, r7
 8001c84:	23a0      	movs	r3, #160	; 0xa0
 8001c86:	05db      	lsls	r3, r3, #23
 8001c88:	0011      	movs	r1, r2
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 fad4 	bl	8002238 <LL_GPIO_Init>

}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b009      	add	sp, #36	; 0x24
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	00040003 	.word	0x00040003
 8001c9c:	50000800 	.word	0x50000800

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
  return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_kill>:

int _kill(int pid, int sig)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce0:	f000 fe3c 	bl	800295c <__errno>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	2216      	movs	r2, #22
 8001ce8:	601a      	str	r2, [r3, #0]
  return -1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	425b      	negs	r3, r3
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_exit>:

void _exit (int status)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cfe:	2301      	movs	r3, #1
 8001d00:	425a      	negs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0011      	movs	r1, r2
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ffe5 	bl	8001cd6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d0c:	e7fe      	b.n	8001d0c <_exit+0x16>

08001d0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e00a      	b.n	8001d36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d20:	e000      	b.n	8001d24 <_read+0x16>
 8001d22:	bf00      	nop
 8001d24:	0001      	movs	r1, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	60ba      	str	r2, [r7, #8]
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dbf0      	blt.n	8001d20 <_read+0x12>
  }

  return len;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b006      	add	sp, #24
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e009      	b.n	8001d6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	60ba      	str	r2, [r7, #8]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	0018      	movs	r0, r3
 8001d64:	e000      	b.n	8001d68 <_write+0x20>
 8001d66:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	dbf1      	blt.n	8001d5a <_write+0x12>
  }
  return len;
 8001d76:	687b      	ldr	r3, [r7, #4]
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b006      	add	sp, #24
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_close>:

int _close(int file)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	425b      	negs	r3, r3
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	0192      	lsls	r2, r2, #6
 8001da4:	605a      	str	r2, [r3, #4]
  return 0;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_isatty>:

int _isatty(int file)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b004      	add	sp, #16
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f000 fda8 	bl	800295c <__errno>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	425b      	negs	r3, r3
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	18d2      	adds	r2, r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b006      	add	sp, #24
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20002000 	.word	0x20002000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	2000008c 	.word	0x2000008c
 8001e40:	200000a0 	.word	0x200000a0

08001e44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e54:	f7ff fff6 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e5a:	490d      	ldr	r1, [pc, #52]	; (8001e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <LoopForever+0xe>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e70:	4c0a      	ldr	r4, [pc, #40]	; (8001e9c <LoopForever+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f000 fd73 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7ff fd55 	bl	8001930 <main>

08001e86 <LoopForever>:

LoopForever:
    b LoopForever
 8001e86:	e7fe      	b.n	8001e86 <LoopForever>
  ldr   r0, =_estack
 8001e88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e90:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e94:	080041b0 	.word	0x080041b0
  ldr r2, =_sbss
 8001e98:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e9c:	200000a0 	.word	0x200000a0

08001ea0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC1_COMP_IRQHandler>
	...

08001ea4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <LL_EXTI_DisableIT_0_31+0x20>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <LL_EXTI_DisableIT_0_31+0x20>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]

}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40010400 	.word	0x40010400

08001f08 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	40010400 	.word	0x40010400

08001f2c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]

}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40010400 	.word	0x40010400

08001f4c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]

}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	40010400 	.word	0x40010400

08001f70 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001f7a:	68d9      	ldr	r1, [r3, #12]
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40010400 	.word	0x40010400

08001f90 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	791b      	ldrb	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <LL_EXTI_Init+0x1a>
 8001fcc:	e068      	b.n	80020a0 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d100      	bne.n	8001fd8 <LL_EXTI_Init+0x24>
 8001fd6:	e06e      	b.n	80020b6 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	795b      	ldrb	r3, [r3, #5]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d01b      	beq.n	8002018 <LL_EXTI_Init+0x64>
 8001fe0:	dc25      	bgt.n	800202e <LL_EXTI_Init+0x7a>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <LL_EXTI_Init+0x38>
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d00b      	beq.n	8002002 <LL_EXTI_Init+0x4e>
 8001fea:	e020      	b.n	800202e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff ff89 	bl	8001f08 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff ff52 	bl	8001ea4 <LL_EXTI_EnableIT_0_31>
          break;
 8002000:	e01a      	b.n	8002038 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff ff5c 	bl	8001ec4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff ff69 	bl	8001ee8 <LL_EXTI_EnableEvent_0_31>
          break;
 8002016:	e00f      	b.n	8002038 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ff41 	bl	8001ea4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff ff5e 	bl	8001ee8 <LL_EXTI_EnableEvent_0_31>
          break;
 800202c:	e004      	b.n	8002038 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800202e:	230f      	movs	r3, #15
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
          break;
 8002036:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	799b      	ldrb	r3, [r3, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d03a      	beq.n	80020b6 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	799b      	ldrb	r3, [r3, #6]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d01b      	beq.n	8002080 <LL_EXTI_Init+0xcc>
 8002048:	dc25      	bgt.n	8002096 <LL_EXTI_Init+0xe2>
 800204a:	2b01      	cmp	r3, #1
 800204c:	d002      	beq.n	8002054 <LL_EXTI_Init+0xa0>
 800204e:	2b02      	cmp	r3, #2
 8002050:	d00b      	beq.n	800206a <LL_EXTI_Init+0xb6>
 8002052:	e020      	b.n	8002096 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff ff99 	bl	8001f90 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff ff62 	bl	8001f2c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002068:	e026      	b.n	80020b8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	0018      	movs	r0, r3
 8002070:	f7ff ff6c 	bl	8001f4c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff ff79 	bl	8001f70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800207e:	e01b      	b.n	80020b8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff ff51 	bl	8001f2c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff ff6e 	bl	8001f70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002094:	e010      	b.n	80020b8 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8002096:	230f      	movs	r3, #15
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
            break;
 800209e:	e00b      	b.n	80020b8 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ff0d 	bl	8001ec4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff ff2a 	bl	8001f08 <LL_EXTI_DisableEvent_0_31>
 80020b4:	e000      	b.n	80020b8 <LL_EXTI_Init+0x104>
      }
 80020b6:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <LL_GPIO_SetPinMode>:
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	435b      	muls	r3, r3
 80020da:	001a      	movs	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	43db      	mvns	r3, r3
 80020e4:	400b      	ands	r3, r1
 80020e6:	001a      	movs	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	435b      	muls	r3, r3
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	434b      	muls	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LL_GPIO_SetPinOutputType>:
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	43d2      	mvns	r2, r2
 8002112:	401a      	ands	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	434b      	muls	r3, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}

08002128 <LL_GPIO_SetPinSpeed>:
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	435b      	muls	r3, r3
 800213c:	001a      	movs	r2, r3
 800213e:	0013      	movs	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	189b      	adds	r3, r3, r2
 8002144:	43db      	mvns	r3, r3
 8002146:	400b      	ands	r3, r1
 8002148:	001a      	movs	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	435b      	muls	r3, r3
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	434b      	muls	r3, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}

08002160 <LL_GPIO_SetPinPull>:
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68d9      	ldr	r1, [r3, #12]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	435b      	muls	r3, r3
 8002174:	001a      	movs	r2, r3
 8002176:	0013      	movs	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	189b      	adds	r3, r3, r2
 800217c:	43db      	mvns	r3, r3
 800217e:	400b      	ands	r3, r1
 8002180:	001a      	movs	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	435b      	muls	r3, r3
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	434b      	muls	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	60da      	str	r2, [r3, #12]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}

08002198 <LL_GPIO_SetAFPin_0_7>:
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a19      	ldr	r1, [r3, #32]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	435b      	muls	r3, r3
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	4353      	muls	r3, r2
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	435a      	muls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	43db      	mvns	r3, r3
 80021bc:	400b      	ands	r3, r1
 80021be:	001a      	movs	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	435b      	muls	r3, r3
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	434b      	muls	r3, r1
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	434b      	muls	r3, r1
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	434b      	muls	r3, r1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	621a      	str	r2, [r3, #32]
}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bd80      	pop	{r7, pc}

080021de <LL_GPIO_SetAFPin_8_15>:
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	0a12      	lsrs	r2, r2, #8
 80021f6:	4353      	muls	r3, r2
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	0a12      	lsrs	r2, r2, #8
 80021fc:	4353      	muls	r3, r2
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	0a12      	lsrs	r2, r2, #8
 8002202:	435a      	muls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	43db      	mvns	r3, r3
 800220c:	400b      	ands	r3, r1
 800220e:	001a      	movs	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	0a09      	lsrs	r1, r1, #8
 8002218:	434b      	muls	r3, r1
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	0a09      	lsrs	r1, r1, #8
 800221e:	434b      	muls	r3, r1
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	0a09      	lsrs	r1, r1, #8
 8002224:	434b      	muls	r3, r1
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	434b      	muls	r3, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}

08002238 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800224a:	e048      	b.n	80022de <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4091      	lsls	r1, r2
 8002256:	000a      	movs	r2, r1
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03a      	beq.n	80022d8 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d003      	beq.n	8002272 <LL_GPIO_Init+0x3a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d10e      	bne.n	8002290 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff ff54 	bl	8002128 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff ff37 	bl	80020fe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff ff61 	bl	8002160 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d111      	bne.n	80022ca <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2bff      	cmp	r3, #255	; 0xff
 80022aa:	d807      	bhi.n	80022bc <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff ff6f 	bl	8002198 <LL_GPIO_SetAFPin_0_7>
 80022ba:	e006      	b.n	80022ca <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ff8a 	bl	80021de <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff fef7 	bl	80020c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	40da      	lsrs	r2, r3
 80022e6:	1e13      	subs	r3, r2, #0
 80022e8:	d1b0      	bne.n	800224c <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <LL_RCC_HSI_IsReady>:
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <LL_RCC_HSI_IsReady+0x1c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2204      	movs	r2, #4
 80022fe:	4013      	ands	r3, r2
 8002300:	2b04      	cmp	r3, #4
 8002302:	d101      	bne.n	8002308 <LL_RCC_HSI_IsReady+0x14>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_RCC_HSI_IsReady+0x16>
 8002308:	2300      	movs	r3, #0
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000

08002314 <LL_RCC_LSE_IsReady>:
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <LL_RCC_LSE_IsReady+0x24>)
 800231a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	401a      	ands	r2, r3
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	429a      	cmp	r2, r3
 8002328:	d101      	bne.n	800232e <LL_RCC_LSE_IsReady+0x1a>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <LL_RCC_LSE_IsReady+0x1c>
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	40021000 	.word	0x40021000

0800233c <LL_RCC_MSI_GetRange>:
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <LL_RCC_MSI_GetRange+0x14>)
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	23e0      	movs	r3, #224	; 0xe0
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	4013      	ands	r3, r2
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000

08002354 <LL_RCC_GetSysClkSource>:
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <LL_RCC_GetSysClkSource+0x14>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	220c      	movs	r2, #12
 800235e:	4013      	ands	r3, r2
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000

0800236c <LL_RCC_GetAHBPrescaler>:
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <LL_RCC_GetAHBPrescaler+0x14>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	22f0      	movs	r2, #240	; 0xf0
 8002376:	4013      	ands	r3, r2
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40021000 	.word	0x40021000

08002384 <LL_RCC_GetAPB1Prescaler>:
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <LL_RCC_GetAPB1Prescaler+0x14>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	23e0      	movs	r3, #224	; 0xe0
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4013      	ands	r3, r2
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <LL_RCC_GetAPB2Prescaler>:
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <LL_RCC_GetAPB2Prescaler+0x14>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	23e0      	movs	r3, #224	; 0xe0
 80023a6:	019b      	lsls	r3, r3, #6
 80023a8:	4013      	ands	r3, r2
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <LL_RCC_GetUSARTClockSource+0x20>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	4313      	orrs	r3, r2
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	40021000 	.word	0x40021000

080023d8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <LL_RCC_PLL_GetMainSource+0x14>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	4013      	ands	r3, r2
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000

080023f0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	23f0      	movs	r3, #240	; 0xf0
 80023fa:	039b      	lsls	r3, r3, #14
 80023fc:	4013      	ands	r3, r2
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <LL_RCC_PLL_GetDivider+0x14>)
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	23c0      	movs	r3, #192	; 0xc0
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	4013      	ands	r3, r2
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000

08002420 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2210      	movs	r2, #16
 800242a:	4013      	ands	r3, r2
 800242c:	2b10      	cmp	r3, #16
 800242e:	d101      	bne.n	8002434 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8002434:	2300      	movs	r3, #0
}
 8002436:	0018      	movs	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d139      	bne.n	80024c6 <LL_RCC_GetUSARTClockFreq+0x86>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff ffad 	bl	80023b4 <LL_RCC_GetUSARTClockSource>
 800245a:	0003      	movs	r3, r0
 800245c:	4a40      	ldr	r2, [pc, #256]	; (8002560 <LL_RCC_GetUSARTClockFreq+0x120>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01c      	beq.n	800249c <LL_RCC_GetUSARTClockFreq+0x5c>
 8002462:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <LL_RCC_GetUSARTClockFreq+0x120>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d821      	bhi.n	80024ac <LL_RCC_GetUSARTClockFreq+0x6c>
 8002468:	4a3e      	ldr	r2, [pc, #248]	; (8002564 <LL_RCC_GetUSARTClockFreq+0x124>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <LL_RCC_GetUSARTClockFreq+0x36>
 800246e:	4a3e      	ldr	r2, [pc, #248]	; (8002568 <LL_RCC_GetUSARTClockFreq+0x128>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d005      	beq.n	8002480 <LL_RCC_GetUSARTClockFreq+0x40>
 8002474:	e01a      	b.n	80024ac <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002476:	f000 f883 	bl	8002580 <RCC_GetSystemClockFreq>
 800247a:	0003      	movs	r3, r0
 800247c:	60fb      	str	r3, [r7, #12]
        break;
 800247e:	e027      	b.n	80024d0 <LL_RCC_GetUSARTClockFreq+0x90>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002480:	f7ff ff38 	bl	80022f4 <LL_RCC_HSI_IsReady>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d020      	beq.n	80024ca <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002488:	f7ff ffca 	bl	8002420 <LL_RCC_IsActiveFlag_HSIDIV>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d002      	beq.n	8002496 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <LL_RCC_GetUSARTClockFreq+0x12c>)
 8002492:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002494:	e019      	b.n	80024ca <LL_RCC_GetUSARTClockFreq+0x8a>
            usart_frequency = HSI_VALUE;
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <LL_RCC_GetUSARTClockFreq+0x130>)
 8002498:	60fb      	str	r3, [r7, #12]
        break;
 800249a:	e016      	b.n	80024ca <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800249c:	f7ff ff3a 	bl	8002314 <LL_RCC_LSE_IsReady>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d014      	beq.n	80024ce <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = LSE_VALUE;
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024aa:	e010      	b.n	80024ce <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024ac:	f000 f868 	bl	8002580 <RCC_GetSystemClockFreq>
 80024b0:	0003      	movs	r3, r0
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 f8a8 	bl	8002608 <RCC_GetHCLKClockFreq>
 80024b8:	0003      	movs	r3, r0
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f8ce 	bl	800265c <RCC_GetPCLK2ClockFreq>
 80024c0:	0003      	movs	r3, r0
 80024c2:	60fb      	str	r3, [r7, #12]
        break;
 80024c4:	e004      	b.n	80024d0 <LL_RCC_GetUSARTClockFreq+0x90>
    }
  }
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	e002      	b.n	80024d0 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	e000      	b.n	80024d0 <LL_RCC_GetUSARTClockFreq+0x90>
        break;
 80024ce:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d139      	bne.n	800254a <LL_RCC_GetUSARTClockFreq+0x10a>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff ff6b 	bl	80023b4 <LL_RCC_GetUSARTClockSource>
 80024de:	0003      	movs	r3, r0
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <LL_RCC_GetUSARTClockFreq+0x134>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01c      	beq.n	8002520 <LL_RCC_GetUSARTClockFreq+0xe0>
 80024e6:	4a23      	ldr	r2, [pc, #140]	; (8002574 <LL_RCC_GetUSARTClockFreq+0x134>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d821      	bhi.n	8002530 <LL_RCC_GetUSARTClockFreq+0xf0>
 80024ec:	4a22      	ldr	r2, [pc, #136]	; (8002578 <LL_RCC_GetUSARTClockFreq+0x138>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <LL_RCC_GetUSARTClockFreq+0xba>
 80024f2:	4a22      	ldr	r2, [pc, #136]	; (800257c <LL_RCC_GetUSARTClockFreq+0x13c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d005      	beq.n	8002504 <LL_RCC_GetUSARTClockFreq+0xc4>
 80024f8:	e01a      	b.n	8002530 <LL_RCC_GetUSARTClockFreq+0xf0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80024fa:	f000 f841 	bl	8002580 <RCC_GetSystemClockFreq>
 80024fe:	0003      	movs	r3, r0
 8002500:	60fb      	str	r3, [r7, #12]
        break;
 8002502:	e027      	b.n	8002554 <LL_RCC_GetUSARTClockFreq+0x114>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002504:	f7ff fef6 	bl	80022f4 <LL_RCC_HSI_IsReady>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d020      	beq.n	800254e <LL_RCC_GetUSARTClockFreq+0x10e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800250c:	f7ff ff88 	bl	8002420 <LL_RCC_IsActiveFlag_HSIDIV>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d002      	beq.n	800251a <LL_RCC_GetUSARTClockFreq+0xda>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <LL_RCC_GetUSARTClockFreq+0x12c>)
 8002516:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8002518:	e019      	b.n	800254e <LL_RCC_GetUSARTClockFreq+0x10e>
            usart_frequency = HSI_VALUE;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <LL_RCC_GetUSARTClockFreq+0x130>)
 800251c:	60fb      	str	r3, [r7, #12]
        break;
 800251e:	e016      	b.n	800254e <LL_RCC_GetUSARTClockFreq+0x10e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002520:	f7ff fef8 	bl	8002314 <LL_RCC_LSE_IsReady>
 8002524:	1e03      	subs	r3, r0, #0
 8002526:	d014      	beq.n	8002552 <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = LSE_VALUE;
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800252e:	e010      	b.n	8002552 <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002530:	f000 f826 	bl	8002580 <RCC_GetSystemClockFreq>
 8002534:	0003      	movs	r3, r0
 8002536:	0018      	movs	r0, r3
 8002538:	f000 f866 	bl	8002608 <RCC_GetHCLKClockFreq>
 800253c:	0003      	movs	r3, r0
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f878 	bl	8002634 <RCC_GetPCLK1ClockFreq>
 8002544:	0003      	movs	r3, r0
 8002546:	60fb      	str	r3, [r7, #12]
        break;
 8002548:	e004      	b.n	8002554 <LL_RCC_GetUSARTClockFreq+0x114>
    }
  }
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	e002      	b.n	8002554 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	e000      	b.n	8002554 <LL_RCC_GetUSARTClockFreq+0x114>
        break;
 8002552:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b004      	add	sp, #16
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	00030003 	.word	0x00030003
 8002564:	00030001 	.word	0x00030001
 8002568:	00030002 	.word	0x00030002
 800256c:	003d0900 	.word	0x003d0900
 8002570:	00f42400 	.word	0x00f42400
 8002574:	000c000c 	.word	0x000c000c
 8002578:	000c0004 	.word	0x000c0004
 800257c:	000c0008 	.word	0x000c0008

08002580 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002586:	f7ff fee5 	bl	8002354 <LL_RCC_GetSysClkSource>
 800258a:	0003      	movs	r3, r0
 800258c:	2b0c      	cmp	r3, #12
 800258e:	d020      	beq.n	80025d2 <RCC_GetSystemClockFreq+0x52>
 8002590:	d824      	bhi.n	80025dc <RCC_GetSystemClockFreq+0x5c>
 8002592:	2b08      	cmp	r3, #8
 8002594:	d01a      	beq.n	80025cc <RCC_GetSystemClockFreq+0x4c>
 8002596:	d821      	bhi.n	80025dc <RCC_GetSystemClockFreq+0x5c>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <RCC_GetSystemClockFreq+0x22>
 800259c:	2b04      	cmp	r3, #4
 800259e:	d00b      	beq.n	80025b8 <RCC_GetSystemClockFreq+0x38>
 80025a0:	e01c      	b.n	80025dc <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025a2:	f7ff fecb 	bl	800233c <LL_RCC_MSI_GetRange>
 80025a6:	0003      	movs	r3, r0
 80025a8:	0b5b      	lsrs	r3, r3, #13
 80025aa:	3301      	adds	r3, #1
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0212      	lsls	r2, r2, #8
 80025b0:	409a      	lsls	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	607b      	str	r3, [r7, #4]
      break;
 80025b6:	e01c      	b.n	80025f2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80025b8:	f7ff ff32 	bl	8002420 <LL_RCC_IsActiveFlag_HSIDIV>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d002      	beq.n	80025c6 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <RCC_GetSystemClockFreq+0x7c>)
 80025c2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 80025c4:	e015      	b.n	80025f2 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <RCC_GetSystemClockFreq+0x80>)
 80025c8:	607b      	str	r3, [r7, #4]
      break;
 80025ca:	e012      	b.n	80025f2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <RCC_GetSystemClockFreq+0x84>)
 80025ce:	607b      	str	r3, [r7, #4]
      break;
 80025d0:	e00f      	b.n	80025f2 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80025d2:	f000 f857 	bl	8002684 <RCC_PLL_GetFreqDomain_SYS>
 80025d6:	0003      	movs	r3, r0
 80025d8:	607b      	str	r3, [r7, #4]
      break;
 80025da:	e00a      	b.n	80025f2 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025dc:	f7ff feae 	bl	800233c <LL_RCC_MSI_GetRange>
 80025e0:	0003      	movs	r3, r0
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	3301      	adds	r3, #1
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	0212      	lsls	r2, r2, #8
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	607b      	str	r3, [r7, #4]
      break;
 80025f0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80025f2:	687b      	ldr	r3, [r7, #4]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	003d0900 	.word	0x003d0900
 8002600:	00f42400 	.word	0x00f42400
 8002604:	007a1200 	.word	0x007a1200

08002608 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002610:	f7ff feac 	bl	800236c <LL_RCC_GetAHBPrescaler>
 8002614:	0003      	movs	r3, r0
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	220f      	movs	r2, #15
 800261a:	4013      	ands	r3, r2
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <RCC_GetHCLKClockFreq+0x28>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	001a      	movs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	40d3      	lsrs	r3, r2
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	0800403c 	.word	0x0800403c

08002634 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800263c:	f7ff fea2 	bl	8002384 <LL_RCC_GetAPB1Prescaler>
 8002640:	0003      	movs	r3, r0
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <RCC_GetPCLK1ClockFreq+0x24>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	001a      	movs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	40d3      	lsrs	r3, r2
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	0800404c 	.word	0x0800404c

0800265c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002664:	f7ff fe9a 	bl	800239c <LL_RCC_GetAPB2Prescaler>
 8002668:	0003      	movs	r3, r0
 800266a:	0adb      	lsrs	r3, r3, #11
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <RCC_GetPCLK2ClockFreq+0x24>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	001a      	movs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	40d3      	lsrs	r3, r2
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b002      	add	sp, #8
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	0800404c 	.word	0x0800404c

08002684 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800268a:	f7ff fea5 	bl	80023d8 <LL_RCC_PLL_GetMainSource>
 800268e:	0003      	movs	r3, r0
 8002690:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002698:	f7ff fec2 	bl	8002420 <LL_RCC_IsActiveFlag_HSIDIV>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d002      	beq.n	80026a6 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80026a2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 80026a4:	e005      	b.n	80026b2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80026a8:	607b      	str	r3, [r7, #4]
      break;
 80026aa:	e002      	b.n	80026b2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80026ac:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80026ae:	607b      	str	r3, [r7, #4]
      break;
 80026b0:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80026b2:	f7ff fe9d 	bl	80023f0 <LL_RCC_PLL_GetMultiplicator>
 80026b6:	0003      	movs	r3, r0
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	001a      	movs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4353      	muls	r3, r2
 80026c4:	001c      	movs	r4, r3
 80026c6:	f7ff fe9f 	bl	8002408 <LL_RCC_PLL_GetDivider>
 80026ca:	0003      	movs	r3, r0
 80026cc:	0d9b      	lsrs	r3, r3, #22
 80026ce:	3301      	adds	r3, #1
 80026d0:	0019      	movs	r1, r3
 80026d2:	0020      	movs	r0, r4
 80026d4:	f7fd fd22 	bl	800011c <__udivsi3>
 80026d8:	0003      	movs	r3, r0
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b003      	add	sp, #12
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	007a1200 	.word	0x007a1200
 80026f0:	08004054 	.word	0x08004054

080026f4 <LL_USART_IsEnabled>:
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <LL_USART_IsEnabled+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_USART_IsEnabled+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <LL_USART_SetStopBitsLength>:
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <LL_USART_SetStopBitsLength+0x24>)
 8002728:	401a      	ands	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	605a      	str	r2, [r3, #4]
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	ffffcfff 	.word	0xffffcfff

08002740 <LL_USART_SetHWFlowCtrl>:
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <LL_USART_SetHWFlowCtrl+0x24>)
 8002750:	401a      	ands	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	609a      	str	r2, [r3, #8]
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	fffffcff 	.word	0xfffffcff

08002768 <LL_USART_SetBaudRate>:
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	429a      	cmp	r2, r3
 800277e:	d11c      	bne.n	80027ba <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	005a      	lsls	r2, r3, #1
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	18d3      	adds	r3, r2, r3
 800278a:	6839      	ldr	r1, [r7, #0]
 800278c:	0018      	movs	r0, r3
 800278e:	f7fd fcc5 	bl	800011c <__udivsi3>
 8002792:	0003      	movs	r3, r0
 8002794:	b29b      	uxth	r3, r3
 8002796:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <LL_USART_SetBaudRate+0x74>)
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	001a      	movs	r2, r3
 80027a8:	2307      	movs	r3, #7
 80027aa:	4013      	ands	r3, r2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	60da      	str	r2, [r3, #12]
}
 80027b8:	e00c      	b.n	80027d4 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	085a      	lsrs	r2, r3, #1
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fd fca9 	bl	800011c <__udivsi3>
 80027ca:	0003      	movs	r3, r0
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	001a      	movs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b006      	add	sp, #24
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	0000fff0 	.word	0x0000fff0

080027e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7ff ff7b 	bl	80026f4 <LL_USART_IsEnabled>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d145      	bne.n	800288e <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <LL_USART_Init+0xbc>)
 8002808:	401a      	ands	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4319      	orrs	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4319      	orrs	r1, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	430b      	orrs	r3, r1
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f7ff ff72 	bl	8002718 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	0011      	movs	r1, r2
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff ff7f 	bl	8002740 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <LL_USART_Init+0xc0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d105      	bne.n	8002856 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800284a:	2003      	movs	r0, #3
 800284c:	f7ff fdf8 	bl	8002440 <LL_RCC_GetUSARTClockFreq>
 8002850:	0003      	movs	r3, r0
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	e008      	b.n	8002868 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <LL_USART_Init+0xc4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d104      	bne.n	8002868 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800285e:	200c      	movs	r0, #12
 8002860:	f7ff fdee 	bl	8002440 <LL_RCC_GetUSARTClockFreq>
 8002864:	0003      	movs	r3, r0
 8002866:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00f      	beq.n	800288e <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8002876:	230f      	movs	r3, #15
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff6d 	bl	8002768 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800288e:	230f      	movs	r3, #15
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	781b      	ldrb	r3, [r3, #0]
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	efff69f3 	.word	0xefff69f3
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40004400 	.word	0x40004400

080028a8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fd fc31 	bl	800011c <__udivsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	001a      	movs	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <LL_InitTick+0x30>)
 80028c0:	3a01      	subs	r2, #1
 80028c2:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <LL_InitTick+0x30>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <LL_InitTick+0x30>)
 80028cc:	2205      	movs	r2, #5
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	e000e010 	.word	0xe000e010

080028dc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80028e4:	23fa      	movs	r3, #250	; 0xfa
 80028e6:	009a      	lsls	r2, r3, #2
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff ffdb 	bl	80028a8 <LL_InitTick>
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b002      	add	sp, #8
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002904:	4b0d      	ldr	r3, [pc, #52]	; (800293c <LL_mDelay+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800290a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3301      	adds	r3, #1
 8002910:	d00c      	beq.n	800292c <LL_mDelay+0x30>
  {
    Delay++;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3301      	adds	r3, #1
 8002916:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002918:	e008      	b.n	800292c <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <LL_mDelay+0x40>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	025b      	lsls	r3, r3, #9
 8002922:	4013      	ands	r3, r2
 8002924:	d002      	beq.n	800292c <LL_mDelay+0x30>
    {
      Delay--;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3b01      	subs	r3, #1
 800292a:	607b      	str	r3, [r7, #4]
  while (Delay)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f3      	bne.n	800291a <LL_mDelay+0x1e>
    }
  }
}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	e000e010 	.word	0xe000e010

08002940 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <LL_SetSystemCoreClock+0x18>)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20000000 	.word	0x20000000

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000004 	.word	0x20000004

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4d0c      	ldr	r5, [pc, #48]	; (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	2600      	movs	r6, #0
 800297a:	f001 fafb 	bl	8003f74 <_init>
 800297e:	4d0a      	ldr	r5, [pc, #40]	; (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	00b3      	lsls	r3, r6, #2
 800298e:	58eb      	ldr	r3, [r5, r3]
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	00b3      	lsls	r3, r6, #2
 8002998:	58eb      	ldr	r3, [r5, r3]
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	080041a8 	.word	0x080041a8
 80029a4:	080041a8 	.word	0x080041a8
 80029a8:	080041a8 	.word	0x080041a8
 80029ac:	080041ac 	.word	0x080041ac

080029b0 <memset>:
 80029b0:	0003      	movs	r3, r0
 80029b2:	1882      	adds	r2, r0, r2
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	7019      	strb	r1, [r3, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <iprintf>:
 80029c0:	b40f      	push	{r0, r1, r2, r3}
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <iprintf+0x30>)
 80029c4:	b513      	push	{r0, r1, r4, lr}
 80029c6:	681c      	ldr	r4, [r3, #0]
 80029c8:	2c00      	cmp	r4, #0
 80029ca:	d005      	beq.n	80029d8 <iprintf+0x18>
 80029cc:	69a3      	ldr	r3, [r4, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <iprintf+0x18>
 80029d2:	0020      	movs	r0, r4
 80029d4:	f000 f936 	bl	8002c44 <__sinit>
 80029d8:	ab05      	add	r3, sp, #20
 80029da:	0020      	movs	r0, r4
 80029dc:	9a04      	ldr	r2, [sp, #16]
 80029de:	68a1      	ldr	r1, [r4, #8]
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	f000 fc6b 	bl	80032bc <_vfiprintf_r>
 80029e6:	bc16      	pop	{r1, r2, r4}
 80029e8:	bc08      	pop	{r3}
 80029ea:	b004      	add	sp, #16
 80029ec:	4718      	bx	r3
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	20000004 	.word	0x20000004

080029f4 <srand>:
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <srand+0x48>)
 80029f6:	b570      	push	{r4, r5, r6, lr}
 80029f8:	681d      	ldr	r5, [r3, #0]
 80029fa:	0004      	movs	r4, r0
 80029fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <srand+0x3c>
 8002a02:	2018      	movs	r0, #24
 8002a04:	f000 f9e4 	bl	8002dd0 <malloc>
 8002a08:	1e02      	subs	r2, r0, #0
 8002a0a:	63a8      	str	r0, [r5, #56]	; 0x38
 8002a0c:	d104      	bne.n	8002a18 <srand+0x24>
 8002a0e:	2142      	movs	r1, #66	; 0x42
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <srand+0x4c>)
 8002a12:	480c      	ldr	r0, [pc, #48]	; (8002a44 <srand+0x50>)
 8002a14:	f000 f896 	bl	8002b44 <__assert_func>
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <srand+0x54>)
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6003      	str	r3, [r0, #0]
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <srand+0x58>)
 8002a20:	6043      	str	r3, [r0, #4]
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <srand+0x5c>)
 8002a24:	6083      	str	r3, [r0, #8]
 8002a26:	230b      	movs	r3, #11
 8002a28:	8183      	strh	r3, [r0, #12]
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	6110      	str	r0, [r2, #16]
 8002a2e:	6151      	str	r1, [r2, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a34:	611c      	str	r4, [r3, #16]
 8002a36:	615a      	str	r2, [r3, #20]
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	08004064 	.word	0x08004064
 8002a44:	0800407b 	.word	0x0800407b
 8002a48:	abcd330e 	.word	0xabcd330e
 8002a4c:	e66d1234 	.word	0xe66d1234
 8002a50:	0005deec 	.word	0x0005deec

08002a54 <rand>:
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <rand+0x5c>)
 8002a56:	b510      	push	{r4, lr}
 8002a58:	681c      	ldr	r4, [r3, #0]
 8002a5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d116      	bne.n	8002a8e <rand+0x3a>
 8002a60:	2018      	movs	r0, #24
 8002a62:	f000 f9b5 	bl	8002dd0 <malloc>
 8002a66:	1e02      	subs	r2, r0, #0
 8002a68:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a6a:	d104      	bne.n	8002a76 <rand+0x22>
 8002a6c:	214e      	movs	r1, #78	; 0x4e
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <rand+0x60>)
 8002a70:	4811      	ldr	r0, [pc, #68]	; (8002ab8 <rand+0x64>)
 8002a72:	f000 f867 	bl	8002b44 <__assert_func>
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <rand+0x68>)
 8002a78:	2100      	movs	r1, #0
 8002a7a:	6003      	str	r3, [r0, #0]
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <rand+0x6c>)
 8002a7e:	6043      	str	r3, [r0, #4]
 8002a80:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <rand+0x70>)
 8002a82:	6083      	str	r3, [r0, #8]
 8002a84:	230b      	movs	r3, #11
 8002a86:	8183      	strh	r3, [r0, #12]
 8002a88:	2001      	movs	r0, #1
 8002a8a:	6110      	str	r0, [r2, #16]
 8002a8c:	6151      	str	r1, [r2, #20]
 8002a8e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <rand+0x74>)
 8002a92:	6920      	ldr	r0, [r4, #16]
 8002a94:	6961      	ldr	r1, [r4, #20]
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <rand+0x78>)
 8002a98:	f7fd fcb6 	bl	8000408 <__aeabi_lmul>
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	1880      	adds	r0, r0, r2
 8002aa2:	4159      	adcs	r1, r3
 8002aa4:	6120      	str	r0, [r4, #16]
 8002aa6:	6161      	str	r1, [r4, #20]
 8002aa8:	0048      	lsls	r0, r1, #1
 8002aaa:	0840      	lsrs	r0, r0, #1
 8002aac:	bd10      	pop	{r4, pc}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	08004064 	.word	0x08004064
 8002ab8:	0800407b 	.word	0x0800407b
 8002abc:	abcd330e 	.word	0xabcd330e
 8002ac0:	e66d1234 	.word	0xe66d1234
 8002ac4:	0005deec 	.word	0x0005deec
 8002ac8:	4c957f2d 	.word	0x4c957f2d
 8002acc:	5851f42d 	.word	0x5851f42d

08002ad0 <siprintf>:
 8002ad0:	b40e      	push	{r1, r2, r3}
 8002ad2:	b500      	push	{lr}
 8002ad4:	490b      	ldr	r1, [pc, #44]	; (8002b04 <siprintf+0x34>)
 8002ad6:	b09c      	sub	sp, #112	; 0x70
 8002ad8:	ab1d      	add	r3, sp, #116	; 0x74
 8002ada:	9002      	str	r0, [sp, #8]
 8002adc:	9006      	str	r0, [sp, #24]
 8002ade:	9107      	str	r1, [sp, #28]
 8002ae0:	9104      	str	r1, [sp, #16]
 8002ae2:	4809      	ldr	r0, [pc, #36]	; (8002b08 <siprintf+0x38>)
 8002ae4:	4909      	ldr	r1, [pc, #36]	; (8002b0c <siprintf+0x3c>)
 8002ae6:	cb04      	ldmia	r3!, {r2}
 8002ae8:	9105      	str	r1, [sp, #20]
 8002aea:	6800      	ldr	r0, [r0, #0]
 8002aec:	a902      	add	r1, sp, #8
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	f000 fabc 	bl	800306c <_svfiprintf_r>
 8002af4:	2300      	movs	r3, #0
 8002af6:	9a02      	ldr	r2, [sp, #8]
 8002af8:	7013      	strb	r3, [r2, #0]
 8002afa:	b01c      	add	sp, #112	; 0x70
 8002afc:	bc08      	pop	{r3}
 8002afe:	b003      	add	sp, #12
 8002b00:	4718      	bx	r3
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	7fffffff 	.word	0x7fffffff
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	ffff0208 	.word	0xffff0208

08002b10 <time>:
 8002b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <time+0x30>)
 8002b14:	0004      	movs	r4, r0
 8002b16:	2200      	movs	r2, #0
 8002b18:	4669      	mov	r1, sp
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	f000 f942 	bl	8002da4 <_gettimeofday_r>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	da04      	bge.n	8002b2e <time+0x1e>
 8002b24:	2201      	movs	r2, #1
 8002b26:	4252      	negs	r2, r2
 8002b28:	17d3      	asrs	r3, r2, #31
 8002b2a:	9200      	str	r2, [sp, #0]
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	9800      	ldr	r0, [sp, #0]
 8002b30:	9901      	ldr	r1, [sp, #4]
 8002b32:	2c00      	cmp	r4, #0
 8002b34:	d001      	beq.n	8002b3a <time+0x2a>
 8002b36:	6020      	str	r0, [r4, #0]
 8002b38:	6061      	str	r1, [r4, #4]
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000004 	.word	0x20000004

08002b44 <__assert_func>:
 8002b44:	b530      	push	{r4, r5, lr}
 8002b46:	0014      	movs	r4, r2
 8002b48:	001a      	movs	r2, r3
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <__assert_func+0x2c>)
 8002b4c:	0005      	movs	r5, r0
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b085      	sub	sp, #20
 8002b52:	68d8      	ldr	r0, [r3, #12]
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <__assert_func+0x30>)
 8002b56:	2c00      	cmp	r4, #0
 8002b58:	d101      	bne.n	8002b5e <__assert_func+0x1a>
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <__assert_func+0x34>)
 8002b5c:	001c      	movs	r4, r3
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	9100      	str	r1, [sp, #0]
 8002b62:	002b      	movs	r3, r5
 8002b64:	4905      	ldr	r1, [pc, #20]	; (8002b7c <__assert_func+0x38>)
 8002b66:	9402      	str	r4, [sp, #8]
 8002b68:	f000 f8ec 	bl	8002d44 <fiprintf>
 8002b6c:	f000 ffa2 	bl	8003ab4 <abort>
 8002b70:	20000004 	.word	0x20000004
 8002b74:	080040d6 	.word	0x080040d6
 8002b78:	08004111 	.word	0x08004111
 8002b7c:	080040e3 	.word	0x080040e3

08002b80 <std>:
 8002b80:	2300      	movs	r3, #0
 8002b82:	b510      	push	{r4, lr}
 8002b84:	0004      	movs	r4, r0
 8002b86:	6003      	str	r3, [r0, #0]
 8002b88:	6043      	str	r3, [r0, #4]
 8002b8a:	6083      	str	r3, [r0, #8]
 8002b8c:	8181      	strh	r1, [r0, #12]
 8002b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8002b90:	0019      	movs	r1, r3
 8002b92:	81c2      	strh	r2, [r0, #14]
 8002b94:	6103      	str	r3, [r0, #16]
 8002b96:	6143      	str	r3, [r0, #20]
 8002b98:	6183      	str	r3, [r0, #24]
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	305c      	adds	r0, #92	; 0x5c
 8002b9e:	f7ff ff07 	bl	80029b0 <memset>
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <std+0x38>)
 8002ba4:	6224      	str	r4, [r4, #32]
 8002ba6:	6263      	str	r3, [r4, #36]	; 0x24
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <std+0x3c>)
 8002baa:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <std+0x40>)
 8002bae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <std+0x44>)
 8002bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	08003859 	.word	0x08003859
 8002bbc:	08003881 	.word	0x08003881
 8002bc0:	080038b9 	.word	0x080038b9
 8002bc4:	080038e5 	.word	0x080038e5

08002bc8 <_cleanup_r>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	4902      	ldr	r1, [pc, #8]	; (8002bd4 <_cleanup_r+0xc>)
 8002bcc:	f000 f8ca 	bl	8002d64 <_fwalk_reent>
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	08003c01 	.word	0x08003c01

08002bd8 <__sfmoreglue>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	2568      	movs	r5, #104	; 0x68
 8002bdc:	1e4a      	subs	r2, r1, #1
 8002bde:	4355      	muls	r5, r2
 8002be0:	000e      	movs	r6, r1
 8002be2:	0029      	movs	r1, r5
 8002be4:	3174      	adds	r1, #116	; 0x74
 8002be6:	f000 f969 	bl	8002ebc <_malloc_r>
 8002bea:	1e04      	subs	r4, r0, #0
 8002bec:	d008      	beq.n	8002c00 <__sfmoreglue+0x28>
 8002bee:	2100      	movs	r1, #0
 8002bf0:	002a      	movs	r2, r5
 8002bf2:	6001      	str	r1, [r0, #0]
 8002bf4:	6046      	str	r6, [r0, #4]
 8002bf6:	300c      	adds	r0, #12
 8002bf8:	60a0      	str	r0, [r4, #8]
 8002bfa:	3268      	adds	r2, #104	; 0x68
 8002bfc:	f7ff fed8 	bl	80029b0 <memset>
 8002c00:	0020      	movs	r0, r4
 8002c02:	bd70      	pop	{r4, r5, r6, pc}

08002c04 <__sfp_lock_acquire>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4802      	ldr	r0, [pc, #8]	; (8002c10 <__sfp_lock_acquire+0xc>)
 8002c08:	f000 f8df 	bl	8002dca <__retarget_lock_acquire_recursive>
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000091 	.word	0x20000091

08002c14 <__sfp_lock_release>:
 8002c14:	b510      	push	{r4, lr}
 8002c16:	4802      	ldr	r0, [pc, #8]	; (8002c20 <__sfp_lock_release+0xc>)
 8002c18:	f000 f8d8 	bl	8002dcc <__retarget_lock_release_recursive>
 8002c1c:	bd10      	pop	{r4, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	20000091 	.word	0x20000091

08002c24 <__sinit_lock_acquire>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <__sinit_lock_acquire+0xc>)
 8002c28:	f000 f8cf 	bl	8002dca <__retarget_lock_acquire_recursive>
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	20000092 	.word	0x20000092

08002c34 <__sinit_lock_release>:
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4802      	ldr	r0, [pc, #8]	; (8002c40 <__sinit_lock_release+0xc>)
 8002c38:	f000 f8c8 	bl	8002dcc <__retarget_lock_release_recursive>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000092 	.word	0x20000092

08002c44 <__sinit>:
 8002c44:	b513      	push	{r0, r1, r4, lr}
 8002c46:	0004      	movs	r4, r0
 8002c48:	f7ff ffec 	bl	8002c24 <__sinit_lock_acquire>
 8002c4c:	69a3      	ldr	r3, [r4, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <__sinit+0x14>
 8002c52:	f7ff ffef 	bl	8002c34 <__sinit_lock_release>
 8002c56:	bd13      	pop	{r0, r1, r4, pc}
 8002c58:	64a3      	str	r3, [r4, #72]	; 0x48
 8002c5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <__sinit+0x68>)
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <__sinit+0x6c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	d101      	bne.n	8002c70 <__sinit+0x2c>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	61a3      	str	r3, [r4, #24]
 8002c70:	0020      	movs	r0, r4
 8002c72:	f000 f81f 	bl	8002cb4 <__sfp>
 8002c76:	6060      	str	r0, [r4, #4]
 8002c78:	0020      	movs	r0, r4
 8002c7a:	f000 f81b 	bl	8002cb4 <__sfp>
 8002c7e:	60a0      	str	r0, [r4, #8]
 8002c80:	0020      	movs	r0, r4
 8002c82:	f000 f817 	bl	8002cb4 <__sfp>
 8002c86:	2200      	movs	r2, #0
 8002c88:	2104      	movs	r1, #4
 8002c8a:	60e0      	str	r0, [r4, #12]
 8002c8c:	6860      	ldr	r0, [r4, #4]
 8002c8e:	f7ff ff77 	bl	8002b80 <std>
 8002c92:	2201      	movs	r2, #1
 8002c94:	2109      	movs	r1, #9
 8002c96:	68a0      	ldr	r0, [r4, #8]
 8002c98:	f7ff ff72 	bl	8002b80 <std>
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	2112      	movs	r1, #18
 8002ca0:	68e0      	ldr	r0, [r4, #12]
 8002ca2:	f7ff ff6d 	bl	8002b80 <std>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61a3      	str	r3, [r4, #24]
 8002caa:	e7d2      	b.n	8002c52 <__sinit+0xe>
 8002cac:	08004060 	.word	0x08004060
 8002cb0:	08002bc9 	.word	0x08002bc9

08002cb4 <__sfp>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	0007      	movs	r7, r0
 8002cb8:	f7ff ffa4 	bl	8002c04 <__sfp_lock_acquire>
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <__sfp+0x88>)
 8002cbe:	681e      	ldr	r6, [r3, #0]
 8002cc0:	69b3      	ldr	r3, [r6, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <__sfp+0x18>
 8002cc6:	0030      	movs	r0, r6
 8002cc8:	f7ff ffbc 	bl	8002c44 <__sinit>
 8002ccc:	3648      	adds	r6, #72	; 0x48
 8002cce:	68b4      	ldr	r4, [r6, #8]
 8002cd0:	6873      	ldr	r3, [r6, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	d504      	bpl.n	8002ce0 <__sfp+0x2c>
 8002cd6:	6833      	ldr	r3, [r6, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <__sfp+0x6e>
 8002cdc:	6836      	ldr	r6, [r6, #0]
 8002cde:	e7f6      	b.n	8002cce <__sfp+0x1a>
 8002ce0:	220c      	movs	r2, #12
 8002ce2:	5ea5      	ldrsh	r5, [r4, r2]
 8002ce4:	2d00      	cmp	r5, #0
 8002ce6:	d11a      	bne.n	8002d1e <__sfp+0x6a>
 8002ce8:	0020      	movs	r0, r4
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <__sfp+0x8c>)
 8002cec:	3058      	adds	r0, #88	; 0x58
 8002cee:	60e3      	str	r3, [r4, #12]
 8002cf0:	6665      	str	r5, [r4, #100]	; 0x64
 8002cf2:	f000 f869 	bl	8002dc8 <__retarget_lock_init_recursive>
 8002cf6:	f7ff ff8d 	bl	8002c14 <__sfp_lock_release>
 8002cfa:	0020      	movs	r0, r4
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	0029      	movs	r1, r5
 8002d00:	6025      	str	r5, [r4, #0]
 8002d02:	60a5      	str	r5, [r4, #8]
 8002d04:	6065      	str	r5, [r4, #4]
 8002d06:	6125      	str	r5, [r4, #16]
 8002d08:	6165      	str	r5, [r4, #20]
 8002d0a:	61a5      	str	r5, [r4, #24]
 8002d0c:	305c      	adds	r0, #92	; 0x5c
 8002d0e:	f7ff fe4f 	bl	80029b0 <memset>
 8002d12:	6365      	str	r5, [r4, #52]	; 0x34
 8002d14:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d16:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d18:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d1a:	0020      	movs	r0, r4
 8002d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d1e:	3468      	adds	r4, #104	; 0x68
 8002d20:	e7d7      	b.n	8002cd2 <__sfp+0x1e>
 8002d22:	2104      	movs	r1, #4
 8002d24:	0038      	movs	r0, r7
 8002d26:	f7ff ff57 	bl	8002bd8 <__sfmoreglue>
 8002d2a:	1e04      	subs	r4, r0, #0
 8002d2c:	6030      	str	r0, [r6, #0]
 8002d2e:	d1d5      	bne.n	8002cdc <__sfp+0x28>
 8002d30:	f7ff ff70 	bl	8002c14 <__sfp_lock_release>
 8002d34:	230c      	movs	r3, #12
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	e7ef      	b.n	8002d1a <__sfp+0x66>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	08004060 	.word	0x08004060
 8002d40:	ffff0001 	.word	0xffff0001

08002d44 <fiprintf>:
 8002d44:	b40e      	push	{r1, r2, r3}
 8002d46:	b503      	push	{r0, r1, lr}
 8002d48:	0001      	movs	r1, r0
 8002d4a:	ab03      	add	r3, sp, #12
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <fiprintf+0x1c>)
 8002d4e:	cb04      	ldmia	r3!, {r2}
 8002d50:	6800      	ldr	r0, [r0, #0]
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	f000 fab2 	bl	80032bc <_vfiprintf_r>
 8002d58:	b002      	add	sp, #8
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	b003      	add	sp, #12
 8002d5e:	4718      	bx	r3
 8002d60:	20000004 	.word	0x20000004

08002d64 <_fwalk_reent>:
 8002d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d66:	0004      	movs	r4, r0
 8002d68:	0006      	movs	r6, r0
 8002d6a:	2700      	movs	r7, #0
 8002d6c:	9101      	str	r1, [sp, #4]
 8002d6e:	3448      	adds	r4, #72	; 0x48
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	68a5      	ldr	r5, [r4, #8]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	9b00      	ldr	r3, [sp, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	d504      	bpl.n	8002d88 <_fwalk_reent+0x24>
 8002d7e:	6824      	ldr	r4, [r4, #0]
 8002d80:	2c00      	cmp	r4, #0
 8002d82:	d1f5      	bne.n	8002d70 <_fwalk_reent+0xc>
 8002d84:	0038      	movs	r0, r7
 8002d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d88:	89ab      	ldrh	r3, [r5, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d908      	bls.n	8002da0 <_fwalk_reent+0x3c>
 8002d8e:	220e      	movs	r2, #14
 8002d90:	5eab      	ldrsh	r3, [r5, r2]
 8002d92:	3301      	adds	r3, #1
 8002d94:	d004      	beq.n	8002da0 <_fwalk_reent+0x3c>
 8002d96:	0029      	movs	r1, r5
 8002d98:	0030      	movs	r0, r6
 8002d9a:	9b01      	ldr	r3, [sp, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	4307      	orrs	r7, r0
 8002da0:	3568      	adds	r5, #104	; 0x68
 8002da2:	e7e8      	b.n	8002d76 <_fwalk_reent+0x12>

08002da4 <_gettimeofday_r>:
 8002da4:	2300      	movs	r3, #0
 8002da6:	b570      	push	{r4, r5, r6, lr}
 8002da8:	4d06      	ldr	r5, [pc, #24]	; (8002dc4 <_gettimeofday_r+0x20>)
 8002daa:	0004      	movs	r4, r0
 8002dac:	0008      	movs	r0, r1
 8002dae:	0011      	movs	r1, r2
 8002db0:	602b      	str	r3, [r5, #0]
 8002db2:	f001 f8d7 	bl	8003f64 <_gettimeofday>
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	d103      	bne.n	8002dc2 <_gettimeofday_r+0x1e>
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d000      	beq.n	8002dc2 <_gettimeofday_r+0x1e>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	2000009c 	.word	0x2000009c

08002dc8 <__retarget_lock_init_recursive>:
 8002dc8:	4770      	bx	lr

08002dca <__retarget_lock_acquire_recursive>:
 8002dca:	4770      	bx	lr

08002dcc <__retarget_lock_release_recursive>:
 8002dcc:	4770      	bx	lr
	...

08002dd0 <malloc>:
 8002dd0:	b510      	push	{r4, lr}
 8002dd2:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <malloc+0x10>)
 8002dd4:	0001      	movs	r1, r0
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	f000 f870 	bl	8002ebc <_malloc_r>
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	20000004 	.word	0x20000004

08002de4 <_free_r>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	0005      	movs	r5, r0
 8002de8:	2900      	cmp	r1, #0
 8002dea:	d010      	beq.n	8002e0e <_free_r+0x2a>
 8002dec:	1f0c      	subs	r4, r1, #4
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	da00      	bge.n	8002df6 <_free_r+0x12>
 8002df4:	18e4      	adds	r4, r4, r3
 8002df6:	0028      	movs	r0, r5
 8002df8:	f000 ffea 	bl	8003dd0 <__malloc_lock>
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <_free_r+0x90>)
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <_free_r+0x2c>
 8002e04:	6063      	str	r3, [r4, #4]
 8002e06:	6014      	str	r4, [r2, #0]
 8002e08:	0028      	movs	r0, r5
 8002e0a:	f000 ffe9 	bl	8003de0 <__malloc_unlock>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	d908      	bls.n	8002e26 <_free_r+0x42>
 8002e14:	6821      	ldr	r1, [r4, #0]
 8002e16:	1860      	adds	r0, r4, r1
 8002e18:	4283      	cmp	r3, r0
 8002e1a:	d1f3      	bne.n	8002e04 <_free_r+0x20>
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	1841      	adds	r1, r0, r1
 8002e22:	6021      	str	r1, [r4, #0]
 8002e24:	e7ee      	b.n	8002e04 <_free_r+0x20>
 8002e26:	001a      	movs	r2, r3
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <_free_r+0x4e>
 8002e2e:	42a3      	cmp	r3, r4
 8002e30:	d9f9      	bls.n	8002e26 <_free_r+0x42>
 8002e32:	6811      	ldr	r1, [r2, #0]
 8002e34:	1850      	adds	r0, r2, r1
 8002e36:	42a0      	cmp	r0, r4
 8002e38:	d10b      	bne.n	8002e52 <_free_r+0x6e>
 8002e3a:	6820      	ldr	r0, [r4, #0]
 8002e3c:	1809      	adds	r1, r1, r0
 8002e3e:	1850      	adds	r0, r2, r1
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	4283      	cmp	r3, r0
 8002e44:	d1e0      	bne.n	8002e08 <_free_r+0x24>
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	1841      	adds	r1, r0, r1
 8002e4c:	6011      	str	r1, [r2, #0]
 8002e4e:	6053      	str	r3, [r2, #4]
 8002e50:	e7da      	b.n	8002e08 <_free_r+0x24>
 8002e52:	42a0      	cmp	r0, r4
 8002e54:	d902      	bls.n	8002e5c <_free_r+0x78>
 8002e56:	230c      	movs	r3, #12
 8002e58:	602b      	str	r3, [r5, #0]
 8002e5a:	e7d5      	b.n	8002e08 <_free_r+0x24>
 8002e5c:	6821      	ldr	r1, [r4, #0]
 8002e5e:	1860      	adds	r0, r4, r1
 8002e60:	4283      	cmp	r3, r0
 8002e62:	d103      	bne.n	8002e6c <_free_r+0x88>
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	1841      	adds	r1, r0, r1
 8002e6a:	6021      	str	r1, [r4, #0]
 8002e6c:	6063      	str	r3, [r4, #4]
 8002e6e:	6054      	str	r4, [r2, #4]
 8002e70:	e7ca      	b.n	8002e08 <_free_r+0x24>
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	20000094 	.word	0x20000094

08002e78 <sbrk_aligned>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0f      	ldr	r6, [pc, #60]	; (8002eb8 <sbrk_aligned+0x40>)
 8002e7c:	000d      	movs	r5, r1
 8002e7e:	6831      	ldr	r1, [r6, #0]
 8002e80:	0004      	movs	r4, r0
 8002e82:	2900      	cmp	r1, #0
 8002e84:	d102      	bne.n	8002e8c <sbrk_aligned+0x14>
 8002e86:	f000 fcd5 	bl	8003834 <_sbrk_r>
 8002e8a:	6030      	str	r0, [r6, #0]
 8002e8c:	0029      	movs	r1, r5
 8002e8e:	0020      	movs	r0, r4
 8002e90:	f000 fcd0 	bl	8003834 <_sbrk_r>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d00a      	beq.n	8002eae <sbrk_aligned+0x36>
 8002e98:	2303      	movs	r3, #3
 8002e9a:	1cc5      	adds	r5, r0, #3
 8002e9c:	439d      	bics	r5, r3
 8002e9e:	42a8      	cmp	r0, r5
 8002ea0:	d007      	beq.n	8002eb2 <sbrk_aligned+0x3a>
 8002ea2:	1a29      	subs	r1, r5, r0
 8002ea4:	0020      	movs	r0, r4
 8002ea6:	f000 fcc5 	bl	8003834 <_sbrk_r>
 8002eaa:	1c43      	adds	r3, r0, #1
 8002eac:	d101      	bne.n	8002eb2 <sbrk_aligned+0x3a>
 8002eae:	2501      	movs	r5, #1
 8002eb0:	426d      	negs	r5, r5
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	20000098 	.word	0x20000098

08002ebc <_malloc_r>:
 8002ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	1ccb      	adds	r3, r1, #3
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	0006      	movs	r6, r0
 8002ec8:	001f      	movs	r7, r3
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d232      	bcs.n	8002f34 <_malloc_r+0x78>
 8002ece:	270c      	movs	r7, #12
 8002ed0:	42b9      	cmp	r1, r7
 8002ed2:	d831      	bhi.n	8002f38 <_malloc_r+0x7c>
 8002ed4:	0030      	movs	r0, r6
 8002ed6:	f000 ff7b 	bl	8003dd0 <__malloc_lock>
 8002eda:	4d32      	ldr	r5, [pc, #200]	; (8002fa4 <_malloc_r+0xe8>)
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	001c      	movs	r4, r3
 8002ee0:	2c00      	cmp	r4, #0
 8002ee2:	d12e      	bne.n	8002f42 <_malloc_r+0x86>
 8002ee4:	0039      	movs	r1, r7
 8002ee6:	0030      	movs	r0, r6
 8002ee8:	f7ff ffc6 	bl	8002e78 <sbrk_aligned>
 8002eec:	0004      	movs	r4, r0
 8002eee:	1c43      	adds	r3, r0, #1
 8002ef0:	d11e      	bne.n	8002f30 <_malloc_r+0x74>
 8002ef2:	682c      	ldr	r4, [r5, #0]
 8002ef4:	0025      	movs	r5, r4
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d14a      	bne.n	8002f90 <_malloc_r+0xd4>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	0029      	movs	r1, r5
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	0030      	movs	r0, r6
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	f000 fc96 	bl	8003834 <_sbrk_r>
 8002f08:	9b01      	ldr	r3, [sp, #4]
 8002f0a:	4283      	cmp	r3, r0
 8002f0c:	d143      	bne.n	8002f96 <_malloc_r+0xda>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	3703      	adds	r7, #3
 8002f12:	1aff      	subs	r7, r7, r3
 8002f14:	2303      	movs	r3, #3
 8002f16:	439f      	bics	r7, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	2f0c      	cmp	r7, #12
 8002f1c:	d200      	bcs.n	8002f20 <_malloc_r+0x64>
 8002f1e:	270c      	movs	r7, #12
 8002f20:	0039      	movs	r1, r7
 8002f22:	0030      	movs	r0, r6
 8002f24:	f7ff ffa8 	bl	8002e78 <sbrk_aligned>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d034      	beq.n	8002f96 <_malloc_r+0xda>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	19df      	adds	r7, r3, r7
 8002f30:	6027      	str	r7, [r4, #0]
 8002f32:	e013      	b.n	8002f5c <_malloc_r+0xa0>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	dacb      	bge.n	8002ed0 <_malloc_r+0x14>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	2500      	movs	r5, #0
 8002f3c:	6033      	str	r3, [r6, #0]
 8002f3e:	0028      	movs	r0, r5
 8002f40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	1bd1      	subs	r1, r2, r7
 8002f46:	d420      	bmi.n	8002f8a <_malloc_r+0xce>
 8002f48:	290b      	cmp	r1, #11
 8002f4a:	d917      	bls.n	8002f7c <_malloc_r+0xc0>
 8002f4c:	19e2      	adds	r2, r4, r7
 8002f4e:	6027      	str	r7, [r4, #0]
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	d111      	bne.n	8002f78 <_malloc_r+0xbc>
 8002f54:	602a      	str	r2, [r5, #0]
 8002f56:	6863      	ldr	r3, [r4, #4]
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	6053      	str	r3, [r2, #4]
 8002f5c:	0030      	movs	r0, r6
 8002f5e:	0025      	movs	r5, r4
 8002f60:	f000 ff3e 	bl	8003de0 <__malloc_unlock>
 8002f64:	2207      	movs	r2, #7
 8002f66:	350b      	adds	r5, #11
 8002f68:	1d23      	adds	r3, r4, #4
 8002f6a:	4395      	bics	r5, r2
 8002f6c:	1aea      	subs	r2, r5, r3
 8002f6e:	429d      	cmp	r5, r3
 8002f70:	d0e5      	beq.n	8002f3e <_malloc_r+0x82>
 8002f72:	1b5b      	subs	r3, r3, r5
 8002f74:	50a3      	str	r3, [r4, r2]
 8002f76:	e7e2      	b.n	8002f3e <_malloc_r+0x82>
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e7ec      	b.n	8002f56 <_malloc_r+0x9a>
 8002f7c:	6862      	ldr	r2, [r4, #4]
 8002f7e:	42a3      	cmp	r3, r4
 8002f80:	d101      	bne.n	8002f86 <_malloc_r+0xca>
 8002f82:	602a      	str	r2, [r5, #0]
 8002f84:	e7ea      	b.n	8002f5c <_malloc_r+0xa0>
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e7e8      	b.n	8002f5c <_malloc_r+0xa0>
 8002f8a:	0023      	movs	r3, r4
 8002f8c:	6864      	ldr	r4, [r4, #4]
 8002f8e:	e7a7      	b.n	8002ee0 <_malloc_r+0x24>
 8002f90:	002c      	movs	r4, r5
 8002f92:	686d      	ldr	r5, [r5, #4]
 8002f94:	e7af      	b.n	8002ef6 <_malloc_r+0x3a>
 8002f96:	230c      	movs	r3, #12
 8002f98:	0030      	movs	r0, r6
 8002f9a:	6033      	str	r3, [r6, #0]
 8002f9c:	f000 ff20 	bl	8003de0 <__malloc_unlock>
 8002fa0:	e7cd      	b.n	8002f3e <_malloc_r+0x82>
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	20000094 	.word	0x20000094

08002fa8 <__ssputs_r>:
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	688e      	ldr	r6, [r1, #8]
 8002fac:	b085      	sub	sp, #20
 8002fae:	0007      	movs	r7, r0
 8002fb0:	000c      	movs	r4, r1
 8002fb2:	9203      	str	r2, [sp, #12]
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	429e      	cmp	r6, r3
 8002fb8:	d83c      	bhi.n	8003034 <__ssputs_r+0x8c>
 8002fba:	2390      	movs	r3, #144	; 0x90
 8002fbc:	898a      	ldrh	r2, [r1, #12]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	421a      	tst	r2, r3
 8002fc2:	d034      	beq.n	800302e <__ssputs_r+0x86>
 8002fc4:	6909      	ldr	r1, [r1, #16]
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	6960      	ldr	r0, [r4, #20]
 8002fca:	1a5b      	subs	r3, r3, r1
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	2303      	movs	r3, #3
 8002fd0:	4343      	muls	r3, r0
 8002fd2:	0fdd      	lsrs	r5, r3, #31
 8002fd4:	18ed      	adds	r5, r5, r3
 8002fd6:	9b01      	ldr	r3, [sp, #4]
 8002fd8:	9802      	ldr	r0, [sp, #8]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	181b      	adds	r3, r3, r0
 8002fde:	106d      	asrs	r5, r5, #1
 8002fe0:	42ab      	cmp	r3, r5
 8002fe2:	d900      	bls.n	8002fe6 <__ssputs_r+0x3e>
 8002fe4:	001d      	movs	r5, r3
 8002fe6:	0553      	lsls	r3, r2, #21
 8002fe8:	d532      	bpl.n	8003050 <__ssputs_r+0xa8>
 8002fea:	0029      	movs	r1, r5
 8002fec:	0038      	movs	r0, r7
 8002fee:	f7ff ff65 	bl	8002ebc <_malloc_r>
 8002ff2:	1e06      	subs	r6, r0, #0
 8002ff4:	d109      	bne.n	800300a <__ssputs_r+0x62>
 8002ff6:	230c      	movs	r3, #12
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	2340      	movs	r3, #64	; 0x40
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	89a2      	ldrh	r2, [r4, #12]
 8003000:	4240      	negs	r0, r0
 8003002:	4313      	orrs	r3, r2
 8003004:	81a3      	strh	r3, [r4, #12]
 8003006:	b005      	add	sp, #20
 8003008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300a:	9a02      	ldr	r2, [sp, #8]
 800300c:	6921      	ldr	r1, [r4, #16]
 800300e:	f000 fec2 	bl	8003d96 <memcpy>
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <__ssputs_r+0xc0>)
 8003016:	401a      	ands	r2, r3
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	4313      	orrs	r3, r2
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	9b02      	ldr	r3, [sp, #8]
 8003020:	6126      	str	r6, [r4, #16]
 8003022:	18f6      	adds	r6, r6, r3
 8003024:	6026      	str	r6, [r4, #0]
 8003026:	6165      	str	r5, [r4, #20]
 8003028:	9e01      	ldr	r6, [sp, #4]
 800302a:	1aed      	subs	r5, r5, r3
 800302c:	60a5      	str	r5, [r4, #8]
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	429e      	cmp	r6, r3
 8003032:	d900      	bls.n	8003036 <__ssputs_r+0x8e>
 8003034:	9e01      	ldr	r6, [sp, #4]
 8003036:	0032      	movs	r2, r6
 8003038:	9903      	ldr	r1, [sp, #12]
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	f000 feb4 	bl	8003da8 <memmove>
 8003040:	68a3      	ldr	r3, [r4, #8]
 8003042:	2000      	movs	r0, #0
 8003044:	1b9b      	subs	r3, r3, r6
 8003046:	60a3      	str	r3, [r4, #8]
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	199e      	adds	r6, r3, r6
 800304c:	6026      	str	r6, [r4, #0]
 800304e:	e7da      	b.n	8003006 <__ssputs_r+0x5e>
 8003050:	002a      	movs	r2, r5
 8003052:	0038      	movs	r0, r7
 8003054:	f000 fecc 	bl	8003df0 <_realloc_r>
 8003058:	1e06      	subs	r6, r0, #0
 800305a:	d1e0      	bne.n	800301e <__ssputs_r+0x76>
 800305c:	0038      	movs	r0, r7
 800305e:	6921      	ldr	r1, [r4, #16]
 8003060:	f7ff fec0 	bl	8002de4 <_free_r>
 8003064:	e7c7      	b.n	8002ff6 <__ssputs_r+0x4e>
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	fffffb7f 	.word	0xfffffb7f

0800306c <_svfiprintf_r>:
 800306c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306e:	b0a1      	sub	sp, #132	; 0x84
 8003070:	9003      	str	r0, [sp, #12]
 8003072:	001d      	movs	r5, r3
 8003074:	898b      	ldrh	r3, [r1, #12]
 8003076:	000f      	movs	r7, r1
 8003078:	0016      	movs	r6, r2
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	d511      	bpl.n	80030a2 <_svfiprintf_r+0x36>
 800307e:	690b      	ldr	r3, [r1, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <_svfiprintf_r+0x36>
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	f7ff ff19 	bl	8002ebc <_malloc_r>
 800308a:	6038      	str	r0, [r7, #0]
 800308c:	6138      	str	r0, [r7, #16]
 800308e:	2800      	cmp	r0, #0
 8003090:	d105      	bne.n	800309e <_svfiprintf_r+0x32>
 8003092:	230c      	movs	r3, #12
 8003094:	9a03      	ldr	r2, [sp, #12]
 8003096:	3801      	subs	r0, #1
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	b021      	add	sp, #132	; 0x84
 800309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800309e:	2340      	movs	r3, #64	; 0x40
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	2300      	movs	r3, #0
 80030a4:	ac08      	add	r4, sp, #32
 80030a6:	6163      	str	r3, [r4, #20]
 80030a8:	3320      	adds	r3, #32
 80030aa:	7663      	strb	r3, [r4, #25]
 80030ac:	3310      	adds	r3, #16
 80030ae:	76a3      	strb	r3, [r4, #26]
 80030b0:	9507      	str	r5, [sp, #28]
 80030b2:	0035      	movs	r5, r6
 80030b4:	782b      	ldrb	r3, [r5, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <_svfiprintf_r+0x52>
 80030ba:	2b25      	cmp	r3, #37	; 0x25
 80030bc:	d147      	bne.n	800314e <_svfiprintf_r+0xe2>
 80030be:	1bab      	subs	r3, r5, r6
 80030c0:	9305      	str	r3, [sp, #20]
 80030c2:	42b5      	cmp	r5, r6
 80030c4:	d00c      	beq.n	80030e0 <_svfiprintf_r+0x74>
 80030c6:	0032      	movs	r2, r6
 80030c8:	0039      	movs	r1, r7
 80030ca:	9803      	ldr	r0, [sp, #12]
 80030cc:	f7ff ff6c 	bl	8002fa8 <__ssputs_r>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d100      	bne.n	80030d6 <_svfiprintf_r+0x6a>
 80030d4:	e0ae      	b.n	8003234 <_svfiprintf_r+0x1c8>
 80030d6:	6962      	ldr	r2, [r4, #20]
 80030d8:	9b05      	ldr	r3, [sp, #20]
 80030da:	4694      	mov	ip, r2
 80030dc:	4463      	add	r3, ip
 80030de:	6163      	str	r3, [r4, #20]
 80030e0:	782b      	ldrb	r3, [r5, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d100      	bne.n	80030e8 <_svfiprintf_r+0x7c>
 80030e6:	e0a5      	b.n	8003234 <_svfiprintf_r+0x1c8>
 80030e8:	2201      	movs	r2, #1
 80030ea:	2300      	movs	r3, #0
 80030ec:	4252      	negs	r2, r2
 80030ee:	6062      	str	r2, [r4, #4]
 80030f0:	a904      	add	r1, sp, #16
 80030f2:	3254      	adds	r2, #84	; 0x54
 80030f4:	1852      	adds	r2, r2, r1
 80030f6:	1c6e      	adds	r6, r5, #1
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	60e3      	str	r3, [r4, #12]
 80030fc:	60a3      	str	r3, [r4, #8]
 80030fe:	7013      	strb	r3, [r2, #0]
 8003100:	65a3      	str	r3, [r4, #88]	; 0x58
 8003102:	2205      	movs	r2, #5
 8003104:	7831      	ldrb	r1, [r6, #0]
 8003106:	4854      	ldr	r0, [pc, #336]	; (8003258 <_svfiprintf_r+0x1ec>)
 8003108:	f000 fe3a 	bl	8003d80 <memchr>
 800310c:	1c75      	adds	r5, r6, #1
 800310e:	2800      	cmp	r0, #0
 8003110:	d11f      	bne.n	8003152 <_svfiprintf_r+0xe6>
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	06d3      	lsls	r3, r2, #27
 8003116:	d504      	bpl.n	8003122 <_svfiprintf_r+0xb6>
 8003118:	2353      	movs	r3, #83	; 0x53
 800311a:	a904      	add	r1, sp, #16
 800311c:	185b      	adds	r3, r3, r1
 800311e:	2120      	movs	r1, #32
 8003120:	7019      	strb	r1, [r3, #0]
 8003122:	0713      	lsls	r3, r2, #28
 8003124:	d504      	bpl.n	8003130 <_svfiprintf_r+0xc4>
 8003126:	2353      	movs	r3, #83	; 0x53
 8003128:	a904      	add	r1, sp, #16
 800312a:	185b      	adds	r3, r3, r1
 800312c:	212b      	movs	r1, #43	; 0x2b
 800312e:	7019      	strb	r1, [r3, #0]
 8003130:	7833      	ldrb	r3, [r6, #0]
 8003132:	2b2a      	cmp	r3, #42	; 0x2a
 8003134:	d016      	beq.n	8003164 <_svfiprintf_r+0xf8>
 8003136:	0035      	movs	r5, r6
 8003138:	2100      	movs	r1, #0
 800313a:	200a      	movs	r0, #10
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	782a      	ldrb	r2, [r5, #0]
 8003140:	1c6e      	adds	r6, r5, #1
 8003142:	3a30      	subs	r2, #48	; 0x30
 8003144:	2a09      	cmp	r2, #9
 8003146:	d94e      	bls.n	80031e6 <_svfiprintf_r+0x17a>
 8003148:	2900      	cmp	r1, #0
 800314a:	d111      	bne.n	8003170 <_svfiprintf_r+0x104>
 800314c:	e017      	b.n	800317e <_svfiprintf_r+0x112>
 800314e:	3501      	adds	r5, #1
 8003150:	e7b0      	b.n	80030b4 <_svfiprintf_r+0x48>
 8003152:	4b41      	ldr	r3, [pc, #260]	; (8003258 <_svfiprintf_r+0x1ec>)
 8003154:	6822      	ldr	r2, [r4, #0]
 8003156:	1ac0      	subs	r0, r0, r3
 8003158:	2301      	movs	r3, #1
 800315a:	4083      	lsls	r3, r0
 800315c:	4313      	orrs	r3, r2
 800315e:	002e      	movs	r6, r5
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	e7ce      	b.n	8003102 <_svfiprintf_r+0x96>
 8003164:	9b07      	ldr	r3, [sp, #28]
 8003166:	1d19      	adds	r1, r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	9107      	str	r1, [sp, #28]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db01      	blt.n	8003174 <_svfiprintf_r+0x108>
 8003170:	930b      	str	r3, [sp, #44]	; 0x2c
 8003172:	e004      	b.n	800317e <_svfiprintf_r+0x112>
 8003174:	425b      	negs	r3, r3
 8003176:	60e3      	str	r3, [r4, #12]
 8003178:	2302      	movs	r3, #2
 800317a:	4313      	orrs	r3, r2
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	782b      	ldrb	r3, [r5, #0]
 8003180:	2b2e      	cmp	r3, #46	; 0x2e
 8003182:	d10a      	bne.n	800319a <_svfiprintf_r+0x12e>
 8003184:	786b      	ldrb	r3, [r5, #1]
 8003186:	2b2a      	cmp	r3, #42	; 0x2a
 8003188:	d135      	bne.n	80031f6 <_svfiprintf_r+0x18a>
 800318a:	9b07      	ldr	r3, [sp, #28]
 800318c:	3502      	adds	r5, #2
 800318e:	1d1a      	adds	r2, r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	9207      	str	r2, [sp, #28]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db2b      	blt.n	80031f0 <_svfiprintf_r+0x184>
 8003198:	9309      	str	r3, [sp, #36]	; 0x24
 800319a:	4e30      	ldr	r6, [pc, #192]	; (800325c <_svfiprintf_r+0x1f0>)
 800319c:	2203      	movs	r2, #3
 800319e:	0030      	movs	r0, r6
 80031a0:	7829      	ldrb	r1, [r5, #0]
 80031a2:	f000 fded 	bl	8003d80 <memchr>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d006      	beq.n	80031b8 <_svfiprintf_r+0x14c>
 80031aa:	2340      	movs	r3, #64	; 0x40
 80031ac:	1b80      	subs	r0, r0, r6
 80031ae:	4083      	lsls	r3, r0
 80031b0:	6822      	ldr	r2, [r4, #0]
 80031b2:	3501      	adds	r5, #1
 80031b4:	4313      	orrs	r3, r2
 80031b6:	6023      	str	r3, [r4, #0]
 80031b8:	7829      	ldrb	r1, [r5, #0]
 80031ba:	2206      	movs	r2, #6
 80031bc:	4828      	ldr	r0, [pc, #160]	; (8003260 <_svfiprintf_r+0x1f4>)
 80031be:	1c6e      	adds	r6, r5, #1
 80031c0:	7621      	strb	r1, [r4, #24]
 80031c2:	f000 fddd 	bl	8003d80 <memchr>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d03c      	beq.n	8003244 <_svfiprintf_r+0x1d8>
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <_svfiprintf_r+0x1f8>)
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d125      	bne.n	800321c <_svfiprintf_r+0x1b0>
 80031d0:	2207      	movs	r2, #7
 80031d2:	9b07      	ldr	r3, [sp, #28]
 80031d4:	3307      	adds	r3, #7
 80031d6:	4393      	bics	r3, r2
 80031d8:	3308      	adds	r3, #8
 80031da:	9307      	str	r3, [sp, #28]
 80031dc:	6963      	ldr	r3, [r4, #20]
 80031de:	9a04      	ldr	r2, [sp, #16]
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	6163      	str	r3, [r4, #20]
 80031e4:	e765      	b.n	80030b2 <_svfiprintf_r+0x46>
 80031e6:	4343      	muls	r3, r0
 80031e8:	0035      	movs	r5, r6
 80031ea:	2101      	movs	r1, #1
 80031ec:	189b      	adds	r3, r3, r2
 80031ee:	e7a6      	b.n	800313e <_svfiprintf_r+0xd2>
 80031f0:	2301      	movs	r3, #1
 80031f2:	425b      	negs	r3, r3
 80031f4:	e7d0      	b.n	8003198 <_svfiprintf_r+0x12c>
 80031f6:	2300      	movs	r3, #0
 80031f8:	200a      	movs	r0, #10
 80031fa:	001a      	movs	r2, r3
 80031fc:	3501      	adds	r5, #1
 80031fe:	6063      	str	r3, [r4, #4]
 8003200:	7829      	ldrb	r1, [r5, #0]
 8003202:	1c6e      	adds	r6, r5, #1
 8003204:	3930      	subs	r1, #48	; 0x30
 8003206:	2909      	cmp	r1, #9
 8003208:	d903      	bls.n	8003212 <_svfiprintf_r+0x1a6>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0c5      	beq.n	800319a <_svfiprintf_r+0x12e>
 800320e:	9209      	str	r2, [sp, #36]	; 0x24
 8003210:	e7c3      	b.n	800319a <_svfiprintf_r+0x12e>
 8003212:	4342      	muls	r2, r0
 8003214:	0035      	movs	r5, r6
 8003216:	2301      	movs	r3, #1
 8003218:	1852      	adds	r2, r2, r1
 800321a:	e7f1      	b.n	8003200 <_svfiprintf_r+0x194>
 800321c:	ab07      	add	r3, sp, #28
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	003a      	movs	r2, r7
 8003222:	0021      	movs	r1, r4
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <_svfiprintf_r+0x1fc>)
 8003226:	9803      	ldr	r0, [sp, #12]
 8003228:	e000      	b.n	800322c <_svfiprintf_r+0x1c0>
 800322a:	bf00      	nop
 800322c:	9004      	str	r0, [sp, #16]
 800322e:	9b04      	ldr	r3, [sp, #16]
 8003230:	3301      	adds	r3, #1
 8003232:	d1d3      	bne.n	80031dc <_svfiprintf_r+0x170>
 8003234:	89bb      	ldrh	r3, [r7, #12]
 8003236:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003238:	065b      	lsls	r3, r3, #25
 800323a:	d400      	bmi.n	800323e <_svfiprintf_r+0x1d2>
 800323c:	e72d      	b.n	800309a <_svfiprintf_r+0x2e>
 800323e:	2001      	movs	r0, #1
 8003240:	4240      	negs	r0, r0
 8003242:	e72a      	b.n	800309a <_svfiprintf_r+0x2e>
 8003244:	ab07      	add	r3, sp, #28
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	003a      	movs	r2, r7
 800324a:	0021      	movs	r1, r4
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <_svfiprintf_r+0x1fc>)
 800324e:	9803      	ldr	r0, [sp, #12]
 8003250:	f000 f9de 	bl	8003610 <_printf_i>
 8003254:	e7ea      	b.n	800322c <_svfiprintf_r+0x1c0>
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	08004174 	.word	0x08004174
 800325c:	0800417a 	.word	0x0800417a
 8003260:	0800417e 	.word	0x0800417e
 8003264:	00000000 	.word	0x00000000
 8003268:	08002fa9 	.word	0x08002fa9

0800326c <__sfputc_r>:
 800326c:	6893      	ldr	r3, [r2, #8]
 800326e:	b510      	push	{r4, lr}
 8003270:	3b01      	subs	r3, #1
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da04      	bge.n	8003282 <__sfputc_r+0x16>
 8003278:	6994      	ldr	r4, [r2, #24]
 800327a:	42a3      	cmp	r3, r4
 800327c:	db07      	blt.n	800328e <__sfputc_r+0x22>
 800327e:	290a      	cmp	r1, #10
 8003280:	d005      	beq.n	800328e <__sfputc_r+0x22>
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	1c58      	adds	r0, r3, #1
 8003286:	6010      	str	r0, [r2, #0]
 8003288:	7019      	strb	r1, [r3, #0]
 800328a:	0008      	movs	r0, r1
 800328c:	bd10      	pop	{r4, pc}
 800328e:	f000 fb2f 	bl	80038f0 <__swbuf_r>
 8003292:	0001      	movs	r1, r0
 8003294:	e7f9      	b.n	800328a <__sfputc_r+0x1e>

08003296 <__sfputs_r>:
 8003296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003298:	0006      	movs	r6, r0
 800329a:	000f      	movs	r7, r1
 800329c:	0014      	movs	r4, r2
 800329e:	18d5      	adds	r5, r2, r3
 80032a0:	42ac      	cmp	r4, r5
 80032a2:	d101      	bne.n	80032a8 <__sfputs_r+0x12>
 80032a4:	2000      	movs	r0, #0
 80032a6:	e007      	b.n	80032b8 <__sfputs_r+0x22>
 80032a8:	7821      	ldrb	r1, [r4, #0]
 80032aa:	003a      	movs	r2, r7
 80032ac:	0030      	movs	r0, r6
 80032ae:	f7ff ffdd 	bl	800326c <__sfputc_r>
 80032b2:	3401      	adds	r4, #1
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d1f3      	bne.n	80032a0 <__sfputs_r+0xa>
 80032b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032bc <_vfiprintf_r>:
 80032bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032be:	b0a1      	sub	sp, #132	; 0x84
 80032c0:	0006      	movs	r6, r0
 80032c2:	000c      	movs	r4, r1
 80032c4:	001f      	movs	r7, r3
 80032c6:	9203      	str	r2, [sp, #12]
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d004      	beq.n	80032d6 <_vfiprintf_r+0x1a>
 80032cc:	6983      	ldr	r3, [r0, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <_vfiprintf_r+0x1a>
 80032d2:	f7ff fcb7 	bl	8002c44 <__sinit>
 80032d6:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <_vfiprintf_r+0x254>)
 80032d8:	429c      	cmp	r4, r3
 80032da:	d11c      	bne.n	8003316 <_vfiprintf_r+0x5a>
 80032dc:	6874      	ldr	r4, [r6, #4]
 80032de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032e0:	07db      	lsls	r3, r3, #31
 80032e2:	d405      	bmi.n	80032f0 <_vfiprintf_r+0x34>
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	059b      	lsls	r3, r3, #22
 80032e8:	d402      	bmi.n	80032f0 <_vfiprintf_r+0x34>
 80032ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032ec:	f7ff fd6d 	bl	8002dca <__retarget_lock_acquire_recursive>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	071b      	lsls	r3, r3, #28
 80032f4:	d502      	bpl.n	80032fc <_vfiprintf_r+0x40>
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11d      	bne.n	8003338 <_vfiprintf_r+0x7c>
 80032fc:	0021      	movs	r1, r4
 80032fe:	0030      	movs	r0, r6
 8003300:	f000 fb60 	bl	80039c4 <__swsetup_r>
 8003304:	2800      	cmp	r0, #0
 8003306:	d017      	beq.n	8003338 <_vfiprintf_r+0x7c>
 8003308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800330a:	07db      	lsls	r3, r3, #31
 800330c:	d50d      	bpl.n	800332a <_vfiprintf_r+0x6e>
 800330e:	2001      	movs	r0, #1
 8003310:	4240      	negs	r0, r0
 8003312:	b021      	add	sp, #132	; 0x84
 8003314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <_vfiprintf_r+0x258>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d101      	bne.n	8003320 <_vfiprintf_r+0x64>
 800331c:	68b4      	ldr	r4, [r6, #8]
 800331e:	e7de      	b.n	80032de <_vfiprintf_r+0x22>
 8003320:	4b7d      	ldr	r3, [pc, #500]	; (8003518 <_vfiprintf_r+0x25c>)
 8003322:	429c      	cmp	r4, r3
 8003324:	d1db      	bne.n	80032de <_vfiprintf_r+0x22>
 8003326:	68f4      	ldr	r4, [r6, #12]
 8003328:	e7d9      	b.n	80032de <_vfiprintf_r+0x22>
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	059b      	lsls	r3, r3, #22
 800332e:	d4ee      	bmi.n	800330e <_vfiprintf_r+0x52>
 8003330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003332:	f7ff fd4b 	bl	8002dcc <__retarget_lock_release_recursive>
 8003336:	e7ea      	b.n	800330e <_vfiprintf_r+0x52>
 8003338:	2300      	movs	r3, #0
 800333a:	ad08      	add	r5, sp, #32
 800333c:	616b      	str	r3, [r5, #20]
 800333e:	3320      	adds	r3, #32
 8003340:	766b      	strb	r3, [r5, #25]
 8003342:	3310      	adds	r3, #16
 8003344:	76ab      	strb	r3, [r5, #26]
 8003346:	9707      	str	r7, [sp, #28]
 8003348:	9f03      	ldr	r7, [sp, #12]
 800334a:	783b      	ldrb	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <_vfiprintf_r+0x98>
 8003350:	2b25      	cmp	r3, #37	; 0x25
 8003352:	d14e      	bne.n	80033f2 <_vfiprintf_r+0x136>
 8003354:	9b03      	ldr	r3, [sp, #12]
 8003356:	1afb      	subs	r3, r7, r3
 8003358:	9305      	str	r3, [sp, #20]
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	429f      	cmp	r7, r3
 800335e:	d00d      	beq.n	800337c <_vfiprintf_r+0xc0>
 8003360:	9b05      	ldr	r3, [sp, #20]
 8003362:	0021      	movs	r1, r4
 8003364:	0030      	movs	r0, r6
 8003366:	9a03      	ldr	r2, [sp, #12]
 8003368:	f7ff ff95 	bl	8003296 <__sfputs_r>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d100      	bne.n	8003372 <_vfiprintf_r+0xb6>
 8003370:	e0b5      	b.n	80034de <_vfiprintf_r+0x222>
 8003372:	696a      	ldr	r2, [r5, #20]
 8003374:	9b05      	ldr	r3, [sp, #20]
 8003376:	4694      	mov	ip, r2
 8003378:	4463      	add	r3, ip
 800337a:	616b      	str	r3, [r5, #20]
 800337c:	783b      	ldrb	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d100      	bne.n	8003384 <_vfiprintf_r+0xc8>
 8003382:	e0ac      	b.n	80034de <_vfiprintf_r+0x222>
 8003384:	2201      	movs	r2, #1
 8003386:	1c7b      	adds	r3, r7, #1
 8003388:	9303      	str	r3, [sp, #12]
 800338a:	2300      	movs	r3, #0
 800338c:	4252      	negs	r2, r2
 800338e:	606a      	str	r2, [r5, #4]
 8003390:	a904      	add	r1, sp, #16
 8003392:	3254      	adds	r2, #84	; 0x54
 8003394:	1852      	adds	r2, r2, r1
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	60eb      	str	r3, [r5, #12]
 800339a:	60ab      	str	r3, [r5, #8]
 800339c:	7013      	strb	r3, [r2, #0]
 800339e:	65ab      	str	r3, [r5, #88]	; 0x58
 80033a0:	9b03      	ldr	r3, [sp, #12]
 80033a2:	2205      	movs	r2, #5
 80033a4:	7819      	ldrb	r1, [r3, #0]
 80033a6:	485d      	ldr	r0, [pc, #372]	; (800351c <_vfiprintf_r+0x260>)
 80033a8:	f000 fcea 	bl	8003d80 <memchr>
 80033ac:	9b03      	ldr	r3, [sp, #12]
 80033ae:	1c5f      	adds	r7, r3, #1
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d120      	bne.n	80033f6 <_vfiprintf_r+0x13a>
 80033b4:	682a      	ldr	r2, [r5, #0]
 80033b6:	06d3      	lsls	r3, r2, #27
 80033b8:	d504      	bpl.n	80033c4 <_vfiprintf_r+0x108>
 80033ba:	2353      	movs	r3, #83	; 0x53
 80033bc:	a904      	add	r1, sp, #16
 80033be:	185b      	adds	r3, r3, r1
 80033c0:	2120      	movs	r1, #32
 80033c2:	7019      	strb	r1, [r3, #0]
 80033c4:	0713      	lsls	r3, r2, #28
 80033c6:	d504      	bpl.n	80033d2 <_vfiprintf_r+0x116>
 80033c8:	2353      	movs	r3, #83	; 0x53
 80033ca:	a904      	add	r1, sp, #16
 80033cc:	185b      	adds	r3, r3, r1
 80033ce:	212b      	movs	r1, #43	; 0x2b
 80033d0:	7019      	strb	r1, [r3, #0]
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b2a      	cmp	r3, #42	; 0x2a
 80033d8:	d016      	beq.n	8003408 <_vfiprintf_r+0x14c>
 80033da:	2100      	movs	r1, #0
 80033dc:	68eb      	ldr	r3, [r5, #12]
 80033de:	9f03      	ldr	r7, [sp, #12]
 80033e0:	783a      	ldrb	r2, [r7, #0]
 80033e2:	1c78      	adds	r0, r7, #1
 80033e4:	3a30      	subs	r2, #48	; 0x30
 80033e6:	4684      	mov	ip, r0
 80033e8:	2a09      	cmp	r2, #9
 80033ea:	d94f      	bls.n	800348c <_vfiprintf_r+0x1d0>
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d111      	bne.n	8003414 <_vfiprintf_r+0x158>
 80033f0:	e017      	b.n	8003422 <_vfiprintf_r+0x166>
 80033f2:	3701      	adds	r7, #1
 80033f4:	e7a9      	b.n	800334a <_vfiprintf_r+0x8e>
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <_vfiprintf_r+0x260>)
 80033f8:	682a      	ldr	r2, [r5, #0]
 80033fa:	1ac0      	subs	r0, r0, r3
 80033fc:	2301      	movs	r3, #1
 80033fe:	4083      	lsls	r3, r0
 8003400:	4313      	orrs	r3, r2
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	9703      	str	r7, [sp, #12]
 8003406:	e7cb      	b.n	80033a0 <_vfiprintf_r+0xe4>
 8003408:	9b07      	ldr	r3, [sp, #28]
 800340a:	1d19      	adds	r1, r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	9107      	str	r1, [sp, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db01      	blt.n	8003418 <_vfiprintf_r+0x15c>
 8003414:	930b      	str	r3, [sp, #44]	; 0x2c
 8003416:	e004      	b.n	8003422 <_vfiprintf_r+0x166>
 8003418:	425b      	negs	r3, r3
 800341a:	60eb      	str	r3, [r5, #12]
 800341c:	2302      	movs	r3, #2
 800341e:	4313      	orrs	r3, r2
 8003420:	602b      	str	r3, [r5, #0]
 8003422:	783b      	ldrb	r3, [r7, #0]
 8003424:	2b2e      	cmp	r3, #46	; 0x2e
 8003426:	d10a      	bne.n	800343e <_vfiprintf_r+0x182>
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b2a      	cmp	r3, #42	; 0x2a
 800342c:	d137      	bne.n	800349e <_vfiprintf_r+0x1e2>
 800342e:	9b07      	ldr	r3, [sp, #28]
 8003430:	3702      	adds	r7, #2
 8003432:	1d1a      	adds	r2, r3, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	9207      	str	r2, [sp, #28]
 8003438:	2b00      	cmp	r3, #0
 800343a:	db2d      	blt.n	8003498 <_vfiprintf_r+0x1dc>
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	2203      	movs	r2, #3
 8003440:	7839      	ldrb	r1, [r7, #0]
 8003442:	4837      	ldr	r0, [pc, #220]	; (8003520 <_vfiprintf_r+0x264>)
 8003444:	f000 fc9c 	bl	8003d80 <memchr>
 8003448:	2800      	cmp	r0, #0
 800344a:	d007      	beq.n	800345c <_vfiprintf_r+0x1a0>
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <_vfiprintf_r+0x264>)
 800344e:	682a      	ldr	r2, [r5, #0]
 8003450:	1ac0      	subs	r0, r0, r3
 8003452:	2340      	movs	r3, #64	; 0x40
 8003454:	4083      	lsls	r3, r0
 8003456:	4313      	orrs	r3, r2
 8003458:	3701      	adds	r7, #1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	7839      	ldrb	r1, [r7, #0]
 800345e:	1c7b      	adds	r3, r7, #1
 8003460:	2206      	movs	r2, #6
 8003462:	4830      	ldr	r0, [pc, #192]	; (8003524 <_vfiprintf_r+0x268>)
 8003464:	9303      	str	r3, [sp, #12]
 8003466:	7629      	strb	r1, [r5, #24]
 8003468:	f000 fc8a 	bl	8003d80 <memchr>
 800346c:	2800      	cmp	r0, #0
 800346e:	d045      	beq.n	80034fc <_vfiprintf_r+0x240>
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <_vfiprintf_r+0x26c>)
 8003472:	2b00      	cmp	r3, #0
 8003474:	d127      	bne.n	80034c6 <_vfiprintf_r+0x20a>
 8003476:	2207      	movs	r2, #7
 8003478:	9b07      	ldr	r3, [sp, #28]
 800347a:	3307      	adds	r3, #7
 800347c:	4393      	bics	r3, r2
 800347e:	3308      	adds	r3, #8
 8003480:	9307      	str	r3, [sp, #28]
 8003482:	696b      	ldr	r3, [r5, #20]
 8003484:	9a04      	ldr	r2, [sp, #16]
 8003486:	189b      	adds	r3, r3, r2
 8003488:	616b      	str	r3, [r5, #20]
 800348a:	e75d      	b.n	8003348 <_vfiprintf_r+0x8c>
 800348c:	210a      	movs	r1, #10
 800348e:	434b      	muls	r3, r1
 8003490:	4667      	mov	r7, ip
 8003492:	189b      	adds	r3, r3, r2
 8003494:	3909      	subs	r1, #9
 8003496:	e7a3      	b.n	80033e0 <_vfiprintf_r+0x124>
 8003498:	2301      	movs	r3, #1
 800349a:	425b      	negs	r3, r3
 800349c:	e7ce      	b.n	800343c <_vfiprintf_r+0x180>
 800349e:	2300      	movs	r3, #0
 80034a0:	001a      	movs	r2, r3
 80034a2:	3701      	adds	r7, #1
 80034a4:	606b      	str	r3, [r5, #4]
 80034a6:	7839      	ldrb	r1, [r7, #0]
 80034a8:	1c78      	adds	r0, r7, #1
 80034aa:	3930      	subs	r1, #48	; 0x30
 80034ac:	4684      	mov	ip, r0
 80034ae:	2909      	cmp	r1, #9
 80034b0:	d903      	bls.n	80034ba <_vfiprintf_r+0x1fe>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0c3      	beq.n	800343e <_vfiprintf_r+0x182>
 80034b6:	9209      	str	r2, [sp, #36]	; 0x24
 80034b8:	e7c1      	b.n	800343e <_vfiprintf_r+0x182>
 80034ba:	230a      	movs	r3, #10
 80034bc:	435a      	muls	r2, r3
 80034be:	4667      	mov	r7, ip
 80034c0:	1852      	adds	r2, r2, r1
 80034c2:	3b09      	subs	r3, #9
 80034c4:	e7ef      	b.n	80034a6 <_vfiprintf_r+0x1ea>
 80034c6:	ab07      	add	r3, sp, #28
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	0022      	movs	r2, r4
 80034cc:	0029      	movs	r1, r5
 80034ce:	0030      	movs	r0, r6
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <_vfiprintf_r+0x270>)
 80034d2:	e000      	b.n	80034d6 <_vfiprintf_r+0x21a>
 80034d4:	bf00      	nop
 80034d6:	9004      	str	r0, [sp, #16]
 80034d8:	9b04      	ldr	r3, [sp, #16]
 80034da:	3301      	adds	r3, #1
 80034dc:	d1d1      	bne.n	8003482 <_vfiprintf_r+0x1c6>
 80034de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034e0:	07db      	lsls	r3, r3, #31
 80034e2:	d405      	bmi.n	80034f0 <_vfiprintf_r+0x234>
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	059b      	lsls	r3, r3, #22
 80034e8:	d402      	bmi.n	80034f0 <_vfiprintf_r+0x234>
 80034ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ec:	f7ff fc6e 	bl	8002dcc <__retarget_lock_release_recursive>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	065b      	lsls	r3, r3, #25
 80034f4:	d500      	bpl.n	80034f8 <_vfiprintf_r+0x23c>
 80034f6:	e70a      	b.n	800330e <_vfiprintf_r+0x52>
 80034f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034fa:	e70a      	b.n	8003312 <_vfiprintf_r+0x56>
 80034fc:	ab07      	add	r3, sp, #28
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	0022      	movs	r2, r4
 8003502:	0029      	movs	r1, r5
 8003504:	0030      	movs	r0, r6
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <_vfiprintf_r+0x270>)
 8003508:	f000 f882 	bl	8003610 <_printf_i>
 800350c:	e7e3      	b.n	80034d6 <_vfiprintf_r+0x21a>
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	08004134 	.word	0x08004134
 8003514:	08004154 	.word	0x08004154
 8003518:	08004114 	.word	0x08004114
 800351c:	08004174 	.word	0x08004174
 8003520:	0800417a 	.word	0x0800417a
 8003524:	0800417e 	.word	0x0800417e
 8003528:	00000000 	.word	0x00000000
 800352c:	08003297 	.word	0x08003297

08003530 <_printf_common>:
 8003530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003532:	0015      	movs	r5, r2
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	688a      	ldr	r2, [r1, #8]
 8003538:	690b      	ldr	r3, [r1, #16]
 800353a:	000c      	movs	r4, r1
 800353c:	9000      	str	r0, [sp, #0]
 800353e:	4293      	cmp	r3, r2
 8003540:	da00      	bge.n	8003544 <_printf_common+0x14>
 8003542:	0013      	movs	r3, r2
 8003544:	0022      	movs	r2, r4
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	3243      	adds	r2, #67	; 0x43
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	2a00      	cmp	r2, #0
 800354e:	d001      	beq.n	8003554 <_printf_common+0x24>
 8003550:	3301      	adds	r3, #1
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	069b      	lsls	r3, r3, #26
 8003558:	d502      	bpl.n	8003560 <_printf_common+0x30>
 800355a:	682b      	ldr	r3, [r5, #0]
 800355c:	3302      	adds	r3, #2
 800355e:	602b      	str	r3, [r5, #0]
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	2306      	movs	r3, #6
 8003564:	0017      	movs	r7, r2
 8003566:	401f      	ands	r7, r3
 8003568:	421a      	tst	r2, r3
 800356a:	d027      	beq.n	80035bc <_printf_common+0x8c>
 800356c:	0023      	movs	r3, r4
 800356e:	3343      	adds	r3, #67	; 0x43
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	1e5a      	subs	r2, r3, #1
 8003574:	4193      	sbcs	r3, r2
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	0692      	lsls	r2, r2, #26
 800357a:	d430      	bmi.n	80035de <_printf_common+0xae>
 800357c:	0022      	movs	r2, r4
 800357e:	9901      	ldr	r1, [sp, #4]
 8003580:	9800      	ldr	r0, [sp, #0]
 8003582:	9e08      	ldr	r6, [sp, #32]
 8003584:	3243      	adds	r2, #67	; 0x43
 8003586:	47b0      	blx	r6
 8003588:	1c43      	adds	r3, r0, #1
 800358a:	d025      	beq.n	80035d8 <_printf_common+0xa8>
 800358c:	2306      	movs	r3, #6
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	682a      	ldr	r2, [r5, #0]
 8003592:	68e1      	ldr	r1, [r4, #12]
 8003594:	2500      	movs	r5, #0
 8003596:	4003      	ands	r3, r0
 8003598:	2b04      	cmp	r3, #4
 800359a:	d103      	bne.n	80035a4 <_printf_common+0x74>
 800359c:	1a8d      	subs	r5, r1, r2
 800359e:	43eb      	mvns	r3, r5
 80035a0:	17db      	asrs	r3, r3, #31
 80035a2:	401d      	ands	r5, r3
 80035a4:	68a3      	ldr	r3, [r4, #8]
 80035a6:	6922      	ldr	r2, [r4, #16]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	dd01      	ble.n	80035b0 <_printf_common+0x80>
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	18ed      	adds	r5, r5, r3
 80035b0:	2700      	movs	r7, #0
 80035b2:	42bd      	cmp	r5, r7
 80035b4:	d120      	bne.n	80035f8 <_printf_common+0xc8>
 80035b6:	2000      	movs	r0, #0
 80035b8:	e010      	b.n	80035dc <_printf_common+0xac>
 80035ba:	3701      	adds	r7, #1
 80035bc:	68e3      	ldr	r3, [r4, #12]
 80035be:	682a      	ldr	r2, [r5, #0]
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	42bb      	cmp	r3, r7
 80035c4:	ddd2      	ble.n	800356c <_printf_common+0x3c>
 80035c6:	0022      	movs	r2, r4
 80035c8:	2301      	movs	r3, #1
 80035ca:	9901      	ldr	r1, [sp, #4]
 80035cc:	9800      	ldr	r0, [sp, #0]
 80035ce:	9e08      	ldr	r6, [sp, #32]
 80035d0:	3219      	adds	r2, #25
 80035d2:	47b0      	blx	r6
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d1f0      	bne.n	80035ba <_printf_common+0x8a>
 80035d8:	2001      	movs	r0, #1
 80035da:	4240      	negs	r0, r0
 80035dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035de:	2030      	movs	r0, #48	; 0x30
 80035e0:	18e1      	adds	r1, r4, r3
 80035e2:	3143      	adds	r1, #67	; 0x43
 80035e4:	7008      	strb	r0, [r1, #0]
 80035e6:	0021      	movs	r1, r4
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	3145      	adds	r1, #69	; 0x45
 80035ec:	7809      	ldrb	r1, [r1, #0]
 80035ee:	18a2      	adds	r2, r4, r2
 80035f0:	3243      	adds	r2, #67	; 0x43
 80035f2:	3302      	adds	r3, #2
 80035f4:	7011      	strb	r1, [r2, #0]
 80035f6:	e7c1      	b.n	800357c <_printf_common+0x4c>
 80035f8:	0022      	movs	r2, r4
 80035fa:	2301      	movs	r3, #1
 80035fc:	9901      	ldr	r1, [sp, #4]
 80035fe:	9800      	ldr	r0, [sp, #0]
 8003600:	9e08      	ldr	r6, [sp, #32]
 8003602:	321a      	adds	r2, #26
 8003604:	47b0      	blx	r6
 8003606:	1c43      	adds	r3, r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa8>
 800360a:	3701      	adds	r7, #1
 800360c:	e7d1      	b.n	80035b2 <_printf_common+0x82>
	...

08003610 <_printf_i>:
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	b08b      	sub	sp, #44	; 0x2c
 8003614:	9206      	str	r2, [sp, #24]
 8003616:	000a      	movs	r2, r1
 8003618:	3243      	adds	r2, #67	; 0x43
 800361a:	9307      	str	r3, [sp, #28]
 800361c:	9005      	str	r0, [sp, #20]
 800361e:	9204      	str	r2, [sp, #16]
 8003620:	7e0a      	ldrb	r2, [r1, #24]
 8003622:	000c      	movs	r4, r1
 8003624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003626:	2a78      	cmp	r2, #120	; 0x78
 8003628:	d807      	bhi.n	800363a <_printf_i+0x2a>
 800362a:	2a62      	cmp	r2, #98	; 0x62
 800362c:	d809      	bhi.n	8003642 <_printf_i+0x32>
 800362e:	2a00      	cmp	r2, #0
 8003630:	d100      	bne.n	8003634 <_printf_i+0x24>
 8003632:	e0c1      	b.n	80037b8 <_printf_i+0x1a8>
 8003634:	2a58      	cmp	r2, #88	; 0x58
 8003636:	d100      	bne.n	800363a <_printf_i+0x2a>
 8003638:	e08c      	b.n	8003754 <_printf_i+0x144>
 800363a:	0026      	movs	r6, r4
 800363c:	3642      	adds	r6, #66	; 0x42
 800363e:	7032      	strb	r2, [r6, #0]
 8003640:	e022      	b.n	8003688 <_printf_i+0x78>
 8003642:	0010      	movs	r0, r2
 8003644:	3863      	subs	r0, #99	; 0x63
 8003646:	2815      	cmp	r0, #21
 8003648:	d8f7      	bhi.n	800363a <_printf_i+0x2a>
 800364a:	f7fc fd5d 	bl	8000108 <__gnu_thumb1_case_shi>
 800364e:	0016      	.short	0x0016
 8003650:	fff6001f 	.word	0xfff6001f
 8003654:	fff6fff6 	.word	0xfff6fff6
 8003658:	001ffff6 	.word	0x001ffff6
 800365c:	fff6fff6 	.word	0xfff6fff6
 8003660:	fff6fff6 	.word	0xfff6fff6
 8003664:	003600a8 	.word	0x003600a8
 8003668:	fff6009a 	.word	0xfff6009a
 800366c:	00b9fff6 	.word	0x00b9fff6
 8003670:	0036fff6 	.word	0x0036fff6
 8003674:	fff6fff6 	.word	0xfff6fff6
 8003678:	009e      	.short	0x009e
 800367a:	0026      	movs	r6, r4
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	3642      	adds	r6, #66	; 0x42
 8003680:	1d11      	adds	r1, r2, #4
 8003682:	6019      	str	r1, [r3, #0]
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	7033      	strb	r3, [r6, #0]
 8003688:	2301      	movs	r3, #1
 800368a:	e0a7      	b.n	80037dc <_printf_i+0x1cc>
 800368c:	6808      	ldr	r0, [r1, #0]
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	1d0a      	adds	r2, r1, #4
 8003692:	0605      	lsls	r5, r0, #24
 8003694:	d50b      	bpl.n	80036ae <_printf_i+0x9e>
 8003696:	680d      	ldr	r5, [r1, #0]
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	2d00      	cmp	r5, #0
 800369c:	da03      	bge.n	80036a6 <_printf_i+0x96>
 800369e:	232d      	movs	r3, #45	; 0x2d
 80036a0:	9a04      	ldr	r2, [sp, #16]
 80036a2:	426d      	negs	r5, r5
 80036a4:	7013      	strb	r3, [r2, #0]
 80036a6:	4b61      	ldr	r3, [pc, #388]	; (800382c <_printf_i+0x21c>)
 80036a8:	270a      	movs	r7, #10
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	e01b      	b.n	80036e6 <_printf_i+0xd6>
 80036ae:	680d      	ldr	r5, [r1, #0]
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	0641      	lsls	r1, r0, #25
 80036b4:	d5f1      	bpl.n	800369a <_printf_i+0x8a>
 80036b6:	b22d      	sxth	r5, r5
 80036b8:	e7ef      	b.n	800369a <_printf_i+0x8a>
 80036ba:	680d      	ldr	r5, [r1, #0]
 80036bc:	6819      	ldr	r1, [r3, #0]
 80036be:	1d08      	adds	r0, r1, #4
 80036c0:	6018      	str	r0, [r3, #0]
 80036c2:	062e      	lsls	r6, r5, #24
 80036c4:	d501      	bpl.n	80036ca <_printf_i+0xba>
 80036c6:	680d      	ldr	r5, [r1, #0]
 80036c8:	e003      	b.n	80036d2 <_printf_i+0xc2>
 80036ca:	066d      	lsls	r5, r5, #25
 80036cc:	d5fb      	bpl.n	80036c6 <_printf_i+0xb6>
 80036ce:	680d      	ldr	r5, [r1, #0]
 80036d0:	b2ad      	uxth	r5, r5
 80036d2:	4b56      	ldr	r3, [pc, #344]	; (800382c <_printf_i+0x21c>)
 80036d4:	2708      	movs	r7, #8
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	2a6f      	cmp	r2, #111	; 0x6f
 80036da:	d000      	beq.n	80036de <_printf_i+0xce>
 80036dc:	3702      	adds	r7, #2
 80036de:	0023      	movs	r3, r4
 80036e0:	2200      	movs	r2, #0
 80036e2:	3343      	adds	r3, #67	; 0x43
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	60a3      	str	r3, [r4, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db03      	blt.n	80036f6 <_printf_i+0xe6>
 80036ee:	2204      	movs	r2, #4
 80036f0:	6821      	ldr	r1, [r4, #0]
 80036f2:	4391      	bics	r1, r2
 80036f4:	6021      	str	r1, [r4, #0]
 80036f6:	2d00      	cmp	r5, #0
 80036f8:	d102      	bne.n	8003700 <_printf_i+0xf0>
 80036fa:	9e04      	ldr	r6, [sp, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00c      	beq.n	800371a <_printf_i+0x10a>
 8003700:	9e04      	ldr	r6, [sp, #16]
 8003702:	0028      	movs	r0, r5
 8003704:	0039      	movs	r1, r7
 8003706:	f7fc fd8f 	bl	8000228 <__aeabi_uidivmod>
 800370a:	9b03      	ldr	r3, [sp, #12]
 800370c:	3e01      	subs	r6, #1
 800370e:	5c5b      	ldrb	r3, [r3, r1]
 8003710:	7033      	strb	r3, [r6, #0]
 8003712:	002b      	movs	r3, r5
 8003714:	0005      	movs	r5, r0
 8003716:	429f      	cmp	r7, r3
 8003718:	d9f3      	bls.n	8003702 <_printf_i+0xf2>
 800371a:	2f08      	cmp	r7, #8
 800371c:	d109      	bne.n	8003732 <_printf_i+0x122>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	07db      	lsls	r3, r3, #31
 8003722:	d506      	bpl.n	8003732 <_printf_i+0x122>
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	6922      	ldr	r2, [r4, #16]
 8003728:	4293      	cmp	r3, r2
 800372a:	dc02      	bgt.n	8003732 <_printf_i+0x122>
 800372c:	2330      	movs	r3, #48	; 0x30
 800372e:	3e01      	subs	r6, #1
 8003730:	7033      	strb	r3, [r6, #0]
 8003732:	9b04      	ldr	r3, [sp, #16]
 8003734:	1b9b      	subs	r3, r3, r6
 8003736:	6123      	str	r3, [r4, #16]
 8003738:	9b07      	ldr	r3, [sp, #28]
 800373a:	0021      	movs	r1, r4
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	9805      	ldr	r0, [sp, #20]
 8003740:	9b06      	ldr	r3, [sp, #24]
 8003742:	aa09      	add	r2, sp, #36	; 0x24
 8003744:	f7ff fef4 	bl	8003530 <_printf_common>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d14c      	bne.n	80037e6 <_printf_i+0x1d6>
 800374c:	2001      	movs	r0, #1
 800374e:	4240      	negs	r0, r0
 8003750:	b00b      	add	sp, #44	; 0x2c
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003754:	3145      	adds	r1, #69	; 0x45
 8003756:	700a      	strb	r2, [r1, #0]
 8003758:	4a34      	ldr	r2, [pc, #208]	; (800382c <_printf_i+0x21c>)
 800375a:	9203      	str	r2, [sp, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	6821      	ldr	r1, [r4, #0]
 8003760:	ca20      	ldmia	r2!, {r5}
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	0608      	lsls	r0, r1, #24
 8003766:	d516      	bpl.n	8003796 <_printf_i+0x186>
 8003768:	07cb      	lsls	r3, r1, #31
 800376a:	d502      	bpl.n	8003772 <_printf_i+0x162>
 800376c:	2320      	movs	r3, #32
 800376e:	4319      	orrs	r1, r3
 8003770:	6021      	str	r1, [r4, #0]
 8003772:	2710      	movs	r7, #16
 8003774:	2d00      	cmp	r5, #0
 8003776:	d1b2      	bne.n	80036de <_printf_i+0xce>
 8003778:	2320      	movs	r3, #32
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	439a      	bics	r2, r3
 800377e:	6022      	str	r2, [r4, #0]
 8003780:	e7ad      	b.n	80036de <_printf_i+0xce>
 8003782:	2220      	movs	r2, #32
 8003784:	6809      	ldr	r1, [r1, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	6022      	str	r2, [r4, #0]
 800378a:	0022      	movs	r2, r4
 800378c:	2178      	movs	r1, #120	; 0x78
 800378e:	3245      	adds	r2, #69	; 0x45
 8003790:	7011      	strb	r1, [r2, #0]
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <_printf_i+0x220>)
 8003794:	e7e1      	b.n	800375a <_printf_i+0x14a>
 8003796:	0648      	lsls	r0, r1, #25
 8003798:	d5e6      	bpl.n	8003768 <_printf_i+0x158>
 800379a:	b2ad      	uxth	r5, r5
 800379c:	e7e4      	b.n	8003768 <_printf_i+0x158>
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	680d      	ldr	r5, [r1, #0]
 80037a2:	1d10      	adds	r0, r2, #4
 80037a4:	6949      	ldr	r1, [r1, #20]
 80037a6:	6018      	str	r0, [r3, #0]
 80037a8:	6813      	ldr	r3, [r2, #0]
 80037aa:	062e      	lsls	r6, r5, #24
 80037ac:	d501      	bpl.n	80037b2 <_printf_i+0x1a2>
 80037ae:	6019      	str	r1, [r3, #0]
 80037b0:	e002      	b.n	80037b8 <_printf_i+0x1a8>
 80037b2:	066d      	lsls	r5, r5, #25
 80037b4:	d5fb      	bpl.n	80037ae <_printf_i+0x19e>
 80037b6:	8019      	strh	r1, [r3, #0]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9e04      	ldr	r6, [sp, #16]
 80037bc:	6123      	str	r3, [r4, #16]
 80037be:	e7bb      	b.n	8003738 <_printf_i+0x128>
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	1d11      	adds	r1, r2, #4
 80037c4:	6019      	str	r1, [r3, #0]
 80037c6:	6816      	ldr	r6, [r2, #0]
 80037c8:	2100      	movs	r1, #0
 80037ca:	0030      	movs	r0, r6
 80037cc:	6862      	ldr	r2, [r4, #4]
 80037ce:	f000 fad7 	bl	8003d80 <memchr>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d001      	beq.n	80037da <_printf_i+0x1ca>
 80037d6:	1b80      	subs	r0, r0, r6
 80037d8:	6060      	str	r0, [r4, #4]
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	2300      	movs	r3, #0
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	7013      	strb	r3, [r2, #0]
 80037e4:	e7a8      	b.n	8003738 <_printf_i+0x128>
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	0032      	movs	r2, r6
 80037ea:	9906      	ldr	r1, [sp, #24]
 80037ec:	9805      	ldr	r0, [sp, #20]
 80037ee:	9d07      	ldr	r5, [sp, #28]
 80037f0:	47a8      	blx	r5
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	d0aa      	beq.n	800374c <_printf_i+0x13c>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	079b      	lsls	r3, r3, #30
 80037fa:	d415      	bmi.n	8003828 <_printf_i+0x218>
 80037fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fe:	68e0      	ldr	r0, [r4, #12]
 8003800:	4298      	cmp	r0, r3
 8003802:	daa5      	bge.n	8003750 <_printf_i+0x140>
 8003804:	0018      	movs	r0, r3
 8003806:	e7a3      	b.n	8003750 <_printf_i+0x140>
 8003808:	0022      	movs	r2, r4
 800380a:	2301      	movs	r3, #1
 800380c:	9906      	ldr	r1, [sp, #24]
 800380e:	9805      	ldr	r0, [sp, #20]
 8003810:	9e07      	ldr	r6, [sp, #28]
 8003812:	3219      	adds	r2, #25
 8003814:	47b0      	blx	r6
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d098      	beq.n	800374c <_printf_i+0x13c>
 800381a:	3501      	adds	r5, #1
 800381c:	68e3      	ldr	r3, [r4, #12]
 800381e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	42ab      	cmp	r3, r5
 8003824:	dcf0      	bgt.n	8003808 <_printf_i+0x1f8>
 8003826:	e7e9      	b.n	80037fc <_printf_i+0x1ec>
 8003828:	2500      	movs	r5, #0
 800382a:	e7f7      	b.n	800381c <_printf_i+0x20c>
 800382c:	08004185 	.word	0x08004185
 8003830:	08004196 	.word	0x08004196

08003834 <_sbrk_r>:
 8003834:	2300      	movs	r3, #0
 8003836:	b570      	push	{r4, r5, r6, lr}
 8003838:	4d06      	ldr	r5, [pc, #24]	; (8003854 <_sbrk_r+0x20>)
 800383a:	0004      	movs	r4, r0
 800383c:	0008      	movs	r0, r1
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	f7fe faca 	bl	8001dd8 <_sbrk>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d103      	bne.n	8003850 <_sbrk_r+0x1c>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d000      	beq.n	8003850 <_sbrk_r+0x1c>
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	bd70      	pop	{r4, r5, r6, pc}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	2000009c 	.word	0x2000009c

08003858 <__sread>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	000c      	movs	r4, r1
 800385c:	250e      	movs	r5, #14
 800385e:	5f49      	ldrsh	r1, [r1, r5]
 8003860:	f000 faf6 	bl	8003e50 <_read_r>
 8003864:	2800      	cmp	r0, #0
 8003866:	db03      	blt.n	8003870 <__sread+0x18>
 8003868:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800386a:	181b      	adds	r3, r3, r0
 800386c:	6563      	str	r3, [r4, #84]	; 0x54
 800386e:	bd70      	pop	{r4, r5, r6, pc}
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	4a02      	ldr	r2, [pc, #8]	; (800387c <__sread+0x24>)
 8003874:	4013      	ands	r3, r2
 8003876:	81a3      	strh	r3, [r4, #12]
 8003878:	e7f9      	b.n	800386e <__sread+0x16>
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	ffffefff 	.word	0xffffefff

08003880 <__swrite>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	001f      	movs	r7, r3
 8003884:	898b      	ldrh	r3, [r1, #12]
 8003886:	0005      	movs	r5, r0
 8003888:	000c      	movs	r4, r1
 800388a:	0016      	movs	r6, r2
 800388c:	05db      	lsls	r3, r3, #23
 800388e:	d505      	bpl.n	800389c <__swrite+0x1c>
 8003890:	230e      	movs	r3, #14
 8003892:	5ec9      	ldrsh	r1, [r1, r3]
 8003894:	2200      	movs	r2, #0
 8003896:	2302      	movs	r3, #2
 8003898:	f000 f9f2 	bl	8003c80 <_lseek_r>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <__swrite+0x34>)
 80038a0:	0028      	movs	r0, r5
 80038a2:	4013      	ands	r3, r2
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	0032      	movs	r2, r6
 80038a8:	230e      	movs	r3, #14
 80038aa:	5ee1      	ldrsh	r1, [r4, r3]
 80038ac:	003b      	movs	r3, r7
 80038ae:	f000 f875 	bl	800399c <_write_r>
 80038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b4:	ffffefff 	.word	0xffffefff

080038b8 <__sseek>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	000c      	movs	r4, r1
 80038bc:	250e      	movs	r5, #14
 80038be:	5f49      	ldrsh	r1, [r1, r5]
 80038c0:	f000 f9de 	bl	8003c80 <_lseek_r>
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	1c42      	adds	r2, r0, #1
 80038c8:	d103      	bne.n	80038d2 <__sseek+0x1a>
 80038ca:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <__sseek+0x28>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	81a3      	strh	r3, [r4, #12]
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	0152      	lsls	r2, r2, #5
 80038d6:	4313      	orrs	r3, r2
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	6560      	str	r0, [r4, #84]	; 0x54
 80038dc:	e7f8      	b.n	80038d0 <__sseek+0x18>
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	ffffefff 	.word	0xffffefff

080038e4 <__sclose>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	230e      	movs	r3, #14
 80038e8:	5ec9      	ldrsh	r1, [r1, r3]
 80038ea:	f000 f8eb 	bl	8003ac4 <_close_r>
 80038ee:	bd10      	pop	{r4, pc}

080038f0 <__swbuf_r>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	0005      	movs	r5, r0
 80038f4:	000e      	movs	r6, r1
 80038f6:	0014      	movs	r4, r2
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d004      	beq.n	8003906 <__swbuf_r+0x16>
 80038fc:	6983      	ldr	r3, [r0, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <__swbuf_r+0x16>
 8003902:	f7ff f99f 	bl	8002c44 <__sinit>
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <__swbuf_r+0xa0>)
 8003908:	429c      	cmp	r4, r3
 800390a:	d12e      	bne.n	800396a <__swbuf_r+0x7a>
 800390c:	686c      	ldr	r4, [r5, #4]
 800390e:	69a3      	ldr	r3, [r4, #24]
 8003910:	60a3      	str	r3, [r4, #8]
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	d532      	bpl.n	800397e <__swbuf_r+0x8e>
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02f      	beq.n	800397e <__swbuf_r+0x8e>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	6922      	ldr	r2, [r4, #16]
 8003922:	b2f7      	uxtb	r7, r6
 8003924:	1a98      	subs	r0, r3, r2
 8003926:	6963      	ldr	r3, [r4, #20]
 8003928:	b2f6      	uxtb	r6, r6
 800392a:	4283      	cmp	r3, r0
 800392c:	dc05      	bgt.n	800393a <__swbuf_r+0x4a>
 800392e:	0021      	movs	r1, r4
 8003930:	0028      	movs	r0, r5
 8003932:	f000 f965 	bl	8003c00 <_fflush_r>
 8003936:	2800      	cmp	r0, #0
 8003938:	d127      	bne.n	800398a <__swbuf_r+0x9a>
 800393a:	68a3      	ldr	r3, [r4, #8]
 800393c:	3001      	adds	r0, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	60a3      	str	r3, [r4, #8]
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	6022      	str	r2, [r4, #0]
 8003948:	701f      	strb	r7, [r3, #0]
 800394a:	6963      	ldr	r3, [r4, #20]
 800394c:	4283      	cmp	r3, r0
 800394e:	d004      	beq.n	800395a <__swbuf_r+0x6a>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	07db      	lsls	r3, r3, #31
 8003954:	d507      	bpl.n	8003966 <__swbuf_r+0x76>
 8003956:	2e0a      	cmp	r6, #10
 8003958:	d105      	bne.n	8003966 <__swbuf_r+0x76>
 800395a:	0021      	movs	r1, r4
 800395c:	0028      	movs	r0, r5
 800395e:	f000 f94f 	bl	8003c00 <_fflush_r>
 8003962:	2800      	cmp	r0, #0
 8003964:	d111      	bne.n	800398a <__swbuf_r+0x9a>
 8003966:	0030      	movs	r0, r6
 8003968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <__swbuf_r+0xa4>)
 800396c:	429c      	cmp	r4, r3
 800396e:	d101      	bne.n	8003974 <__swbuf_r+0x84>
 8003970:	68ac      	ldr	r4, [r5, #8]
 8003972:	e7cc      	b.n	800390e <__swbuf_r+0x1e>
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <__swbuf_r+0xa8>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d1c9      	bne.n	800390e <__swbuf_r+0x1e>
 800397a:	68ec      	ldr	r4, [r5, #12]
 800397c:	e7c7      	b.n	800390e <__swbuf_r+0x1e>
 800397e:	0021      	movs	r1, r4
 8003980:	0028      	movs	r0, r5
 8003982:	f000 f81f 	bl	80039c4 <__swsetup_r>
 8003986:	2800      	cmp	r0, #0
 8003988:	d0c9      	beq.n	800391e <__swbuf_r+0x2e>
 800398a:	2601      	movs	r6, #1
 800398c:	4276      	negs	r6, r6
 800398e:	e7ea      	b.n	8003966 <__swbuf_r+0x76>
 8003990:	08004134 	.word	0x08004134
 8003994:	08004154 	.word	0x08004154
 8003998:	08004114 	.word	0x08004114

0800399c <_write_r>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	0004      	movs	r4, r0
 80039a0:	0008      	movs	r0, r1
 80039a2:	0011      	movs	r1, r2
 80039a4:	001a      	movs	r2, r3
 80039a6:	2300      	movs	r3, #0
 80039a8:	4d05      	ldr	r5, [pc, #20]	; (80039c0 <_write_r+0x24>)
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fe f9cc 	bl	8001d48 <_write>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d103      	bne.n	80039bc <_write_r+0x20>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d000      	beq.n	80039bc <_write_r+0x20>
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	2000009c 	.word	0x2000009c

080039c4 <__swsetup_r>:
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <__swsetup_r+0xe0>)
 80039c6:	b570      	push	{r4, r5, r6, lr}
 80039c8:	681d      	ldr	r5, [r3, #0]
 80039ca:	0006      	movs	r6, r0
 80039cc:	000c      	movs	r4, r1
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	d005      	beq.n	80039de <__swsetup_r+0x1a>
 80039d2:	69ab      	ldr	r3, [r5, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <__swsetup_r+0x1a>
 80039d8:	0028      	movs	r0, r5
 80039da:	f7ff f933 	bl	8002c44 <__sinit>
 80039de:	4b32      	ldr	r3, [pc, #200]	; (8003aa8 <__swsetup_r+0xe4>)
 80039e0:	429c      	cmp	r4, r3
 80039e2:	d10f      	bne.n	8003a04 <__swsetup_r+0x40>
 80039e4:	686c      	ldr	r4, [r5, #4]
 80039e6:	230c      	movs	r3, #12
 80039e8:	5ee2      	ldrsh	r2, [r4, r3]
 80039ea:	b293      	uxth	r3, r2
 80039ec:	0711      	lsls	r1, r2, #28
 80039ee:	d42d      	bmi.n	8003a4c <__swsetup_r+0x88>
 80039f0:	06d9      	lsls	r1, r3, #27
 80039f2:	d411      	bmi.n	8003a18 <__swsetup_r+0x54>
 80039f4:	2309      	movs	r3, #9
 80039f6:	2001      	movs	r0, #1
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	3337      	adds	r3, #55	; 0x37
 80039fc:	4313      	orrs	r3, r2
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	4240      	negs	r0, r0
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <__swsetup_r+0xe8>)
 8003a06:	429c      	cmp	r4, r3
 8003a08:	d101      	bne.n	8003a0e <__swsetup_r+0x4a>
 8003a0a:	68ac      	ldr	r4, [r5, #8]
 8003a0c:	e7eb      	b.n	80039e6 <__swsetup_r+0x22>
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <__swsetup_r+0xec>)
 8003a10:	429c      	cmp	r4, r3
 8003a12:	d1e8      	bne.n	80039e6 <__swsetup_r+0x22>
 8003a14:	68ec      	ldr	r4, [r5, #12]
 8003a16:	e7e6      	b.n	80039e6 <__swsetup_r+0x22>
 8003a18:	075b      	lsls	r3, r3, #29
 8003a1a:	d513      	bpl.n	8003a44 <__swsetup_r+0x80>
 8003a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a1e:	2900      	cmp	r1, #0
 8003a20:	d008      	beq.n	8003a34 <__swsetup_r+0x70>
 8003a22:	0023      	movs	r3, r4
 8003a24:	3344      	adds	r3, #68	; 0x44
 8003a26:	4299      	cmp	r1, r3
 8003a28:	d002      	beq.n	8003a30 <__swsetup_r+0x6c>
 8003a2a:	0030      	movs	r0, r6
 8003a2c:	f7ff f9da 	bl	8002de4 <_free_r>
 8003a30:	2300      	movs	r3, #0
 8003a32:	6363      	str	r3, [r4, #52]	; 0x34
 8003a34:	2224      	movs	r2, #36	; 0x24
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	4393      	bics	r3, r2
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	6923      	ldr	r3, [r4, #16]
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	2308      	movs	r3, #8
 8003a46:	89a2      	ldrh	r2, [r4, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	6923      	ldr	r3, [r4, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <__swsetup_r+0xa6>
 8003a52:	21a0      	movs	r1, #160	; 0xa0
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	0089      	lsls	r1, r1, #2
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <__swsetup_r+0xa6>
 8003a62:	0021      	movs	r1, r4
 8003a64:	0030      	movs	r0, r6
 8003a66:	f000 f947 	bl	8003cf8 <__smakebuf_r>
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	5ea3      	ldrsh	r3, [r4, r2]
 8003a6e:	2001      	movs	r0, #1
 8003a70:	001a      	movs	r2, r3
 8003a72:	b299      	uxth	r1, r3
 8003a74:	4002      	ands	r2, r0
 8003a76:	4203      	tst	r3, r0
 8003a78:	d00f      	beq.n	8003a9a <__swsetup_r+0xd6>
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60a2      	str	r2, [r4, #8]
 8003a7e:	6962      	ldr	r2, [r4, #20]
 8003a80:	4252      	negs	r2, r2
 8003a82:	61a2      	str	r2, [r4, #24]
 8003a84:	2000      	movs	r0, #0
 8003a86:	6922      	ldr	r2, [r4, #16]
 8003a88:	4282      	cmp	r2, r0
 8003a8a:	d1ba      	bne.n	8003a02 <__swsetup_r+0x3e>
 8003a8c:	060a      	lsls	r2, r1, #24
 8003a8e:	d5b8      	bpl.n	8003a02 <__swsetup_r+0x3e>
 8003a90:	2240      	movs	r2, #64	; 0x40
 8003a92:	4313      	orrs	r3, r2
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	3801      	subs	r0, #1
 8003a98:	e7b3      	b.n	8003a02 <__swsetup_r+0x3e>
 8003a9a:	0788      	lsls	r0, r1, #30
 8003a9c:	d400      	bmi.n	8003aa0 <__swsetup_r+0xdc>
 8003a9e:	6962      	ldr	r2, [r4, #20]
 8003aa0:	60a2      	str	r2, [r4, #8]
 8003aa2:	e7ef      	b.n	8003a84 <__swsetup_r+0xc0>
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	08004134 	.word	0x08004134
 8003aac:	08004154 	.word	0x08004154
 8003ab0:	08004114 	.word	0x08004114

08003ab4 <abort>:
 8003ab4:	2006      	movs	r0, #6
 8003ab6:	b510      	push	{r4, lr}
 8003ab8:	f000 fa08 	bl	8003ecc <raise>
 8003abc:	2001      	movs	r0, #1
 8003abe:	f7fe f91a 	bl	8001cf6 <_exit>
	...

08003ac4 <_close_r>:
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	b570      	push	{r4, r5, r6, lr}
 8003ac8:	4d06      	ldr	r5, [pc, #24]	; (8003ae4 <_close_r+0x20>)
 8003aca:	0004      	movs	r4, r0
 8003acc:	0008      	movs	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7fe f956 	bl	8001d80 <_close>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d103      	bne.n	8003ae0 <_close_r+0x1c>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d000      	beq.n	8003ae0 <_close_r+0x1c>
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	2000009c 	.word	0x2000009c

08003ae8 <__sflush_r>:
 8003ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aea:	898b      	ldrh	r3, [r1, #12]
 8003aec:	0005      	movs	r5, r0
 8003aee:	000c      	movs	r4, r1
 8003af0:	071a      	lsls	r2, r3, #28
 8003af2:	d45f      	bmi.n	8003bb4 <__sflush_r+0xcc>
 8003af4:	684a      	ldr	r2, [r1, #4]
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	dc04      	bgt.n	8003b04 <__sflush_r+0x1c>
 8003afa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	dc01      	bgt.n	8003b04 <__sflush_r+0x1c>
 8003b00:	2000      	movs	r0, #0
 8003b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b06:	2f00      	cmp	r7, #0
 8003b08:	d0fa      	beq.n	8003b00 <__sflush_r+0x18>
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	682e      	ldr	r6, [r5, #0]
 8003b10:	602a      	str	r2, [r5, #0]
 8003b12:	001a      	movs	r2, r3
 8003b14:	0149      	lsls	r1, r1, #5
 8003b16:	400a      	ands	r2, r1
 8003b18:	420b      	tst	r3, r1
 8003b1a:	d034      	beq.n	8003b86 <__sflush_r+0x9e>
 8003b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	075b      	lsls	r3, r3, #29
 8003b22:	d506      	bpl.n	8003b32 <__sflush_r+0x4a>
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	1ac0      	subs	r0, r0, r3
 8003b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <__sflush_r+0x4a>
 8003b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b30:	1ac0      	subs	r0, r0, r3
 8003b32:	0002      	movs	r2, r0
 8003b34:	6a21      	ldr	r1, [r4, #32]
 8003b36:	2300      	movs	r3, #0
 8003b38:	0028      	movs	r0, r5
 8003b3a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003b3c:	47b8      	blx	r7
 8003b3e:	89a1      	ldrh	r1, [r4, #12]
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d106      	bne.n	8003b52 <__sflush_r+0x6a>
 8003b44:	682b      	ldr	r3, [r5, #0]
 8003b46:	2b1d      	cmp	r3, #29
 8003b48:	d831      	bhi.n	8003bae <__sflush_r+0xc6>
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <__sflush_r+0x114>)
 8003b4c:	40da      	lsrs	r2, r3
 8003b4e:	07d3      	lsls	r3, r2, #31
 8003b50:	d52d      	bpl.n	8003bae <__sflush_r+0xc6>
 8003b52:	2300      	movs	r3, #0
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	6923      	ldr	r3, [r4, #16]
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	04cb      	lsls	r3, r1, #19
 8003b5c:	d505      	bpl.n	8003b6a <__sflush_r+0x82>
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	d102      	bne.n	8003b68 <__sflush_r+0x80>
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d100      	bne.n	8003b6a <__sflush_r+0x82>
 8003b68:	6560      	str	r0, [r4, #84]	; 0x54
 8003b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6c:	602e      	str	r6, [r5, #0]
 8003b6e:	2900      	cmp	r1, #0
 8003b70:	d0c6      	beq.n	8003b00 <__sflush_r+0x18>
 8003b72:	0023      	movs	r3, r4
 8003b74:	3344      	adds	r3, #68	; 0x44
 8003b76:	4299      	cmp	r1, r3
 8003b78:	d002      	beq.n	8003b80 <__sflush_r+0x98>
 8003b7a:	0028      	movs	r0, r5
 8003b7c:	f7ff f932 	bl	8002de4 <_free_r>
 8003b80:	2000      	movs	r0, #0
 8003b82:	6360      	str	r0, [r4, #52]	; 0x34
 8003b84:	e7bd      	b.n	8003b02 <__sflush_r+0x1a>
 8003b86:	2301      	movs	r3, #1
 8003b88:	0028      	movs	r0, r5
 8003b8a:	6a21      	ldr	r1, [r4, #32]
 8003b8c:	47b8      	blx	r7
 8003b8e:	1c43      	adds	r3, r0, #1
 8003b90:	d1c5      	bne.n	8003b1e <__sflush_r+0x36>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0c2      	beq.n	8003b1e <__sflush_r+0x36>
 8003b98:	2b1d      	cmp	r3, #29
 8003b9a:	d001      	beq.n	8003ba0 <__sflush_r+0xb8>
 8003b9c:	2b16      	cmp	r3, #22
 8003b9e:	d101      	bne.n	8003ba4 <__sflush_r+0xbc>
 8003ba0:	602e      	str	r6, [r5, #0]
 8003ba2:	e7ad      	b.n	8003b00 <__sflush_r+0x18>
 8003ba4:	2340      	movs	r3, #64	; 0x40
 8003ba6:	89a2      	ldrh	r2, [r4, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	81a3      	strh	r3, [r4, #12]
 8003bac:	e7a9      	b.n	8003b02 <__sflush_r+0x1a>
 8003bae:	2340      	movs	r3, #64	; 0x40
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	e7fa      	b.n	8003baa <__sflush_r+0xc2>
 8003bb4:	690f      	ldr	r7, [r1, #16]
 8003bb6:	2f00      	cmp	r7, #0
 8003bb8:	d0a2      	beq.n	8003b00 <__sflush_r+0x18>
 8003bba:	680a      	ldr	r2, [r1, #0]
 8003bbc:	600f      	str	r7, [r1, #0]
 8003bbe:	1bd2      	subs	r2, r2, r7
 8003bc0:	9201      	str	r2, [sp, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	079b      	lsls	r3, r3, #30
 8003bc6:	d100      	bne.n	8003bca <__sflush_r+0xe2>
 8003bc8:	694a      	ldr	r2, [r1, #20]
 8003bca:	60a2      	str	r2, [r4, #8]
 8003bcc:	9b01      	ldr	r3, [sp, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dc00      	bgt.n	8003bd4 <__sflush_r+0xec>
 8003bd2:	e795      	b.n	8003b00 <__sflush_r+0x18>
 8003bd4:	003a      	movs	r2, r7
 8003bd6:	0028      	movs	r0, r5
 8003bd8:	9b01      	ldr	r3, [sp, #4]
 8003bda:	6a21      	ldr	r1, [r4, #32]
 8003bdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bde:	47b0      	blx	r6
 8003be0:	2800      	cmp	r0, #0
 8003be2:	dc06      	bgt.n	8003bf2 <__sflush_r+0x10a>
 8003be4:	2340      	movs	r3, #64	; 0x40
 8003be6:	2001      	movs	r0, #1
 8003be8:	89a2      	ldrh	r2, [r4, #12]
 8003bea:	4240      	negs	r0, r0
 8003bec:	4313      	orrs	r3, r2
 8003bee:	81a3      	strh	r3, [r4, #12]
 8003bf0:	e787      	b.n	8003b02 <__sflush_r+0x1a>
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	183f      	adds	r7, r7, r0
 8003bf6:	1a1b      	subs	r3, r3, r0
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	e7e7      	b.n	8003bcc <__sflush_r+0xe4>
 8003bfc:	20400001 	.word	0x20400001

08003c00 <_fflush_r>:
 8003c00:	690b      	ldr	r3, [r1, #16]
 8003c02:	b570      	push	{r4, r5, r6, lr}
 8003c04:	0005      	movs	r5, r0
 8003c06:	000c      	movs	r4, r1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <_fflush_r+0x12>
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	0028      	movs	r0, r5
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d004      	beq.n	8003c20 <_fflush_r+0x20>
 8003c16:	6983      	ldr	r3, [r0, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <_fflush_r+0x20>
 8003c1c:	f7ff f812 	bl	8002c44 <__sinit>
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <_fflush_r+0x74>)
 8003c22:	429c      	cmp	r4, r3
 8003c24:	d11b      	bne.n	8003c5e <_fflush_r+0x5e>
 8003c26:	686c      	ldr	r4, [r5, #4]
 8003c28:	220c      	movs	r2, #12
 8003c2a:	5ea3      	ldrsh	r3, [r4, r2]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ed      	beq.n	8003c0c <_fflush_r+0xc>
 8003c30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c32:	07d2      	lsls	r2, r2, #31
 8003c34:	d404      	bmi.n	8003c40 <_fflush_r+0x40>
 8003c36:	059b      	lsls	r3, r3, #22
 8003c38:	d402      	bmi.n	8003c40 <_fflush_r+0x40>
 8003c3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c3c:	f7ff f8c5 	bl	8002dca <__retarget_lock_acquire_recursive>
 8003c40:	0028      	movs	r0, r5
 8003c42:	0021      	movs	r1, r4
 8003c44:	f7ff ff50 	bl	8003ae8 <__sflush_r>
 8003c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4a:	0005      	movs	r5, r0
 8003c4c:	07db      	lsls	r3, r3, #31
 8003c4e:	d4de      	bmi.n	8003c0e <_fflush_r+0xe>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	059b      	lsls	r3, r3, #22
 8003c54:	d4db      	bmi.n	8003c0e <_fflush_r+0xe>
 8003c56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c58:	f7ff f8b8 	bl	8002dcc <__retarget_lock_release_recursive>
 8003c5c:	e7d7      	b.n	8003c0e <_fflush_r+0xe>
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <_fflush_r+0x78>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d101      	bne.n	8003c68 <_fflush_r+0x68>
 8003c64:	68ac      	ldr	r4, [r5, #8]
 8003c66:	e7df      	b.n	8003c28 <_fflush_r+0x28>
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <_fflush_r+0x7c>)
 8003c6a:	429c      	cmp	r4, r3
 8003c6c:	d1dc      	bne.n	8003c28 <_fflush_r+0x28>
 8003c6e:	68ec      	ldr	r4, [r5, #12]
 8003c70:	e7da      	b.n	8003c28 <_fflush_r+0x28>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	08004134 	.word	0x08004134
 8003c78:	08004154 	.word	0x08004154
 8003c7c:	08004114 	.word	0x08004114

08003c80 <_lseek_r>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	0004      	movs	r4, r0
 8003c84:	0008      	movs	r0, r1
 8003c86:	0011      	movs	r1, r2
 8003c88:	001a      	movs	r2, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4d05      	ldr	r5, [pc, #20]	; (8003ca4 <_lseek_r+0x24>)
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	f7fe f897 	bl	8001dc2 <_lseek>
 8003c94:	1c43      	adds	r3, r0, #1
 8003c96:	d103      	bne.n	8003ca0 <_lseek_r+0x20>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d000      	beq.n	8003ca0 <_lseek_r+0x20>
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	2000009c 	.word	0x2000009c

08003ca8 <__swhatbuf_r>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	000e      	movs	r6, r1
 8003cac:	001d      	movs	r5, r3
 8003cae:	230e      	movs	r3, #14
 8003cb0:	5ec9      	ldrsh	r1, [r1, r3]
 8003cb2:	0014      	movs	r4, r2
 8003cb4:	b096      	sub	sp, #88	; 0x58
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	da08      	bge.n	8003ccc <__swhatbuf_r+0x24>
 8003cba:	220c      	movs	r2, #12
 8003cbc:	5eb3      	ldrsh	r3, [r6, r2]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	602a      	str	r2, [r5, #0]
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	d411      	bmi.n	8003cea <__swhatbuf_r+0x42>
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	e00f      	b.n	8003cec <__swhatbuf_r+0x44>
 8003ccc:	466a      	mov	r2, sp
 8003cce:	f000 f91d 	bl	8003f0c <_fstat_r>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	dbf1      	blt.n	8003cba <__swhatbuf_r+0x12>
 8003cd6:	23f0      	movs	r3, #240	; 0xf0
 8003cd8:	9901      	ldr	r1, [sp, #4]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	4019      	ands	r1, r3
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <__swhatbuf_r+0x4c>)
 8003ce0:	18c9      	adds	r1, r1, r3
 8003ce2:	424b      	negs	r3, r1
 8003ce4:	4159      	adcs	r1, r3
 8003ce6:	6029      	str	r1, [r5, #0]
 8003ce8:	e7ed      	b.n	8003cc6 <__swhatbuf_r+0x1e>
 8003cea:	2340      	movs	r3, #64	; 0x40
 8003cec:	2000      	movs	r0, #0
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	b016      	add	sp, #88	; 0x58
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	ffffe000 	.word	0xffffe000

08003cf8 <__smakebuf_r>:
 8003cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cfa:	2602      	movs	r6, #2
 8003cfc:	898b      	ldrh	r3, [r1, #12]
 8003cfe:	0005      	movs	r5, r0
 8003d00:	000c      	movs	r4, r1
 8003d02:	4233      	tst	r3, r6
 8003d04:	d006      	beq.n	8003d14 <__smakebuf_r+0x1c>
 8003d06:	0023      	movs	r3, r4
 8003d08:	3347      	adds	r3, #71	; 0x47
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	6123      	str	r3, [r4, #16]
 8003d0e:	2301      	movs	r3, #1
 8003d10:	6163      	str	r3, [r4, #20]
 8003d12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003d14:	466a      	mov	r2, sp
 8003d16:	ab01      	add	r3, sp, #4
 8003d18:	f7ff ffc6 	bl	8003ca8 <__swhatbuf_r>
 8003d1c:	9900      	ldr	r1, [sp, #0]
 8003d1e:	0007      	movs	r7, r0
 8003d20:	0028      	movs	r0, r5
 8003d22:	f7ff f8cb 	bl	8002ebc <_malloc_r>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d108      	bne.n	8003d3c <__smakebuf_r+0x44>
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	5ea3      	ldrsh	r3, [r4, r2]
 8003d2e:	059a      	lsls	r2, r3, #22
 8003d30:	d4ef      	bmi.n	8003d12 <__smakebuf_r+0x1a>
 8003d32:	2203      	movs	r2, #3
 8003d34:	4393      	bics	r3, r2
 8003d36:	431e      	orrs	r6, r3
 8003d38:	81a6      	strh	r6, [r4, #12]
 8003d3a:	e7e4      	b.n	8003d06 <__smakebuf_r+0xe>
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <__smakebuf_r+0x84>)
 8003d3e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	89a2      	ldrh	r2, [r4, #12]
 8003d44:	6020      	str	r0, [r4, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	9b00      	ldr	r3, [sp, #0]
 8003d4c:	6120      	str	r0, [r4, #16]
 8003d4e:	6163      	str	r3, [r4, #20]
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <__smakebuf_r+0x7a>
 8003d56:	0028      	movs	r0, r5
 8003d58:	230e      	movs	r3, #14
 8003d5a:	5ee1      	ldrsh	r1, [r4, r3]
 8003d5c:	f000 f8e8 	bl	8003f30 <_isatty_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d006      	beq.n	8003d72 <__smakebuf_r+0x7a>
 8003d64:	2203      	movs	r2, #3
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	4393      	bics	r3, r2
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	89a0      	ldrh	r0, [r4, #12]
 8003d74:	4307      	orrs	r7, r0
 8003d76:	81a7      	strh	r7, [r4, #12]
 8003d78:	e7cb      	b.n	8003d12 <__smakebuf_r+0x1a>
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	08002bc9 	.word	0x08002bc9

08003d80 <memchr>:
 8003d80:	b2c9      	uxtb	r1, r1
 8003d82:	1882      	adds	r2, r0, r2
 8003d84:	4290      	cmp	r0, r2
 8003d86:	d101      	bne.n	8003d8c <memchr+0xc>
 8003d88:	2000      	movs	r0, #0
 8003d8a:	4770      	bx	lr
 8003d8c:	7803      	ldrb	r3, [r0, #0]
 8003d8e:	428b      	cmp	r3, r1
 8003d90:	d0fb      	beq.n	8003d8a <memchr+0xa>
 8003d92:	3001      	adds	r0, #1
 8003d94:	e7f6      	b.n	8003d84 <memchr+0x4>

08003d96 <memcpy>:
 8003d96:	2300      	movs	r3, #0
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d100      	bne.n	8003da0 <memcpy+0xa>
 8003d9e:	bd10      	pop	{r4, pc}
 8003da0:	5ccc      	ldrb	r4, [r1, r3]
 8003da2:	54c4      	strb	r4, [r0, r3]
 8003da4:	3301      	adds	r3, #1
 8003da6:	e7f8      	b.n	8003d9a <memcpy+0x4>

08003da8 <memmove>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4288      	cmp	r0, r1
 8003dac:	d902      	bls.n	8003db4 <memmove+0xc>
 8003dae:	188b      	adds	r3, r1, r2
 8003db0:	4298      	cmp	r0, r3
 8003db2:	d303      	bcc.n	8003dbc <memmove+0x14>
 8003db4:	2300      	movs	r3, #0
 8003db6:	e007      	b.n	8003dc8 <memmove+0x20>
 8003db8:	5c8b      	ldrb	r3, [r1, r2]
 8003dba:	5483      	strb	r3, [r0, r2]
 8003dbc:	3a01      	subs	r2, #1
 8003dbe:	d2fb      	bcs.n	8003db8 <memmove+0x10>
 8003dc0:	bd10      	pop	{r4, pc}
 8003dc2:	5ccc      	ldrb	r4, [r1, r3]
 8003dc4:	54c4      	strb	r4, [r0, r3]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1fa      	bne.n	8003dc2 <memmove+0x1a>
 8003dcc:	e7f8      	b.n	8003dc0 <memmove+0x18>
	...

08003dd0 <__malloc_lock>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4802      	ldr	r0, [pc, #8]	; (8003ddc <__malloc_lock+0xc>)
 8003dd4:	f7fe fff9 	bl	8002dca <__retarget_lock_acquire_recursive>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	20000090 	.word	0x20000090

08003de0 <__malloc_unlock>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	4802      	ldr	r0, [pc, #8]	; (8003dec <__malloc_unlock+0xc>)
 8003de4:	f7fe fff2 	bl	8002dcc <__retarget_lock_release_recursive>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20000090 	.word	0x20000090

08003df0 <_realloc_r>:
 8003df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003df2:	0007      	movs	r7, r0
 8003df4:	000e      	movs	r6, r1
 8003df6:	0014      	movs	r4, r2
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	d105      	bne.n	8003e08 <_realloc_r+0x18>
 8003dfc:	0011      	movs	r1, r2
 8003dfe:	f7ff f85d 	bl	8002ebc <_malloc_r>
 8003e02:	0005      	movs	r5, r0
 8003e04:	0028      	movs	r0, r5
 8003e06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e08:	2a00      	cmp	r2, #0
 8003e0a:	d103      	bne.n	8003e14 <_realloc_r+0x24>
 8003e0c:	f7fe ffea 	bl	8002de4 <_free_r>
 8003e10:	0025      	movs	r5, r4
 8003e12:	e7f7      	b.n	8003e04 <_realloc_r+0x14>
 8003e14:	f000 f89e 	bl	8003f54 <_malloc_usable_size_r>
 8003e18:	9001      	str	r0, [sp, #4]
 8003e1a:	4284      	cmp	r4, r0
 8003e1c:	d803      	bhi.n	8003e26 <_realloc_r+0x36>
 8003e1e:	0035      	movs	r5, r6
 8003e20:	0843      	lsrs	r3, r0, #1
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	d3ee      	bcc.n	8003e04 <_realloc_r+0x14>
 8003e26:	0021      	movs	r1, r4
 8003e28:	0038      	movs	r0, r7
 8003e2a:	f7ff f847 	bl	8002ebc <_malloc_r>
 8003e2e:	1e05      	subs	r5, r0, #0
 8003e30:	d0e8      	beq.n	8003e04 <_realloc_r+0x14>
 8003e32:	9b01      	ldr	r3, [sp, #4]
 8003e34:	0022      	movs	r2, r4
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d900      	bls.n	8003e3c <_realloc_r+0x4c>
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	0031      	movs	r1, r6
 8003e3e:	0028      	movs	r0, r5
 8003e40:	f7ff ffa9 	bl	8003d96 <memcpy>
 8003e44:	0031      	movs	r1, r6
 8003e46:	0038      	movs	r0, r7
 8003e48:	f7fe ffcc 	bl	8002de4 <_free_r>
 8003e4c:	e7da      	b.n	8003e04 <_realloc_r+0x14>
	...

08003e50 <_read_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	0004      	movs	r4, r0
 8003e54:	0008      	movs	r0, r1
 8003e56:	0011      	movs	r1, r2
 8003e58:	001a      	movs	r2, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	4d05      	ldr	r5, [pc, #20]	; (8003e74 <_read_r+0x24>)
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fd ff55 	bl	8001d0e <_read>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d103      	bne.n	8003e70 <_read_r+0x20>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d000      	beq.n	8003e70 <_read_r+0x20>
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	2000009c 	.word	0x2000009c

08003e78 <_raise_r>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	0004      	movs	r4, r0
 8003e7c:	000d      	movs	r5, r1
 8003e7e:	291f      	cmp	r1, #31
 8003e80:	d904      	bls.n	8003e8c <_raise_r+0x14>
 8003e82:	2316      	movs	r3, #22
 8003e84:	6003      	str	r3, [r0, #0]
 8003e86:	2001      	movs	r0, #1
 8003e88:	4240      	negs	r0, r0
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <_raise_r+0x24>
 8003e92:	008a      	lsls	r2, r1, #2
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2a00      	cmp	r2, #0
 8003e9a:	d108      	bne.n	8003eae <_raise_r+0x36>
 8003e9c:	0020      	movs	r0, r4
 8003e9e:	f000 f831 	bl	8003f04 <_getpid_r>
 8003ea2:	002a      	movs	r2, r5
 8003ea4:	0001      	movs	r1, r0
 8003ea6:	0020      	movs	r0, r4
 8003ea8:	f000 f81a 	bl	8003ee0 <_kill_r>
 8003eac:	e7ed      	b.n	8003e8a <_raise_r+0x12>
 8003eae:	2000      	movs	r0, #0
 8003eb0:	2a01      	cmp	r2, #1
 8003eb2:	d0ea      	beq.n	8003e8a <_raise_r+0x12>
 8003eb4:	1c51      	adds	r1, r2, #1
 8003eb6:	d103      	bne.n	8003ec0 <_raise_r+0x48>
 8003eb8:	2316      	movs	r3, #22
 8003eba:	3001      	adds	r0, #1
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	e7e4      	b.n	8003e8a <_raise_r+0x12>
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	0028      	movs	r0, r5
 8003ec4:	601c      	str	r4, [r3, #0]
 8003ec6:	4790      	blx	r2
 8003ec8:	0020      	movs	r0, r4
 8003eca:	e7de      	b.n	8003e8a <_raise_r+0x12>

08003ecc <raise>:
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <raise+0x10>)
 8003ed0:	0001      	movs	r1, r0
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	f7ff ffd0 	bl	8003e78 <_raise_r>
 8003ed8:	bd10      	pop	{r4, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20000004 	.word	0x20000004

08003ee0 <_kill_r>:
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	b570      	push	{r4, r5, r6, lr}
 8003ee4:	4d06      	ldr	r5, [pc, #24]	; (8003f00 <_kill_r+0x20>)
 8003ee6:	0004      	movs	r4, r0
 8003ee8:	0008      	movs	r0, r1
 8003eea:	0011      	movs	r1, r2
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	f7fd fef2 	bl	8001cd6 <_kill>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d103      	bne.n	8003efe <_kill_r+0x1e>
 8003ef6:	682b      	ldr	r3, [r5, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d000      	beq.n	8003efe <_kill_r+0x1e>
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	2000009c 	.word	0x2000009c

08003f04 <_getpid_r>:
 8003f04:	b510      	push	{r4, lr}
 8003f06:	f7fd fee0 	bl	8001cca <_getpid>
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <_fstat_r>:
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	4d06      	ldr	r5, [pc, #24]	; (8003f2c <_fstat_r+0x20>)
 8003f12:	0004      	movs	r4, r0
 8003f14:	0008      	movs	r0, r1
 8003f16:	0011      	movs	r1, r2
 8003f18:	602b      	str	r3, [r5, #0]
 8003f1a:	f7fd ff3b 	bl	8001d94 <_fstat>
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d103      	bne.n	8003f2a <_fstat_r+0x1e>
 8003f22:	682b      	ldr	r3, [r5, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d000      	beq.n	8003f2a <_fstat_r+0x1e>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	2000009c 	.word	0x2000009c

08003f30 <_isatty_r>:
 8003f30:	2300      	movs	r3, #0
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	4d06      	ldr	r5, [pc, #24]	; (8003f50 <_isatty_r+0x20>)
 8003f36:	0004      	movs	r4, r0
 8003f38:	0008      	movs	r0, r1
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	f7fd ff38 	bl	8001db0 <_isatty>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d103      	bne.n	8003f4c <_isatty_r+0x1c>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d000      	beq.n	8003f4c <_isatty_r+0x1c>
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	2000009c 	.word	0x2000009c

08003f54 <_malloc_usable_size_r>:
 8003f54:	1f0b      	subs	r3, r1, #4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1f18      	subs	r0, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da01      	bge.n	8003f62 <_malloc_usable_size_r+0xe>
 8003f5e:	580b      	ldr	r3, [r1, r0]
 8003f60:	18c0      	adds	r0, r0, r3
 8003f62:	4770      	bx	lr

08003f64 <_gettimeofday>:
 8003f64:	2258      	movs	r2, #88	; 0x58
 8003f66:	2001      	movs	r0, #1
 8003f68:	4b01      	ldr	r3, [pc, #4]	; (8003f70 <_gettimeofday+0xc>)
 8003f6a:	4240      	negs	r0, r0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4770      	bx	lr
 8003f70:	2000009c 	.word	0x2000009c

08003f74 <_init>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr

08003f80 <_fini>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr
